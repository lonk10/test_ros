// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_action
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <turtlesim/action/rotate_absolute.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("turtlesim/RotateAbsolute_Result", RotateAbsolute_ResultTypeSupport)
	typemap.RegisterMessage("turtlesim/action/RotateAbsolute_Result", RotateAbsolute_ResultTypeSupport)
}

type RotateAbsolute_Result struct {
	Delta float32 `yaml:"delta"`// The angular displacement in radians to the starting position
}

// NewRotateAbsolute_Result creates a new RotateAbsolute_Result with default values.
func NewRotateAbsolute_Result() *RotateAbsolute_Result {
	self := RotateAbsolute_Result{}
	self.SetDefaults()
	return &self
}

func (t *RotateAbsolute_Result) Clone() *RotateAbsolute_Result {
	c := &RotateAbsolute_Result{}
	c.Delta = t.Delta
	return c
}

func (t *RotateAbsolute_Result) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RotateAbsolute_Result) SetDefaults() {
	t.Delta = 0
}

func (t *RotateAbsolute_Result) GetTypeSupport() types.MessageTypeSupport {
	return RotateAbsolute_ResultTypeSupport
}

// RotateAbsolute_ResultPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RotateAbsolute_ResultPublisher struct {
	*rclgo.Publisher
}

// NewRotateAbsolute_ResultPublisher creates and returns a new publisher for the
// RotateAbsolute_Result
func NewRotateAbsolute_ResultPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RotateAbsolute_ResultPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RotateAbsolute_ResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RotateAbsolute_ResultPublisher{pub}, nil
}

func (p *RotateAbsolute_ResultPublisher) Publish(msg *RotateAbsolute_Result) error {
	return p.Publisher.Publish(msg)
}

// RotateAbsolute_ResultSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RotateAbsolute_ResultSubscription struct {
	*rclgo.Subscription
}

// RotateAbsolute_ResultSubscriptionCallback type is used to provide a subscription
// handler function for a RotateAbsolute_ResultSubscription.
type RotateAbsolute_ResultSubscriptionCallback func(msg *RotateAbsolute_Result, info *rclgo.MessageInfo, err error)

// NewRotateAbsolute_ResultSubscription creates and returns a new subscription for the
// RotateAbsolute_Result
func NewRotateAbsolute_ResultSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RotateAbsolute_ResultSubscriptionCallback) (*RotateAbsolute_ResultSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RotateAbsolute_Result
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RotateAbsolute_ResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RotateAbsolute_ResultSubscription{sub}, nil
}

func (s *RotateAbsolute_ResultSubscription) TakeMessage(out *RotateAbsolute_Result) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRotateAbsolute_ResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRotateAbsolute_ResultSlice(dst, src []RotateAbsolute_Result) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RotateAbsolute_ResultTypeSupport types.MessageTypeSupport = _RotateAbsolute_ResultTypeSupport{}

type _RotateAbsolute_ResultTypeSupport struct{}

func (t _RotateAbsolute_ResultTypeSupport) New() types.Message {
	return NewRotateAbsolute_Result()
}

func (t _RotateAbsolute_ResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.turtlesim__action__RotateAbsolute_Result
	return (unsafe.Pointer)(C.turtlesim__action__RotateAbsolute_Result__create())
}

func (t _RotateAbsolute_ResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.turtlesim__action__RotateAbsolute_Result__destroy((*C.turtlesim__action__RotateAbsolute_Result)(pointer_to_free))
}

func (t _RotateAbsolute_ResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RotateAbsolute_Result)
	mem := (*C.turtlesim__action__RotateAbsolute_Result)(dst)
	mem.delta = C.float(m.Delta)
}

func (t _RotateAbsolute_ResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RotateAbsolute_Result)
	mem := (*C.turtlesim__action__RotateAbsolute_Result)(ros2_message_buffer)
	m.Delta = float32(mem.delta)
}

func (t _RotateAbsolute_ResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__turtlesim__action__RotateAbsolute_Result())
}

type CRotateAbsolute_Result = C.turtlesim__action__RotateAbsolute_Result
type CRotateAbsolute_Result__Sequence = C.turtlesim__action__RotateAbsolute_Result__Sequence

func RotateAbsolute_Result__Sequence_to_Go(goSlice *[]RotateAbsolute_Result, cSlice CRotateAbsolute_Result__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RotateAbsolute_Result, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RotateAbsolute_ResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RotateAbsolute_Result__Sequence_to_C(cSlice *CRotateAbsolute_Result__Sequence, goSlice []RotateAbsolute_Result) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.turtlesim__action__RotateAbsolute_Result)(C.malloc(C.sizeof_struct_turtlesim__action__RotateAbsolute_Result * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RotateAbsolute_ResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RotateAbsolute_Result__Array_to_Go(goSlice []RotateAbsolute_Result, cSlice []CRotateAbsolute_Result) {
	for i := 0; i < len(cSlice); i++ {
		RotateAbsolute_ResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RotateAbsolute_Result__Array_to_C(cSlice []CRotateAbsolute_Result, goSlice []RotateAbsolute_Result) {
	for i := 0; i < len(goSlice); i++ {
		RotateAbsolute_ResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
