// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <turtlesim/srv/teleport_absolute.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("turtlesim/TeleportAbsolute", TeleportAbsoluteTypeSupport)
	typemap.RegisterService("turtlesim/srv/TeleportAbsolute", TeleportAbsoluteTypeSupport)
}

type _TeleportAbsoluteTypeSupport struct {}

func (s _TeleportAbsoluteTypeSupport) Request() types.MessageTypeSupport {
	return TeleportAbsolute_RequestTypeSupport
}

func (s _TeleportAbsoluteTypeSupport) Response() types.MessageTypeSupport {
	return TeleportAbsolute_ResponseTypeSupport
}

func (s _TeleportAbsoluteTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__TeleportAbsolute())
}

// Modifying this variable is undefined behavior.
var TeleportAbsoluteTypeSupport types.ServiceTypeSupport = _TeleportAbsoluteTypeSupport{}

// TeleportAbsoluteClient wraps rclgo.Client to provide type safe helper
// functions
type TeleportAbsoluteClient struct {
	*rclgo.Client
}

// NewTeleportAbsoluteClient creates and returns a new client for the
// TeleportAbsolute
func NewTeleportAbsoluteClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*TeleportAbsoluteClient, error) {
	client, err := node.NewClient(serviceName, TeleportAbsoluteTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TeleportAbsoluteClient{client}, nil
}

func (s *TeleportAbsoluteClient) Send(ctx context.Context, req *TeleportAbsolute_Request) (*TeleportAbsolute_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*TeleportAbsolute_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type TeleportAbsoluteServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s TeleportAbsoluteServiceResponseSender) SendResponse(resp *TeleportAbsolute_Response) error {
	return s.sender.SendResponse(resp)
}

type TeleportAbsoluteServiceRequestHandler func(*rclgo.ServiceInfo, *TeleportAbsolute_Request, TeleportAbsoluteServiceResponseSender)

// TeleportAbsoluteService wraps rclgo.Service to provide type safe helper
// functions
type TeleportAbsoluteService struct {
	*rclgo.Service
}

// NewTeleportAbsoluteService creates and returns a new service for the
// TeleportAbsolute
func NewTeleportAbsoluteService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler TeleportAbsoluteServiceRequestHandler) (*TeleportAbsoluteService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*TeleportAbsolute_Request)
		responseSender := TeleportAbsoluteServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, TeleportAbsoluteTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &TeleportAbsoluteService{service}, nil
}