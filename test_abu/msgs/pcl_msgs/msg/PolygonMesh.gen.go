// Code generated by rclgo-gen. DO NOT EDIT.

package pcl_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	sensor_msgs_msg "test/msgs/sensor_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <pcl_msgs/msg/polygon_mesh.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("pcl_msgs/PolygonMesh", PolygonMeshTypeSupport)
	typemap.RegisterMessage("pcl_msgs/msg/PolygonMesh", PolygonMeshTypeSupport)
}

type PolygonMesh struct {
	Header std_msgs_msg.Header `yaml:"header"`// Separate header for the polygonal surface
	Cloud sensor_msgs_msg.PointCloud2 `yaml:"cloud"`// Vertices of the mesh as a point cloud
	Polygons []Vertices `yaml:"polygons"`// List of polygons
}

// NewPolygonMesh creates a new PolygonMesh with default values.
func NewPolygonMesh() *PolygonMesh {
	self := PolygonMesh{}
	self.SetDefaults()
	return &self
}

func (t *PolygonMesh) Clone() *PolygonMesh {
	c := &PolygonMesh{}
	c.Header = *t.Header.Clone()
	c.Cloud = *t.Cloud.Clone()
	if t.Polygons != nil {
		c.Polygons = make([]Vertices, len(t.Polygons))
		CloneVerticesSlice(c.Polygons, t.Polygons)
	}
	return c
}

func (t *PolygonMesh) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PolygonMesh) SetDefaults() {
	t.Header.SetDefaults()
	t.Cloud.SetDefaults()
	t.Polygons = nil
}

func (t *PolygonMesh) GetTypeSupport() types.MessageTypeSupport {
	return PolygonMeshTypeSupport
}

// PolygonMeshPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PolygonMeshPublisher struct {
	*rclgo.Publisher
}

// NewPolygonMeshPublisher creates and returns a new publisher for the
// PolygonMesh
func NewPolygonMeshPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PolygonMeshPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PolygonMeshTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PolygonMeshPublisher{pub}, nil
}

func (p *PolygonMeshPublisher) Publish(msg *PolygonMesh) error {
	return p.Publisher.Publish(msg)
}

// PolygonMeshSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PolygonMeshSubscription struct {
	*rclgo.Subscription
}

// PolygonMeshSubscriptionCallback type is used to provide a subscription
// handler function for a PolygonMeshSubscription.
type PolygonMeshSubscriptionCallback func(msg *PolygonMesh, info *rclgo.MessageInfo, err error)

// NewPolygonMeshSubscription creates and returns a new subscription for the
// PolygonMesh
func NewPolygonMeshSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PolygonMeshSubscriptionCallback) (*PolygonMeshSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PolygonMesh
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PolygonMeshTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PolygonMeshSubscription{sub}, nil
}

func (s *PolygonMeshSubscription) TakeMessage(out *PolygonMesh) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePolygonMeshSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePolygonMeshSlice(dst, src []PolygonMesh) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PolygonMeshTypeSupport types.MessageTypeSupport = _PolygonMeshTypeSupport{}

type _PolygonMeshTypeSupport struct{}

func (t _PolygonMeshTypeSupport) New() types.Message {
	return NewPolygonMesh()
}

func (t _PolygonMeshTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.pcl_msgs__msg__PolygonMesh
	return (unsafe.Pointer)(C.pcl_msgs__msg__PolygonMesh__create())
}

func (t _PolygonMeshTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.pcl_msgs__msg__PolygonMesh__destroy((*C.pcl_msgs__msg__PolygonMesh)(pointer_to_free))
}

func (t _PolygonMeshTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PolygonMesh)
	mem := (*C.pcl_msgs__msg__PolygonMesh)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	sensor_msgs_msg.PointCloud2TypeSupport.AsCStruct(unsafe.Pointer(&mem.cloud), &m.Cloud)
	Vertices__Sequence_to_C(&mem.polygons, m.Polygons)
}

func (t _PolygonMeshTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PolygonMesh)
	mem := (*C.pcl_msgs__msg__PolygonMesh)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	sensor_msgs_msg.PointCloud2TypeSupport.AsGoStruct(&m.Cloud, unsafe.Pointer(&mem.cloud))
	Vertices__Sequence_to_Go(&m.Polygons, mem.polygons)
}

func (t _PolygonMeshTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__pcl_msgs__msg__PolygonMesh())
}

type CPolygonMesh = C.pcl_msgs__msg__PolygonMesh
type CPolygonMesh__Sequence = C.pcl_msgs__msg__PolygonMesh__Sequence

func PolygonMesh__Sequence_to_Go(goSlice *[]PolygonMesh, cSlice CPolygonMesh__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PolygonMesh, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PolygonMeshTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PolygonMesh__Sequence_to_C(cSlice *CPolygonMesh__Sequence, goSlice []PolygonMesh) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.pcl_msgs__msg__PolygonMesh)(C.malloc(C.sizeof_struct_pcl_msgs__msg__PolygonMesh * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PolygonMeshTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PolygonMesh__Array_to_Go(goSlice []PolygonMesh, cSlice []CPolygonMesh) {
	for i := 0; i < len(cSlice); i++ {
		PolygonMeshTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PolygonMesh__Array_to_C(cSlice []CPolygonMesh, goSlice []PolygonMesh) {
	for i := 0; i < len(goSlice); i++ {
		PolygonMeshTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
