// Code generated by rclgo-gen. DO NOT EDIT.

package pcl_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <pcl_msgs/msg/vertices.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("pcl_msgs/Vertices", VerticesTypeSupport)
	typemap.RegisterMessage("pcl_msgs/msg/Vertices", VerticesTypeSupport)
}

type Vertices struct {
	Vertices []uint32 `yaml:"vertices"`// List of point indices
}

// NewVertices creates a new Vertices with default values.
func NewVertices() *Vertices {
	self := Vertices{}
	self.SetDefaults()
	return &self
}

func (t *Vertices) Clone() *Vertices {
	c := &Vertices{}
	if t.Vertices != nil {
		c.Vertices = make([]uint32, len(t.Vertices))
		copy(c.Vertices, t.Vertices)
	}
	return c
}

func (t *Vertices) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Vertices) SetDefaults() {
	t.Vertices = nil
}

func (t *Vertices) GetTypeSupport() types.MessageTypeSupport {
	return VerticesTypeSupport
}

// VerticesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VerticesPublisher struct {
	*rclgo.Publisher
}

// NewVerticesPublisher creates and returns a new publisher for the
// Vertices
func NewVerticesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VerticesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VerticesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VerticesPublisher{pub}, nil
}

func (p *VerticesPublisher) Publish(msg *Vertices) error {
	return p.Publisher.Publish(msg)
}

// VerticesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VerticesSubscription struct {
	*rclgo.Subscription
}

// VerticesSubscriptionCallback type is used to provide a subscription
// handler function for a VerticesSubscription.
type VerticesSubscriptionCallback func(msg *Vertices, info *rclgo.MessageInfo, err error)

// NewVerticesSubscription creates and returns a new subscription for the
// Vertices
func NewVerticesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VerticesSubscriptionCallback) (*VerticesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Vertices
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VerticesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VerticesSubscription{sub}, nil
}

func (s *VerticesSubscription) TakeMessage(out *Vertices) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVerticesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVerticesSlice(dst, src []Vertices) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VerticesTypeSupport types.MessageTypeSupport = _VerticesTypeSupport{}

type _VerticesTypeSupport struct{}

func (t _VerticesTypeSupport) New() types.Message {
	return NewVertices()
}

func (t _VerticesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.pcl_msgs__msg__Vertices
	return (unsafe.Pointer)(C.pcl_msgs__msg__Vertices__create())
}

func (t _VerticesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.pcl_msgs__msg__Vertices__destroy((*C.pcl_msgs__msg__Vertices)(pointer_to_free))
}

func (t _VerticesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Vertices)
	mem := (*C.pcl_msgs__msg__Vertices)(dst)
	primitives.Uint32__Sequence_to_C((*primitives.CUint32__Sequence)(unsafe.Pointer(&mem.vertices)), m.Vertices)
}

func (t _VerticesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Vertices)
	mem := (*C.pcl_msgs__msg__Vertices)(ros2_message_buffer)
	primitives.Uint32__Sequence_to_Go(&m.Vertices, *(*primitives.CUint32__Sequence)(unsafe.Pointer(&mem.vertices)))
}

func (t _VerticesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__pcl_msgs__msg__Vertices())
}

type CVertices = C.pcl_msgs__msg__Vertices
type CVertices__Sequence = C.pcl_msgs__msg__Vertices__Sequence

func Vertices__Sequence_to_Go(goSlice *[]Vertices, cSlice CVertices__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Vertices, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VerticesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Vertices__Sequence_to_C(cSlice *CVertices__Sequence, goSlice []Vertices) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.pcl_msgs__msg__Vertices)(C.malloc(C.sizeof_struct_pcl_msgs__msg__Vertices * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VerticesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Vertices__Array_to_Go(goSlice []Vertices, cSlice []CVertices) {
	for i := 0; i < len(cSlice); i++ {
		VerticesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Vertices__Array_to_C(cSlice []CVertices, goSlice []Vertices) {
	for i := 0; i < len(goSlice); i++ {
		VerticesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
