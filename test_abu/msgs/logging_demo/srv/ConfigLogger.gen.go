// Code generated by rclgo-gen. DO NOT EDIT.

package logging_demo_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <logging_demo/srv/config_logger.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("logging_demo/ConfigLogger", ConfigLoggerTypeSupport)
	typemap.RegisterService("logging_demo/srv/ConfigLogger", ConfigLoggerTypeSupport)
}

type _ConfigLoggerTypeSupport struct {}

func (s _ConfigLoggerTypeSupport) Request() types.MessageTypeSupport {
	return ConfigLogger_RequestTypeSupport
}

func (s _ConfigLoggerTypeSupport) Response() types.MessageTypeSupport {
	return ConfigLogger_ResponseTypeSupport
}

func (s _ConfigLoggerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__logging_demo__srv__ConfigLogger())
}

// Modifying this variable is undefined behavior.
var ConfigLoggerTypeSupport types.ServiceTypeSupport = _ConfigLoggerTypeSupport{}

// ConfigLoggerClient wraps rclgo.Client to provide type safe helper
// functions
type ConfigLoggerClient struct {
	*rclgo.Client
}

// NewConfigLoggerClient creates and returns a new client for the
// ConfigLogger
func NewConfigLoggerClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*ConfigLoggerClient, error) {
	client, err := node.NewClient(serviceName, ConfigLoggerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ConfigLoggerClient{client}, nil
}

func (s *ConfigLoggerClient) Send(ctx context.Context, req *ConfigLogger_Request) (*ConfigLogger_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*ConfigLogger_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type ConfigLoggerServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s ConfigLoggerServiceResponseSender) SendResponse(resp *ConfigLogger_Response) error {
	return s.sender.SendResponse(resp)
}

type ConfigLoggerServiceRequestHandler func(*rclgo.ServiceInfo, *ConfigLogger_Request, ConfigLoggerServiceResponseSender)

// ConfigLoggerService wraps rclgo.Service to provide type safe helper
// functions
type ConfigLoggerService struct {
	*rclgo.Service
}

// NewConfigLoggerService creates and returns a new service for the
// ConfigLogger
func NewConfigLoggerService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler ConfigLoggerServiceRequestHandler) (*ConfigLoggerService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*ConfigLogger_Request)
		responseSender := ConfigLoggerServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, ConfigLoggerTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &ConfigLoggerService{service}, nil
}