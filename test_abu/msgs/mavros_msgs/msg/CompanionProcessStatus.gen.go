// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/companion_process_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CompanionProcessStatus", CompanionProcessStatusTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/CompanionProcessStatus", CompanionProcessStatusTypeSupport)
}
const (
	CompanionProcessStatus_MAV_STATE_UNINIT uint8 = 0
	CompanionProcessStatus_MAV_STATE_BOOT uint8 = 1
	CompanionProcessStatus_MAV_STATE_CALIBRATING uint8 = 2
	CompanionProcessStatus_MAV_STATE_STANDBY uint8 = 3
	CompanionProcessStatus_MAV_STATE_ACTIVE uint8 = 4
	CompanionProcessStatus_MAV_STATE_CRITICAL uint8 = 5
	CompanionProcessStatus_MAV_STATE_EMERGENCY uint8 = 6
	CompanionProcessStatus_MAV_STATE_POWEROFF uint8 = 7
	CompanionProcessStatus_MAV_STATE_FLIGHT_TERMINATION uint8 = 8
	CompanionProcessStatus_MAV_COMP_ID_OBSTACLE_AVOIDANCE uint8 = 196
	CompanionProcessStatus_MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY uint8 = 197
)

type CompanionProcessStatus struct {
	Header std_msgs_msg.Header `yaml:"header"`
	State uint8 `yaml:"state"`// See enum COMPANION_PROCESS_STATE
	Component uint8 `yaml:"component"`// See enum MAV_COMPONENT
}

// NewCompanionProcessStatus creates a new CompanionProcessStatus with default values.
func NewCompanionProcessStatus() *CompanionProcessStatus {
	self := CompanionProcessStatus{}
	self.SetDefaults()
	return &self
}

func (t *CompanionProcessStatus) Clone() *CompanionProcessStatus {
	c := &CompanionProcessStatus{}
	c.Header = *t.Header.Clone()
	c.State = t.State
	c.Component = t.Component
	return c
}

func (t *CompanionProcessStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CompanionProcessStatus) SetDefaults() {
	t.Header.SetDefaults()
	t.State = 0
	t.Component = 0
}

func (t *CompanionProcessStatus) GetTypeSupport() types.MessageTypeSupport {
	return CompanionProcessStatusTypeSupport
}

// CompanionProcessStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CompanionProcessStatusPublisher struct {
	*rclgo.Publisher
}

// NewCompanionProcessStatusPublisher creates and returns a new publisher for the
// CompanionProcessStatus
func NewCompanionProcessStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CompanionProcessStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CompanionProcessStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CompanionProcessStatusPublisher{pub}, nil
}

func (p *CompanionProcessStatusPublisher) Publish(msg *CompanionProcessStatus) error {
	return p.Publisher.Publish(msg)
}

// CompanionProcessStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CompanionProcessStatusSubscription struct {
	*rclgo.Subscription
}

// CompanionProcessStatusSubscriptionCallback type is used to provide a subscription
// handler function for a CompanionProcessStatusSubscription.
type CompanionProcessStatusSubscriptionCallback func(msg *CompanionProcessStatus, info *rclgo.MessageInfo, err error)

// NewCompanionProcessStatusSubscription creates and returns a new subscription for the
// CompanionProcessStatus
func NewCompanionProcessStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CompanionProcessStatusSubscriptionCallback) (*CompanionProcessStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CompanionProcessStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CompanionProcessStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CompanionProcessStatusSubscription{sub}, nil
}

func (s *CompanionProcessStatusSubscription) TakeMessage(out *CompanionProcessStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCompanionProcessStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCompanionProcessStatusSlice(dst, src []CompanionProcessStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CompanionProcessStatusTypeSupport types.MessageTypeSupport = _CompanionProcessStatusTypeSupport{}

type _CompanionProcessStatusTypeSupport struct{}

func (t _CompanionProcessStatusTypeSupport) New() types.Message {
	return NewCompanionProcessStatus()
}

func (t _CompanionProcessStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__CompanionProcessStatus
	return (unsafe.Pointer)(C.mavros_msgs__msg__CompanionProcessStatus__create())
}

func (t _CompanionProcessStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__CompanionProcessStatus__destroy((*C.mavros_msgs__msg__CompanionProcessStatus)(pointer_to_free))
}

func (t _CompanionProcessStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CompanionProcessStatus)
	mem := (*C.mavros_msgs__msg__CompanionProcessStatus)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.state = C.uint8_t(m.State)
	mem.component = C.uint8_t(m.Component)
}

func (t _CompanionProcessStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CompanionProcessStatus)
	mem := (*C.mavros_msgs__msg__CompanionProcessStatus)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.State = uint8(mem.state)
	m.Component = uint8(mem.component)
}

func (t _CompanionProcessStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__CompanionProcessStatus())
}

type CCompanionProcessStatus = C.mavros_msgs__msg__CompanionProcessStatus
type CCompanionProcessStatus__Sequence = C.mavros_msgs__msg__CompanionProcessStatus__Sequence

func CompanionProcessStatus__Sequence_to_Go(goSlice *[]CompanionProcessStatus, cSlice CCompanionProcessStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CompanionProcessStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CompanionProcessStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CompanionProcessStatus__Sequence_to_C(cSlice *CCompanionProcessStatus__Sequence, goSlice []CompanionProcessStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__CompanionProcessStatus)(C.malloc(C.sizeof_struct_mavros_msgs__msg__CompanionProcessStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CompanionProcessStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CompanionProcessStatus__Array_to_Go(goSlice []CompanionProcessStatus, cSlice []CCompanionProcessStatus) {
	for i := 0; i < len(cSlice); i++ {
		CompanionProcessStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CompanionProcessStatus__Array_to_C(cSlice []CCompanionProcessStatus, goSlice []CompanionProcessStatus) {
	for i := 0; i < len(goSlice); i++ {
		CompanionProcessStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
