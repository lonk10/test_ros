// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	rcl_interfaces_msg "test/msgs/rcl_interfaces/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/param_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ParamEvent", ParamEventTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ParamEvent", ParamEventTypeSupport)
}

type ParamEvent struct {
	Header std_msgs_msg.Header `yaml:"header"`
	ParamId string `yaml:"param_id"`
	Value rcl_interfaces_msg.ParameterValue `yaml:"value"`
	ParamIndex uint16 `yaml:"param_index"`
	ParamCount uint16 `yaml:"param_count"`
}

// NewParamEvent creates a new ParamEvent with default values.
func NewParamEvent() *ParamEvent {
	self := ParamEvent{}
	self.SetDefaults()
	return &self
}

func (t *ParamEvent) Clone() *ParamEvent {
	c := &ParamEvent{}
	c.Header = *t.Header.Clone()
	c.ParamId = t.ParamId
	c.Value = *t.Value.Clone()
	c.ParamIndex = t.ParamIndex
	c.ParamCount = t.ParamCount
	return c
}

func (t *ParamEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamEvent) SetDefaults() {
	t.Header.SetDefaults()
	t.ParamId = ""
	t.Value.SetDefaults()
	t.ParamIndex = 0
	t.ParamCount = 0
}

func (t *ParamEvent) GetTypeSupport() types.MessageTypeSupport {
	return ParamEventTypeSupport
}

// ParamEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamEventPublisher struct {
	*rclgo.Publisher
}

// NewParamEventPublisher creates and returns a new publisher for the
// ParamEvent
func NewParamEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamEventPublisher{pub}, nil
}

func (p *ParamEventPublisher) Publish(msg *ParamEvent) error {
	return p.Publisher.Publish(msg)
}

// ParamEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamEventSubscription struct {
	*rclgo.Subscription
}

// ParamEventSubscriptionCallback type is used to provide a subscription
// handler function for a ParamEventSubscription.
type ParamEventSubscriptionCallback func(msg *ParamEvent, info *rclgo.MessageInfo, err error)

// NewParamEventSubscription creates and returns a new subscription for the
// ParamEvent
func NewParamEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamEventSubscriptionCallback) (*ParamEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamEventSubscription{sub}, nil
}

func (s *ParamEventSubscription) TakeMessage(out *ParamEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamEventSlice(dst, src []ParamEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamEventTypeSupport types.MessageTypeSupport = _ParamEventTypeSupport{}

type _ParamEventTypeSupport struct{}

func (t _ParamEventTypeSupport) New() types.Message {
	return NewParamEvent()
}

func (t _ParamEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ParamEvent
	return (unsafe.Pointer)(C.mavros_msgs__msg__ParamEvent__create())
}

func (t _ParamEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ParamEvent__destroy((*C.mavros_msgs__msg__ParamEvent)(pointer_to_free))
}

func (t _ParamEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamEvent)
	mem := (*C.mavros_msgs__msg__ParamEvent)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.param_id), m.ParamId)
	rcl_interfaces_msg.ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
	mem.param_index = C.uint16_t(m.ParamIndex)
	mem.param_count = C.uint16_t(m.ParamCount)
}

func (t _ParamEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamEvent)
	mem := (*C.mavros_msgs__msg__ParamEvent)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.ParamId, unsafe.Pointer(&mem.param_id))
	rcl_interfaces_msg.ParameterValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
	m.ParamIndex = uint16(mem.param_index)
	m.ParamCount = uint16(mem.param_count)
}

func (t _ParamEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ParamEvent())
}

type CParamEvent = C.mavros_msgs__msg__ParamEvent
type CParamEvent__Sequence = C.mavros_msgs__msg__ParamEvent__Sequence

func ParamEvent__Sequence_to_Go(goSlice *[]ParamEvent, cSlice CParamEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamEvent__Sequence_to_C(cSlice *CParamEvent__Sequence, goSlice []ParamEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ParamEvent)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ParamEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamEvent__Array_to_Go(goSlice []ParamEvent, cSlice []CParamEvent) {
	for i := 0; i < len(cSlice); i++ {
		ParamEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamEvent__Array_to_C(cSlice []CParamEvent, goSlice []ParamEvent) {
	for i := 0; i < len(goSlice); i++ {
		ParamEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
