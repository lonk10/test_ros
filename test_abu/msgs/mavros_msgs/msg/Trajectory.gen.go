// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/trajectory.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/Trajectory", TrajectoryTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/Trajectory", TrajectoryTypeSupport)
}
const (
	Trajectory_MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS uint8 = 0
	Trajectory_MAV_TRAJECTORY_REPRESENTATION_BEZIER uint8 = 1
)

type Trajectory struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Type uint8 `yaml:"type"`// See enum MAV_TRAJECTORY_REPRESENTATION.
	Point1 PositionTarget `yaml:"point_1"`
	Point2 PositionTarget `yaml:"point_2"`
	Point3 PositionTarget `yaml:"point_3"`
	Point4 PositionTarget `yaml:"point_4"`
	Point5 PositionTarget `yaml:"point_5"`
	PointValid [5]uint8 `yaml:"point_valid"`// States if respective point is valid.
	Command [5]uint16 `yaml:"command"`// MAV_CMD associated with each point. UINT16_MAX if unused.
	TimeHorizon [5]float32 `yaml:"time_horizon"`// if type MAV_TRAJECTORY_REPRESENTATION_BEZIER, it represents the time horizon for each point, otherwise set to NaN
}

// NewTrajectory creates a new Trajectory with default values.
func NewTrajectory() *Trajectory {
	self := Trajectory{}
	self.SetDefaults()
	return &self
}

func (t *Trajectory) Clone() *Trajectory {
	c := &Trajectory{}
	c.Header = *t.Header.Clone()
	c.Type = t.Type
	c.Point1 = *t.Point1.Clone()
	c.Point2 = *t.Point2.Clone()
	c.Point3 = *t.Point3.Clone()
	c.Point4 = *t.Point4.Clone()
	c.Point5 = *t.Point5.Clone()
	c.PointValid = t.PointValid
	c.Command = t.Command
	c.TimeHorizon = t.TimeHorizon
	return c
}

func (t *Trajectory) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Trajectory) SetDefaults() {
	t.Header.SetDefaults()
	t.Type = 0
	t.Point1.SetDefaults()
	t.Point2.SetDefaults()
	t.Point3.SetDefaults()
	t.Point4.SetDefaults()
	t.Point5.SetDefaults()
	t.PointValid = [5]uint8{}
	t.Command = [5]uint16{}
	t.TimeHorizon = [5]float32{}
}

func (t *Trajectory) GetTypeSupport() types.MessageTypeSupport {
	return TrajectoryTypeSupport
}

// TrajectoryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TrajectoryPublisher struct {
	*rclgo.Publisher
}

// NewTrajectoryPublisher creates and returns a new publisher for the
// Trajectory
func NewTrajectoryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TrajectoryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TrajectoryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectoryPublisher{pub}, nil
}

func (p *TrajectoryPublisher) Publish(msg *Trajectory) error {
	return p.Publisher.Publish(msg)
}

// TrajectorySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TrajectorySubscription struct {
	*rclgo.Subscription
}

// TrajectorySubscriptionCallback type is used to provide a subscription
// handler function for a TrajectorySubscription.
type TrajectorySubscriptionCallback func(msg *Trajectory, info *rclgo.MessageInfo, err error)

// NewTrajectorySubscription creates and returns a new subscription for the
// Trajectory
func NewTrajectorySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TrajectorySubscriptionCallback) (*TrajectorySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Trajectory
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TrajectoryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectorySubscription{sub}, nil
}

func (s *TrajectorySubscription) TakeMessage(out *Trajectory) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectorySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectorySlice(dst, src []Trajectory) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryTypeSupport types.MessageTypeSupport = _TrajectoryTypeSupport{}

type _TrajectoryTypeSupport struct{}

func (t _TrajectoryTypeSupport) New() types.Message {
	return NewTrajectory()
}

func (t _TrajectoryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__Trajectory
	return (unsafe.Pointer)(C.mavros_msgs__msg__Trajectory__create())
}

func (t _TrajectoryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__Trajectory__destroy((*C.mavros_msgs__msg__Trajectory)(pointer_to_free))
}

func (t _TrajectoryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Trajectory)
	mem := (*C.mavros_msgs__msg__Trajectory)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem._type = C.uint8_t(m.Type)
	PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&mem.point_1), &m.Point1)
	PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&mem.point_2), &m.Point2)
	PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&mem.point_3), &m.Point3)
	PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&mem.point_4), &m.Point4)
	PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&mem.point_5), &m.Point5)
	cSlice_point_valid := mem.point_valid[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_point_valid)), m.PointValid[:])
	cSlice_command := mem.command[:]
	primitives.Uint16__Array_to_C(*(*[]primitives.CUint16)(unsafe.Pointer(&cSlice_command)), m.Command[:])
	cSlice_time_horizon := mem.time_horizon[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_time_horizon)), m.TimeHorizon[:])
}

func (t _TrajectoryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Trajectory)
	mem := (*C.mavros_msgs__msg__Trajectory)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Type = uint8(mem._type)
	PositionTargetTypeSupport.AsGoStruct(&m.Point1, unsafe.Pointer(&mem.point_1))
	PositionTargetTypeSupport.AsGoStruct(&m.Point2, unsafe.Pointer(&mem.point_2))
	PositionTargetTypeSupport.AsGoStruct(&m.Point3, unsafe.Pointer(&mem.point_3))
	PositionTargetTypeSupport.AsGoStruct(&m.Point4, unsafe.Pointer(&mem.point_4))
	PositionTargetTypeSupport.AsGoStruct(&m.Point5, unsafe.Pointer(&mem.point_5))
	cSlice_point_valid := mem.point_valid[:]
	primitives.Uint8__Array_to_Go(m.PointValid[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_point_valid)))
	cSlice_command := mem.command[:]
	primitives.Uint16__Array_to_Go(m.Command[:], *(*[]primitives.CUint16)(unsafe.Pointer(&cSlice_command)))
	cSlice_time_horizon := mem.time_horizon[:]
	primitives.Float32__Array_to_Go(m.TimeHorizon[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_time_horizon)))
}

func (t _TrajectoryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__Trajectory())
}

type CTrajectory = C.mavros_msgs__msg__Trajectory
type CTrajectory__Sequence = C.mavros_msgs__msg__Trajectory__Sequence

func Trajectory__Sequence_to_Go(goSlice *[]Trajectory, cSlice CTrajectory__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Trajectory, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectoryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Trajectory__Sequence_to_C(cSlice *CTrajectory__Sequence, goSlice []Trajectory) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__Trajectory)(C.malloc(C.sizeof_struct_mavros_msgs__msg__Trajectory * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Trajectory__Array_to_Go(goSlice []Trajectory, cSlice []CTrajectory) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Trajectory__Array_to_C(cSlice []CTrajectory, goSlice []Trajectory) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
