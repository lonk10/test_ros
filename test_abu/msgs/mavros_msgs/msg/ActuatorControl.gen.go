// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/actuator_control.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ActuatorControl", ActuatorControlTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ActuatorControl", ActuatorControlTypeSupport)
}
const (
	ActuatorControl_PX4_MIX_FLIGHT_CONTROL uint8 = 0// constant for mixer group
	ActuatorControl_PX4_MIX_FLIGHT_CONTROL_VTOL_ALT uint8 = 1
	ActuatorControl_PX4_MIX_PAYLOAD uint8 = 2
	ActuatorControl_PX4_MIX_MANUAL_PASSTHROUGH uint8 = 3
)

type ActuatorControl struct {
	Header std_msgs_msg.Header `yaml:"header"`
	GroupMix uint8 `yaml:"group_mix"`
	Controls [8]float32 `yaml:"controls"`
}

// NewActuatorControl creates a new ActuatorControl with default values.
func NewActuatorControl() *ActuatorControl {
	self := ActuatorControl{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorControl) Clone() *ActuatorControl {
	c := &ActuatorControl{}
	c.Header = *t.Header.Clone()
	c.GroupMix = t.GroupMix
	c.Controls = t.Controls
	return c
}

func (t *ActuatorControl) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorControl) SetDefaults() {
	t.Header.SetDefaults()
	t.GroupMix = 0
	t.Controls = [8]float32{}
}

func (t *ActuatorControl) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorControlTypeSupport
}

// ActuatorControlPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorControlPublisher struct {
	*rclgo.Publisher
}

// NewActuatorControlPublisher creates and returns a new publisher for the
// ActuatorControl
func NewActuatorControlPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorControlPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorControlTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorControlPublisher{pub}, nil
}

func (p *ActuatorControlPublisher) Publish(msg *ActuatorControl) error {
	return p.Publisher.Publish(msg)
}

// ActuatorControlSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorControlSubscription struct {
	*rclgo.Subscription
}

// ActuatorControlSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorControlSubscription.
type ActuatorControlSubscriptionCallback func(msg *ActuatorControl, info *rclgo.MessageInfo, err error)

// NewActuatorControlSubscription creates and returns a new subscription for the
// ActuatorControl
func NewActuatorControlSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorControlSubscriptionCallback) (*ActuatorControlSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorControl
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorControlTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorControlSubscription{sub}, nil
}

func (s *ActuatorControlSubscription) TakeMessage(out *ActuatorControl) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorControlSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorControlSlice(dst, src []ActuatorControl) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorControlTypeSupport types.MessageTypeSupport = _ActuatorControlTypeSupport{}

type _ActuatorControlTypeSupport struct{}

func (t _ActuatorControlTypeSupport) New() types.Message {
	return NewActuatorControl()
}

func (t _ActuatorControlTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ActuatorControl
	return (unsafe.Pointer)(C.mavros_msgs__msg__ActuatorControl__create())
}

func (t _ActuatorControlTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ActuatorControl__destroy((*C.mavros_msgs__msg__ActuatorControl)(pointer_to_free))
}

func (t _ActuatorControlTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorControl)
	mem := (*C.mavros_msgs__msg__ActuatorControl)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.group_mix = C.uint8_t(m.GroupMix)
	cSlice_controls := mem.controls[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_controls)), m.Controls[:])
}

func (t _ActuatorControlTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorControl)
	mem := (*C.mavros_msgs__msg__ActuatorControl)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.GroupMix = uint8(mem.group_mix)
	cSlice_controls := mem.controls[:]
	primitives.Float32__Array_to_Go(m.Controls[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_controls)))
}

func (t _ActuatorControlTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ActuatorControl())
}

type CActuatorControl = C.mavros_msgs__msg__ActuatorControl
type CActuatorControl__Sequence = C.mavros_msgs__msg__ActuatorControl__Sequence

func ActuatorControl__Sequence_to_Go(goSlice *[]ActuatorControl, cSlice CActuatorControl__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorControl, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorControlTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorControl__Sequence_to_C(cSlice *CActuatorControl__Sequence, goSlice []ActuatorControl) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ActuatorControl)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ActuatorControl * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorControlTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorControl__Array_to_Go(goSlice []ActuatorControl, cSlice []CActuatorControl) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorControlTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorControl__Array_to_C(cSlice []CActuatorControl, goSlice []ActuatorControl) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorControlTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
