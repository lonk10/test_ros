// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/hil_actuator_controls.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/HilActuatorControls", HilActuatorControlsTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/HilActuatorControls", HilActuatorControlsTypeSupport)
}

type HilActuatorControls struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Controls [16]float32 `yaml:"controls"`
	Mode uint8 `yaml:"mode"`
	Flags uint64 `yaml:"flags"`
}

// NewHilActuatorControls creates a new HilActuatorControls with default values.
func NewHilActuatorControls() *HilActuatorControls {
	self := HilActuatorControls{}
	self.SetDefaults()
	return &self
}

func (t *HilActuatorControls) Clone() *HilActuatorControls {
	c := &HilActuatorControls{}
	c.Header = *t.Header.Clone()
	c.Controls = t.Controls
	c.Mode = t.Mode
	c.Flags = t.Flags
	return c
}

func (t *HilActuatorControls) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HilActuatorControls) SetDefaults() {
	t.Header.SetDefaults()
	t.Controls = [16]float32{}
	t.Mode = 0
	t.Flags = 0
}

func (t *HilActuatorControls) GetTypeSupport() types.MessageTypeSupport {
	return HilActuatorControlsTypeSupport
}

// HilActuatorControlsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HilActuatorControlsPublisher struct {
	*rclgo.Publisher
}

// NewHilActuatorControlsPublisher creates and returns a new publisher for the
// HilActuatorControls
func NewHilActuatorControlsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HilActuatorControlsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HilActuatorControlsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HilActuatorControlsPublisher{pub}, nil
}

func (p *HilActuatorControlsPublisher) Publish(msg *HilActuatorControls) error {
	return p.Publisher.Publish(msg)
}

// HilActuatorControlsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HilActuatorControlsSubscription struct {
	*rclgo.Subscription
}

// HilActuatorControlsSubscriptionCallback type is used to provide a subscription
// handler function for a HilActuatorControlsSubscription.
type HilActuatorControlsSubscriptionCallback func(msg *HilActuatorControls, info *rclgo.MessageInfo, err error)

// NewHilActuatorControlsSubscription creates and returns a new subscription for the
// HilActuatorControls
func NewHilActuatorControlsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HilActuatorControlsSubscriptionCallback) (*HilActuatorControlsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HilActuatorControls
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HilActuatorControlsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HilActuatorControlsSubscription{sub}, nil
}

func (s *HilActuatorControlsSubscription) TakeMessage(out *HilActuatorControls) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHilActuatorControlsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHilActuatorControlsSlice(dst, src []HilActuatorControls) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HilActuatorControlsTypeSupport types.MessageTypeSupport = _HilActuatorControlsTypeSupport{}

type _HilActuatorControlsTypeSupport struct{}

func (t _HilActuatorControlsTypeSupport) New() types.Message {
	return NewHilActuatorControls()
}

func (t _HilActuatorControlsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__HilActuatorControls
	return (unsafe.Pointer)(C.mavros_msgs__msg__HilActuatorControls__create())
}

func (t _HilActuatorControlsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__HilActuatorControls__destroy((*C.mavros_msgs__msg__HilActuatorControls)(pointer_to_free))
}

func (t _HilActuatorControlsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HilActuatorControls)
	mem := (*C.mavros_msgs__msg__HilActuatorControls)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	cSlice_controls := mem.controls[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_controls)), m.Controls[:])
	mem.mode = C.uint8_t(m.Mode)
	mem.flags = C.uint64_t(m.Flags)
}

func (t _HilActuatorControlsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HilActuatorControls)
	mem := (*C.mavros_msgs__msg__HilActuatorControls)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	cSlice_controls := mem.controls[:]
	primitives.Float32__Array_to_Go(m.Controls[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_controls)))
	m.Mode = uint8(mem.mode)
	m.Flags = uint64(mem.flags)
}

func (t _HilActuatorControlsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__HilActuatorControls())
}

type CHilActuatorControls = C.mavros_msgs__msg__HilActuatorControls
type CHilActuatorControls__Sequence = C.mavros_msgs__msg__HilActuatorControls__Sequence

func HilActuatorControls__Sequence_to_Go(goSlice *[]HilActuatorControls, cSlice CHilActuatorControls__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HilActuatorControls, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HilActuatorControlsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HilActuatorControls__Sequence_to_C(cSlice *CHilActuatorControls__Sequence, goSlice []HilActuatorControls) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__HilActuatorControls)(C.malloc(C.sizeof_struct_mavros_msgs__msg__HilActuatorControls * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HilActuatorControlsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HilActuatorControls__Array_to_Go(goSlice []HilActuatorControls, cSlice []CHilActuatorControls) {
	for i := 0; i < len(cSlice); i++ {
		HilActuatorControlsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HilActuatorControls__Array_to_C(cSlice []CHilActuatorControls, goSlice []HilActuatorControls) {
	for i := 0; i < len(goSlice); i++ {
		HilActuatorControlsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
