// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/extended_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ExtendedState", ExtendedStateTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ExtendedState", ExtendedStateTypeSupport)
}
const (
	ExtendedState_VTOL_STATE_UNDEFINED uint8 = 0
	ExtendedState_VTOL_STATE_TRANSITION_TO_FW uint8 = 1
	ExtendedState_VTOL_STATE_TRANSITION_TO_MC uint8 = 2
	ExtendedState_VTOL_STATE_MC uint8 = 3
	ExtendedState_VTOL_STATE_FW uint8 = 4
	ExtendedState_LANDED_STATE_UNDEFINED uint8 = 0
	ExtendedState_LANDED_STATE_ON_GROUND uint8 = 1
	ExtendedState_LANDED_STATE_IN_AIR uint8 = 2
	ExtendedState_LANDED_STATE_TAKEOFF uint8 = 3
	ExtendedState_LANDED_STATE_LANDING uint8 = 4
)

type ExtendedState struct {
	Header std_msgs_msg.Header `yaml:"header"`
	VtolState uint8 `yaml:"vtol_state"`
	LandedState uint8 `yaml:"landed_state"`
}

// NewExtendedState creates a new ExtendedState with default values.
func NewExtendedState() *ExtendedState {
	self := ExtendedState{}
	self.SetDefaults()
	return &self
}

func (t *ExtendedState) Clone() *ExtendedState {
	c := &ExtendedState{}
	c.Header = *t.Header.Clone()
	c.VtolState = t.VtolState
	c.LandedState = t.LandedState
	return c
}

func (t *ExtendedState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ExtendedState) SetDefaults() {
	t.Header.SetDefaults()
	t.VtolState = 0
	t.LandedState = 0
}

func (t *ExtendedState) GetTypeSupport() types.MessageTypeSupport {
	return ExtendedStateTypeSupport
}

// ExtendedStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ExtendedStatePublisher struct {
	*rclgo.Publisher
}

// NewExtendedStatePublisher creates and returns a new publisher for the
// ExtendedState
func NewExtendedStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ExtendedStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ExtendedStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ExtendedStatePublisher{pub}, nil
}

func (p *ExtendedStatePublisher) Publish(msg *ExtendedState) error {
	return p.Publisher.Publish(msg)
}

// ExtendedStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ExtendedStateSubscription struct {
	*rclgo.Subscription
}

// ExtendedStateSubscriptionCallback type is used to provide a subscription
// handler function for a ExtendedStateSubscription.
type ExtendedStateSubscriptionCallback func(msg *ExtendedState, info *rclgo.MessageInfo, err error)

// NewExtendedStateSubscription creates and returns a new subscription for the
// ExtendedState
func NewExtendedStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ExtendedStateSubscriptionCallback) (*ExtendedStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ExtendedState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ExtendedStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ExtendedStateSubscription{sub}, nil
}

func (s *ExtendedStateSubscription) TakeMessage(out *ExtendedState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneExtendedStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneExtendedStateSlice(dst, src []ExtendedState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ExtendedStateTypeSupport types.MessageTypeSupport = _ExtendedStateTypeSupport{}

type _ExtendedStateTypeSupport struct{}

func (t _ExtendedStateTypeSupport) New() types.Message {
	return NewExtendedState()
}

func (t _ExtendedStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ExtendedState
	return (unsafe.Pointer)(C.mavros_msgs__msg__ExtendedState__create())
}

func (t _ExtendedStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ExtendedState__destroy((*C.mavros_msgs__msg__ExtendedState)(pointer_to_free))
}

func (t _ExtendedStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ExtendedState)
	mem := (*C.mavros_msgs__msg__ExtendedState)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.vtol_state = C.uint8_t(m.VtolState)
	mem.landed_state = C.uint8_t(m.LandedState)
}

func (t _ExtendedStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ExtendedState)
	mem := (*C.mavros_msgs__msg__ExtendedState)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.VtolState = uint8(mem.vtol_state)
	m.LandedState = uint8(mem.landed_state)
}

func (t _ExtendedStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ExtendedState())
}

type CExtendedState = C.mavros_msgs__msg__ExtendedState
type CExtendedState__Sequence = C.mavros_msgs__msg__ExtendedState__Sequence

func ExtendedState__Sequence_to_Go(goSlice *[]ExtendedState, cSlice CExtendedState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ExtendedState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ExtendedStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ExtendedState__Sequence_to_C(cSlice *CExtendedState__Sequence, goSlice []ExtendedState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ExtendedState)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ExtendedState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ExtendedStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ExtendedState__Array_to_Go(goSlice []ExtendedState, cSlice []CExtendedState) {
	for i := 0; i < len(cSlice); i++ {
		ExtendedStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ExtendedState__Array_to_C(cSlice []CExtendedState, goSlice []ExtendedState) {
	for i := 0; i < len(goSlice); i++ {
		ExtendedStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
