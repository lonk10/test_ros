// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/attitude_target.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/AttitudeTarget", AttitudeTargetTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/AttitudeTarget", AttitudeTargetTypeSupport)
}
const (
	AttitudeTarget_IGNORE_ROLL_RATE uint8 = 1// body_rate.x
	AttitudeTarget_IGNORE_PITCH_RATE uint8 = 2// body_rate.y
	AttitudeTarget_IGNORE_YAW_RATE uint8 = 4// body_rate.z
	AttitudeTarget_IGNORE_THRUST uint8 = 64
	AttitudeTarget_IGNORE_ATTITUDE uint8 = 128// orientation field
)

type AttitudeTarget struct {
	Header std_msgs_msg.Header `yaml:"header"`
	TypeMask uint8 `yaml:"type_mask"`
	Orientation geometry_msgs_msg.Quaternion `yaml:"orientation"`
	BodyRate geometry_msgs_msg.Vector3 `yaml:"body_rate"`
	Thrust float32 `yaml:"thrust"`
}

// NewAttitudeTarget creates a new AttitudeTarget with default values.
func NewAttitudeTarget() *AttitudeTarget {
	self := AttitudeTarget{}
	self.SetDefaults()
	return &self
}

func (t *AttitudeTarget) Clone() *AttitudeTarget {
	c := &AttitudeTarget{}
	c.Header = *t.Header.Clone()
	c.TypeMask = t.TypeMask
	c.Orientation = *t.Orientation.Clone()
	c.BodyRate = *t.BodyRate.Clone()
	c.Thrust = t.Thrust
	return c
}

func (t *AttitudeTarget) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AttitudeTarget) SetDefaults() {
	t.Header.SetDefaults()
	t.TypeMask = 0
	t.Orientation.SetDefaults()
	t.BodyRate.SetDefaults()
	t.Thrust = 0
}

func (t *AttitudeTarget) GetTypeSupport() types.MessageTypeSupport {
	return AttitudeTargetTypeSupport
}

// AttitudeTargetPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AttitudeTargetPublisher struct {
	*rclgo.Publisher
}

// NewAttitudeTargetPublisher creates and returns a new publisher for the
// AttitudeTarget
func NewAttitudeTargetPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AttitudeTargetPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AttitudeTargetTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AttitudeTargetPublisher{pub}, nil
}

func (p *AttitudeTargetPublisher) Publish(msg *AttitudeTarget) error {
	return p.Publisher.Publish(msg)
}

// AttitudeTargetSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AttitudeTargetSubscription struct {
	*rclgo.Subscription
}

// AttitudeTargetSubscriptionCallback type is used to provide a subscription
// handler function for a AttitudeTargetSubscription.
type AttitudeTargetSubscriptionCallback func(msg *AttitudeTarget, info *rclgo.MessageInfo, err error)

// NewAttitudeTargetSubscription creates and returns a new subscription for the
// AttitudeTarget
func NewAttitudeTargetSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AttitudeTargetSubscriptionCallback) (*AttitudeTargetSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AttitudeTarget
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AttitudeTargetTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AttitudeTargetSubscription{sub}, nil
}

func (s *AttitudeTargetSubscription) TakeMessage(out *AttitudeTarget) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAttitudeTargetSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAttitudeTargetSlice(dst, src []AttitudeTarget) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AttitudeTargetTypeSupport types.MessageTypeSupport = _AttitudeTargetTypeSupport{}

type _AttitudeTargetTypeSupport struct{}

func (t _AttitudeTargetTypeSupport) New() types.Message {
	return NewAttitudeTarget()
}

func (t _AttitudeTargetTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__AttitudeTarget
	return (unsafe.Pointer)(C.mavros_msgs__msg__AttitudeTarget__create())
}

func (t _AttitudeTargetTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__AttitudeTarget__destroy((*C.mavros_msgs__msg__AttitudeTarget)(pointer_to_free))
}

func (t _AttitudeTargetTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AttitudeTarget)
	mem := (*C.mavros_msgs__msg__AttitudeTarget)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.type_mask = C.uint8_t(m.TypeMask)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.orientation), &m.Orientation)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.body_rate), &m.BodyRate)
	mem.thrust = C.float(m.Thrust)
}

func (t _AttitudeTargetTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AttitudeTarget)
	mem := (*C.mavros_msgs__msg__AttitudeTarget)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.TypeMask = uint8(mem.type_mask)
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.Orientation, unsafe.Pointer(&mem.orientation))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.BodyRate, unsafe.Pointer(&mem.body_rate))
	m.Thrust = float32(mem.thrust)
}

func (t _AttitudeTargetTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__AttitudeTarget())
}

type CAttitudeTarget = C.mavros_msgs__msg__AttitudeTarget
type CAttitudeTarget__Sequence = C.mavros_msgs__msg__AttitudeTarget__Sequence

func AttitudeTarget__Sequence_to_Go(goSlice *[]AttitudeTarget, cSlice CAttitudeTarget__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AttitudeTarget, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AttitudeTargetTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AttitudeTarget__Sequence_to_C(cSlice *CAttitudeTarget__Sequence, goSlice []AttitudeTarget) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__AttitudeTarget)(C.malloc(C.sizeof_struct_mavros_msgs__msg__AttitudeTarget * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AttitudeTargetTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AttitudeTarget__Array_to_Go(goSlice []AttitudeTarget, cSlice []CAttitudeTarget) {
	for i := 0; i < len(cSlice); i++ {
		AttitudeTargetTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AttitudeTarget__Array_to_C(cSlice []CAttitudeTarget, goSlice []AttitudeTarget) {
	for i := 0; i < len(goSlice); i++ {
		AttitudeTargetTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
