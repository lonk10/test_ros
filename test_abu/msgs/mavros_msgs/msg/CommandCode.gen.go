// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/command_code.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandCode", CommandCodeTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/CommandCode", CommandCodeTypeSupport)
}
const (
	CommandCode_AIRFRAME_CONFIGURATION uint16 = 2520// [[[cog:import mavros_cogmavros_cog.idl_decl_enum_mav_cmd()]]]MAV_CMD_AIRFRAME
	CommandCode_ARM_AUTHORIZATION_REQUEST uint16 = 3001// Request authorization to arm the vehicle to a external entity, the arm authorizer is responsible to request all data that is needs from the vehicle before authorize or deny the request. If approved the progress of command_ack message should be set with period of time that this authorization is valid in seconds or in case it was denied it should be set with one of the reasons in ARM_AUTH_DENIED_REASON.. MAV_CMD_ARM
	CommandCode_CAMERA_TRACK_POINT uint16 = 2004// If the camera supports point visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking.. MAV_CMD_CAMERA
	CommandCode_CAMERA_TRACK_RECTANGLE uint16 = 2005// If the camera supports rectangle visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking.
	CommandCode_CAMERA_STOP_TRACKING uint16 = 2010// Stops ongoing tracking.
	CommandCode_CAN_FORWARD uint16 = 32000// Request forwarding of CAN packets from the given CAN bus to this interface. CAN Frames are sent using CAN_FRAME and CANFD_FRAME messages. MAV_CMD_CAN
	CommandCode_COMPONENT_ARM_DISARM uint16 = 400// Arms / Disarms a component. MAV_CMD_COMPONENT
	CommandCode_CONDITION_DELAY uint16 = 112// Delay mission state machine.. MAV_CMD_CONDITION
	CommandCode_CONDITION_CHANGE_ALT uint16 = 113// Ascend/descend to target altitude at specified rate. Delay mission state machine until desired altitude reached.
	CommandCode_CONDITION_DISTANCE uint16 = 114// Delay mission state machine until within desired distance of next NAV point.
	CommandCode_CONDITION_YAW uint16 = 115// Reach a certain target angle.
	CommandCode_CONDITION_LAST uint16 = 159// NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration
	CommandCode_CONTROL_HIGH_LATENCY uint16 = 2600// Request to start/stop transmitting over the high latency telemetry. MAV_CMD_CONTROL
	CommandCode_DO_FOLLOW uint16 = 32// Begin following a target. MAV_CMD_DO
	CommandCode_DO_FOLLOW_REPOSITION uint16 = 33// Reposition the MAV after a follow target command has been sent
	CommandCode_DO_SET_MODE uint16 = 176// Set system mode.
	CommandCode_DO_JUMP uint16 = 177// Jump to the desired command in the mission list.  Repeat this action only the specified number of times
	CommandCode_DO_CHANGE_SPEED uint16 = 178// Change speed and/or throttle set points
	CommandCode_DO_SET_HOME uint16 = 179// Changes the home location either to the current location or a specified location.
	CommandCode_DO_SET_PARAMETER uint16 = 180// Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.
	CommandCode_DO_SET_RELAY uint16 = 181// Set a relay to a condition.
	CommandCode_DO_REPEAT_RELAY uint16 = 182// Cycle a relay on and off for a desired number of cycles with a desired period.
	CommandCode_DO_SET_SERVO uint16 = 183// Set a servo to a desired PWM value.
	CommandCode_DO_REPEAT_SERVO uint16 = 184// Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.
	CommandCode_DO_FLIGHTTERMINATION uint16 = 185// Terminate flight immediately
	CommandCode_DO_CHANGE_ALTITUDE uint16 = 186// Change altitude set point.
	CommandCode_DO_LAND_START uint16 = 189// Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude/Altitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence.
	CommandCode_DO_RALLY_LAND uint16 = 190// Mission command to perform a landing from a rally point.
	CommandCode_DO_GO_AROUND uint16 = 191// Mission command to safely abort an autonomous landing.
	CommandCode_DO_REPOSITION uint16 = 192// Reposition the vehicle to a specific WGS84 global position.
	CommandCode_DO_PAUSE_CONTINUE uint16 = 193// If in a GPS controlled position mode, hold the current position or continue.
	CommandCode_DO_SET_REVERSE uint16 = 194// Set moving direction to forward or reverse.
	CommandCode_DO_SET_ROI_LOCATION uint16 = 195// Sets the region of interest (ROI) to a location. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
	CommandCode_DO_SET_ROI_WPNEXT_OFFSET uint16 = 196// Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
	CommandCode_DO_SET_ROI_NONE uint16 = 197// Cancels any previous ROI command returning the vehicle/sensors to default flight characteristics. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
	CommandCode_DO_SET_ROI_SYSID uint16 = 198// Mount tracks system with specified system ID. Determination of target vehicle position may be done with GLOBAL_POSITION_INT or any other means.
	CommandCode_DO_CONTROL_VIDEO uint16 = 200// Control onboard camera system.
	CommandCode_DO_SET_ROI uint16 = 201// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
	CommandCode_DO_DIGICAM_CONFIGURE uint16 = 202// Configure digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
	CommandCode_DO_DIGICAM_CONTROL uint16 = 203// Control digital camera. This is a fallback message for systems that have not yet implemented PARAM_EXT_XXX messages and camera definition files (see https://mavlink.io/en/services/camera_def.html ).
	CommandCode_DO_MOUNT_CONFIGURE uint16 = 204// Mission command to configure a camera or antenna mount
	CommandCode_DO_MOUNT_CONTROL uint16 = 205// Mission command to control a camera or antenna mount
	CommandCode_DO_SET_CAM_TRIGG_DIST uint16 = 206// Mission command to set camera trigger distance for this flight. The camera is triggered each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera.
	CommandCode_DO_FENCE_ENABLE uint16 = 207// Mission command to enable the geofence
	CommandCode_DO_PARACHUTE uint16 = 208// Mission item/command to release a parachute or enable/disable auto release.
	CommandCode_DO_MOTOR_TEST uint16 = 209// Mission command to perform motor test.
	CommandCode_DO_INVERTED_FLIGHT uint16 = 210// Change to/from inverted flight.
	CommandCode_DO_GRIPPER uint16 = 211// Mission command to operate a gripper.
	CommandCode_DO_AUTOTUNE_ENABLE uint16 = 212// Enable/disable autotune.
	CommandCode_DO_SET_CAM_TRIGG_INTERVAL uint16 = 214// Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera.
	CommandCode_DO_MOUNT_CONTROL_QUAT uint16 = 220// Mission command to control a camera or antenna mount, using a quaternion as reference.
	CommandCode_DO_GUIDED_MASTER uint16 = 221// set id of master controller
	CommandCode_DO_GUIDED_LIMITS uint16 = 222// Set limits for external control
	CommandCode_DO_ENGINE_CONTROL uint16 = 223// Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines
	CommandCode_DO_SET_MISSION_CURRENT uint16 = 224// Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).
	CommandCode_DO_LAST uint16 = 240// NOP - This command is only used to mark the upper limit of the DO commands in the enumeration
	CommandCode_DO_JUMP_TAG uint16 = 601// Jump to the matching tag in the mission list. Repeat this action for the specified number of times. A mission should contain a single matching tag for each jump. If this is not the case then a jump to a missing tag should complete the mission, and a jump where there are multiple matching tags should always select the one with the lowest mission sequence number.
	CommandCode_DO_GIMBAL_MANAGER_PITCHYAW uint16 = 1000// Set gimbal manager pitch/yaw setpoints (low rate command). It is possible to set combinations of the values below. E.g. an angle as well as a desired angular rate can be used to get to this angle at a certain angular rate, or an angular rate only will result in continuous turning. NaN is to be used to signal unset. Note: only the gimbal manager will react to this command - it will be ignored by a gimbal device. Use GIMBAL_MANAGER_SET_PITCHYAW if you need to stream pitch/yaw setpoints at higher rate.
	CommandCode_DO_GIMBAL_MANAGER_CONFIGURE uint16 = 1001// Gimbal configuration to set which sysid/compid is in primary and secondary control.
	CommandCode_DO_TRIGGER_CONTROL uint16 = 2003// Enable or disable on-board camera triggering system.
	CommandCode_DO_VTOL_TRANSITION uint16 = 3000// Request VTOL transition
	CommandCode_DO_ADSB_OUT_IDENT uint16 = 10001// Trigger the start of an ADSB-out IDENT. This should only be used when requested to do so by an Air Traffic Controller in controlled airspace. This starts the IDENT which is then typically held for 18 seconds by the hardware per the Mode A, C, and S transponder spec.
	CommandCode_DO_WINCH uint16 = 42600// Command to operate winch.
	CommandCode_FIXED_MAG_CAL_YAW uint16 = 42006// Magnetometer calibration based on provided known yaw. This allows for fast calibration using WMM field tables in the vehicle, given only the known yaw of the vehicle. If Latitude and longitude are both zero then use the current vehicle location.. MAV_CMD_FIXED
	CommandCode_GET_HOME_POSITION uint16 = 410// Request the home position from the vehicle.. MAV_CMD_GET
	CommandCode_GET_MESSAGE_INTERVAL uint16 = 510// Request the interval between messages for a particular MAVLink message ID. The receiver should ACK the command and then emit its response in a MESSAGE_INTERVAL message.
	CommandCode_IMAGE_START_CAPTURE uint16 = 2000// Start image capture sequence. CAMERA_IMAGE_CAPTURED must be emitted after each capture. Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID. It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID). It is also needed to specify the target camera in missions. When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero). If the param1 is 0 the autopilot should do both. When sent in a command the target MAVLink address is set using target_component. If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist). If addressed to a MAVLink camera, param 1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED. If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.. MAV_CMD_IMAGE
	CommandCode_IMAGE_STOP_CAPTURE uint16 = 2001// Stop image capture sequence. Param1 (id) may be used to specify the target camera: 0: all cameras, 1 to 6: autopilot-connected cameras, 7-255: MAVLink camera component ID. It is needed in order to target specific cameras connected to the autopilot, or specific sensors in a multi-sensor camera (neither of which have a distinct MAVLink component ID). It is also needed to specify the target camera in missions. When used in a mission, an autopilot should execute the MAV_CMD for a specified local camera (param1 = 1-6), or resend it as a command if it is intended for a MAVLink camera (param1 = 7 - 255), setting the command's target_component as the param1 value (and setting param1 in the command to zero). If the param1 is 0 the autopilot should do both. When sent in a command the target MAVLink address is set using target_component. If addressed specifically to an autopilot: param1 should be used in the same way as it is for missions (though command should NACK with MAV_RESULT_DENIED if a specified local camera does not exist). If addressed to a MAVLink camera, param1 can be used to address all cameras (0), or to separately address 1 to 7 individual sensors. Other values should be NACKed with MAV_RESULT_DENIED. If the command is broadcast (target_component is 0) then param 1 should be set to 0 (any other value should be NACKED with MAV_RESULT_DENIED). An autopilot would trigger any local cameras and forward the command to all channels.
	CommandCode_JUMP_TAG uint16 = 600// Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG.. MAV_CMD_JUMP
	CommandCode_LOGGING_START uint16 = 2510// Request to start streaming logging data over MAVLink (see also LOGGING_DATA message). MAV_CMD_LOGGING
	CommandCode_LOGGING_STOP uint16 = 2511// Request to stop streaming log data over MAVLink
	CommandCode_MISSION_START uint16 = 300// start running a mission. MAV_CMD_MISSION
	CommandCode_NAV_WAYPOINT uint16 = 16// Navigate to waypoint.. MAV_CMD_NAV
	CommandCode_NAV_LOITER_UNLIM uint16 = 17// Loiter around this waypoint an unlimited amount of time
	CommandCode_NAV_LOITER_TURNS uint16 = 18// Loiter around this waypoint for X turns
	CommandCode_NAV_LOITER_TIME uint16 = 19// Loiter around this waypoint for X seconds
	CommandCode_NAV_RETURN_TO_LAUNCH uint16 = 20// Return to launch location
	CommandCode_NAV_LAND uint16 = 21// Land at location.
	CommandCode_NAV_TAKEOFF uint16 = 22// Takeoff from ground / hand. Vehicles that support multiple takeoff modes (e.g. VTOL quadplane) should take off using the currently configured mode.
	CommandCode_NAV_LAND_LOCAL uint16 = 23// Land at local position (local frame only)
	CommandCode_NAV_TAKEOFF_LOCAL uint16 = 24// Takeoff from local position (local frame only)
	CommandCode_NAV_FOLLOW uint16 = 25// Vehicle following, i.e. this waypoint represents the position of a moving vehicle
	CommandCode_NAV_CONTINUE_AND_CHANGE_ALT uint16 = 30// Continue on the current course and climb/descend to specified altitude.  When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached.
	CommandCode_NAV_LOITER_TO_ALT uint16 = 31// Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then loiter at the current position.  Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint.
	CommandCode_NAV_ROI uint16 = 80// Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicle's control system to control the vehicle attitude and the attitude of various sensors such as cameras.
	CommandCode_NAV_PATHPLANNING uint16 = 81// Control autonomous path planning on the MAV.
	CommandCode_NAV_SPLINE_WAYPOINT uint16 = 82// Navigate to waypoint using a spline path.
	CommandCode_NAV_VTOL_TAKEOFF uint16 = 84// Takeoff from ground using VTOL mode, and transition to forward flight with specified heading. The command should be ignored by vehicles that dont support both VTOL and fixed-wing flight (multicopters, boats,etc.).
	CommandCode_NAV_VTOL_LAND uint16 = 85// Land using VTOL mode
	CommandCode_NAV_GUIDED_ENABLE uint16 = 92// hand control over to an external controller
	CommandCode_NAV_DELAY uint16 = 93// Delay the next navigation command a number of seconds or until a specified time
	CommandCode_NAV_PAYLOAD_PLACE uint16 = 94// Descend and place payload. Vehicle moves to specified location, descends until it detects a hanging payload has reached the ground, and then releases the payload. If ground is not detected before the reaching the maximum descent value (param1), the command will complete without releasing the payload.
	CommandCode_NAV_LAST uint16 = 95// NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration
	CommandCode_NAV_SET_YAW_SPEED uint16 = 213// Sets a desired vehicle turn angle and speed change.
	CommandCode_NAV_FENCE_RETURN_POINT uint16 = 5000// Fence return point (there can only be one such point in a geofence definition). If rally points are supported they should be used instead.
	CommandCode_NAV_FENCE_POLYGON_VERTEX_INCLUSION uint16 = 5001// Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required.
	CommandCode_NAV_FENCE_POLYGON_VERTEX_EXCLUSION uint16 = 5002// Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required.
	CommandCode_NAV_FENCE_CIRCLE_INCLUSION uint16 = 5003// Circular fence area. The vehicle must stay inside this area.
	CommandCode_NAV_FENCE_CIRCLE_EXCLUSION uint16 = 5004// Circular fence area. The vehicle must stay outside this area.
	CommandCode_NAV_RALLY_POINT uint16 = 5100// Rally point. You can have multiple rally points defined.
	CommandCode_OBLIQUE_SURVEY uint16 = 260// Mission command to set a Camera Auto Mount Pivoting Oblique Survey (Replaces CAM_TRIGG_DIST for this purpose). The camera is triggered each time this distance is exceeded, then the mount moves to the next position. Params 4~6 set-up the angle limits and number of positions for oblique survey, where mount-enabled vehicles automatically roll the camera between shots to emulate an oblique camera setup (providing an increased HFOV). This command can also be used to set the shutter integration time for the camera.. MAV_CMD_OBLIQUE
	CommandCode_OVERRIDE_GOTO uint16 = 252// Override current mission with command to pause mission, pause mission and move to position, continue/resume mission. When param 1 indicates that the mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in place or moves to another position.. MAV_CMD_OVERRIDE
	CommandCode_PANORAMA_CREATE uint16 = 2800// Create a panorama at the current position. MAV_CMD_PANORAMA
	CommandCode_PAYLOAD_PREPARE_DEPLOY uint16 = 30001// Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity.. MAV_CMD_PAYLOAD
	CommandCode_PAYLOAD_CONTROL_DEPLOY uint16 = 30002// Control the payload deployment.
	CommandCode_PREFLIGHT_CALIBRATION uint16 = 241// Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero.. MAV_CMD_PREFLIGHT
	CommandCode_PREFLIGHT_SET_SENSOR_OFFSETS uint16 = 242// Set sensor offsets. This command will be only accepted if in pre-flight mode.
	CommandCode_PREFLIGHT_UAVCAN uint16 = 243// Trigger UAVCAN configuration (actuator ID assignment and direction mapping). Note that this maps to the legacy UAVCAN v0 function UAVCAN_ENUMERATE, which is intended to be executed just once during initial vehicle configuration (it is not a normal pre-flight command and has been poorly named).
	CommandCode_PREFLIGHT_STORAGE uint16 = 245// Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.
	CommandCode_PREFLIGHT_REBOOT_SHUTDOWN uint16 = 246// Request the reboot or shutdown of system components.
	CommandCode_REQUEST_MESSAGE uint16 = 512// Request the target system(s) emit a single instance of a specified message (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL).. MAV_CMD_REQUEST
	CommandCode_REQUEST_PROTOCOL_VERSION uint16 = 519// Request MAVLink protocol version compatibility. All receivers should ACK the command and then emit their capabilities in an PROTOCOL_VERSION message
	CommandCode_REQUEST_AUTOPILOT_CAPABILITIES uint16 = 520// Request autopilot capabilities. The receiver should ACK the command and then emit its capabilities in an AUTOPILOT_VERSION message
	CommandCode_REQUEST_CAMERA_INFORMATION uint16 = 521// Request camera information (CAMERA_INFORMATION).
	CommandCode_REQUEST_CAMERA_SETTINGS uint16 = 522// Request camera settings (CAMERA_SETTINGS).
	CommandCode_REQUEST_STORAGE_INFORMATION uint16 = 525// Request storage information (STORAGE_INFORMATION). Use the command's target_component to target a specific component's storage.
	CommandCode_REQUEST_CAMERA_CAPTURE_STATUS uint16 = 527// Request camera capture status (CAMERA_CAPTURE_STATUS)
	CommandCode_REQUEST_FLIGHT_INFORMATION uint16 = 528// Request flight information (FLIGHT_INFORMATION)
	CommandCode_REQUEST_VIDEO_STREAM_INFORMATION uint16 = 2504// Request video stream information (VIDEO_STREAM_INFORMATION)
	CommandCode_REQUEST_VIDEO_STREAM_STATUS uint16 = 2505// Request video stream status (VIDEO_STREAM_STATUS)
	CommandCode_RESET_CAMERA_SETTINGS uint16 = 529// Reset all camera settings to Factory Default. MAV_CMD_RESET
	CommandCode_RUN_PREARM_CHECKS uint16 = 401// Instructs system to run pre-arm checks.  This command should return MAV_RESULT_TEMPORARILY_REJECTED in the case the system is armed, otherwse MAV_RESULT_ACCEPTED.  Note that the return value from executing this command does not indicate whether the vehicle is armable or not, just whether the system has successfully run/is currently running the checks.  The result of the checks is reflected in the SYS_STATUS message.. MAV_CMD_RUN
	CommandCode_SET_MESSAGE_INTERVAL uint16 = 511// Set the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM.. MAV_CMD_SET
	CommandCode_SET_CAMERA_MODE uint16 = 530// Set camera running mode. Use NaN for reserved values. GCS will send a MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the camera supports video streaming.
	CommandCode_SET_CAMERA_ZOOM uint16 = 531// Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on success).
	CommandCode_SET_CAMERA_FOCUS uint16 = 532// Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on success).
	CommandCode_SET_GUIDED_SUBMODE_STANDARD uint16 = 4000// This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocities along all three axes.
	CommandCode_SET_GUIDED_SUBMODE_CIRCLE uint16 = 4001// This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position.
	CommandCode_START_RX_PAIR uint16 = 500// Starts receiver pairing.. MAV_CMD_START
	CommandCode_STORAGE_FORMAT uint16 = 526// Format a storage medium. Once format is complete, a STORAGE_INFORMATION message is sent. Use the command's target_component to target a specific component's storage.. MAV_CMD_STORAGE
	CommandCode_UAVCAN_GET_NODE_INFO uint16 = 5200// Commands the vehicle to respond with a sequence of messages UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note that some of the response messages can be lost, which the receiver can detect easily by checking whether every received UAVCAN_NODE_STATUS has a matching message UAVCAN_NODE_INFO received earlier; if not, this command should be sent again in order to request re-transmission of the node information messages.. MAV_CMD_UAVCAN
	CommandCode_VIDEO_START_CAPTURE uint16 = 2500// Starts video capture (recording).. MAV_CMD_VIDEO
	CommandCode_VIDEO_STOP_CAPTURE uint16 = 2501// Stop the current video capture (recording).
	CommandCode_VIDEO_START_STREAMING uint16 = 2502// Start video streaming
	CommandCode_VIDEO_STOP_STREAMING uint16 = 2503// Stop the given video stream
)

type CommandCode struct {
}

// NewCommandCode creates a new CommandCode with default values.
func NewCommandCode() *CommandCode {
	self := CommandCode{}
	self.SetDefaults()
	return &self
}

func (t *CommandCode) Clone() *CommandCode {
	c := &CommandCode{}
	return c
}

func (t *CommandCode) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandCode) SetDefaults() {
}

func (t *CommandCode) GetTypeSupport() types.MessageTypeSupport {
	return CommandCodeTypeSupport
}

// CommandCodePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandCodePublisher struct {
	*rclgo.Publisher
}

// NewCommandCodePublisher creates and returns a new publisher for the
// CommandCode
func NewCommandCodePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandCodePublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandCodeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandCodePublisher{pub}, nil
}

func (p *CommandCodePublisher) Publish(msg *CommandCode) error {
	return p.Publisher.Publish(msg)
}

// CommandCodeSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandCodeSubscription struct {
	*rclgo.Subscription
}

// CommandCodeSubscriptionCallback type is used to provide a subscription
// handler function for a CommandCodeSubscription.
type CommandCodeSubscriptionCallback func(msg *CommandCode, info *rclgo.MessageInfo, err error)

// NewCommandCodeSubscription creates and returns a new subscription for the
// CommandCode
func NewCommandCodeSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandCodeSubscriptionCallback) (*CommandCodeSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandCode
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandCodeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandCodeSubscription{sub}, nil
}

func (s *CommandCodeSubscription) TakeMessage(out *CommandCode) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandCodeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandCodeSlice(dst, src []CommandCode) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandCodeTypeSupport types.MessageTypeSupport = _CommandCodeTypeSupport{}

type _CommandCodeTypeSupport struct{}

func (t _CommandCodeTypeSupport) New() types.Message {
	return NewCommandCode()
}

func (t _CommandCodeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__CommandCode
	return (unsafe.Pointer)(C.mavros_msgs__msg__CommandCode__create())
}

func (t _CommandCodeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__CommandCode__destroy((*C.mavros_msgs__msg__CommandCode)(pointer_to_free))
}

func (t _CommandCodeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _CommandCodeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _CommandCodeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__CommandCode())
}

type CCommandCode = C.mavros_msgs__msg__CommandCode
type CCommandCode__Sequence = C.mavros_msgs__msg__CommandCode__Sequence

func CommandCode__Sequence_to_Go(goSlice *[]CommandCode, cSlice CCommandCode__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandCode, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandCodeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandCode__Sequence_to_C(cSlice *CCommandCode__Sequence, goSlice []CommandCode) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__CommandCode)(C.malloc(C.sizeof_struct_mavros_msgs__msg__CommandCode * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandCodeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandCode__Array_to_Go(goSlice []CommandCode, cSlice []CCommandCode) {
	for i := 0; i < len(cSlice); i++ {
		CommandCodeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandCode__Array_to_C(cSlice []CCommandCode, goSlice []CommandCode) {
	for i := 0; i < len(goSlice); i++ {
		CommandCodeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
