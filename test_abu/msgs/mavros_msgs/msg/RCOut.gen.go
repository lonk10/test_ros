// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/rc_out.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/RCOut", RCOutTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/RCOut", RCOutTypeSupport)
}

type RCOut struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Channels []uint16 `yaml:"channels"`
}

// NewRCOut creates a new RCOut with default values.
func NewRCOut() *RCOut {
	self := RCOut{}
	self.SetDefaults()
	return &self
}

func (t *RCOut) Clone() *RCOut {
	c := &RCOut{}
	c.Header = *t.Header.Clone()
	if t.Channels != nil {
		c.Channels = make([]uint16, len(t.Channels))
		copy(c.Channels, t.Channels)
	}
	return c
}

func (t *RCOut) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RCOut) SetDefaults() {
	t.Header.SetDefaults()
	t.Channels = nil
}

func (t *RCOut) GetTypeSupport() types.MessageTypeSupport {
	return RCOutTypeSupport
}

// RCOutPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RCOutPublisher struct {
	*rclgo.Publisher
}

// NewRCOutPublisher creates and returns a new publisher for the
// RCOut
func NewRCOutPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RCOutPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RCOutTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RCOutPublisher{pub}, nil
}

func (p *RCOutPublisher) Publish(msg *RCOut) error {
	return p.Publisher.Publish(msg)
}

// RCOutSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RCOutSubscription struct {
	*rclgo.Subscription
}

// RCOutSubscriptionCallback type is used to provide a subscription
// handler function for a RCOutSubscription.
type RCOutSubscriptionCallback func(msg *RCOut, info *rclgo.MessageInfo, err error)

// NewRCOutSubscription creates and returns a new subscription for the
// RCOut
func NewRCOutSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RCOutSubscriptionCallback) (*RCOutSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RCOut
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RCOutTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RCOutSubscription{sub}, nil
}

func (s *RCOutSubscription) TakeMessage(out *RCOut) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRCOutSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRCOutSlice(dst, src []RCOut) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RCOutTypeSupport types.MessageTypeSupport = _RCOutTypeSupport{}

type _RCOutTypeSupport struct{}

func (t _RCOutTypeSupport) New() types.Message {
	return NewRCOut()
}

func (t _RCOutTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__RCOut
	return (unsafe.Pointer)(C.mavros_msgs__msg__RCOut__create())
}

func (t _RCOutTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__RCOut__destroy((*C.mavros_msgs__msg__RCOut)(pointer_to_free))
}

func (t _RCOutTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RCOut)
	mem := (*C.mavros_msgs__msg__RCOut)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Uint16__Sequence_to_C((*primitives.CUint16__Sequence)(unsafe.Pointer(&mem.channels)), m.Channels)
}

func (t _RCOutTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RCOut)
	mem := (*C.mavros_msgs__msg__RCOut)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Uint16__Sequence_to_Go(&m.Channels, *(*primitives.CUint16__Sequence)(unsafe.Pointer(&mem.channels)))
}

func (t _RCOutTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__RCOut())
}

type CRCOut = C.mavros_msgs__msg__RCOut
type CRCOut__Sequence = C.mavros_msgs__msg__RCOut__Sequence

func RCOut__Sequence_to_Go(goSlice *[]RCOut, cSlice CRCOut__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RCOut, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RCOutTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RCOut__Sequence_to_C(cSlice *CRCOut__Sequence, goSlice []RCOut) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__RCOut)(C.malloc(C.sizeof_struct_mavros_msgs__msg__RCOut * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RCOutTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RCOut__Array_to_Go(goSlice []RCOut, cSlice []CRCOut) {
	for i := 0; i < len(cSlice); i++ {
		RCOutTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RCOut__Array_to_C(cSlice []CRCOut, goSlice []RCOut) {
	for i := 0; i < len(goSlice); i++ {
		RCOutTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
