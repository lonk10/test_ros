// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/esc_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ESCInfo", ESCInfoTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ESCInfo", ESCInfoTypeSupport)
}

type ESCInfo struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Counter uint16 `yaml:"counter"`
	Count uint8 `yaml:"count"`
	ConnectionType uint8 `yaml:"connection_type"`
	Info uint8 `yaml:"info"`
	EscInfo []ESCInfoItem `yaml:"esc_info"`
}

// NewESCInfo creates a new ESCInfo with default values.
func NewESCInfo() *ESCInfo {
	self := ESCInfo{}
	self.SetDefaults()
	return &self
}

func (t *ESCInfo) Clone() *ESCInfo {
	c := &ESCInfo{}
	c.Header = *t.Header.Clone()
	c.Counter = t.Counter
	c.Count = t.Count
	c.ConnectionType = t.ConnectionType
	c.Info = t.Info
	if t.EscInfo != nil {
		c.EscInfo = make([]ESCInfoItem, len(t.EscInfo))
		CloneESCInfoItemSlice(c.EscInfo, t.EscInfo)
	}
	return c
}

func (t *ESCInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ESCInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.Counter = 0
	t.Count = 0
	t.ConnectionType = 0
	t.Info = 0
	t.EscInfo = nil
}

func (t *ESCInfo) GetTypeSupport() types.MessageTypeSupport {
	return ESCInfoTypeSupport
}

// ESCInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ESCInfoPublisher struct {
	*rclgo.Publisher
}

// NewESCInfoPublisher creates and returns a new publisher for the
// ESCInfo
func NewESCInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ESCInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ESCInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ESCInfoPublisher{pub}, nil
}

func (p *ESCInfoPublisher) Publish(msg *ESCInfo) error {
	return p.Publisher.Publish(msg)
}

// ESCInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ESCInfoSubscription struct {
	*rclgo.Subscription
}

// ESCInfoSubscriptionCallback type is used to provide a subscription
// handler function for a ESCInfoSubscription.
type ESCInfoSubscriptionCallback func(msg *ESCInfo, info *rclgo.MessageInfo, err error)

// NewESCInfoSubscription creates and returns a new subscription for the
// ESCInfo
func NewESCInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ESCInfoSubscriptionCallback) (*ESCInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ESCInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ESCInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ESCInfoSubscription{sub}, nil
}

func (s *ESCInfoSubscription) TakeMessage(out *ESCInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneESCInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneESCInfoSlice(dst, src []ESCInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ESCInfoTypeSupport types.MessageTypeSupport = _ESCInfoTypeSupport{}

type _ESCInfoTypeSupport struct{}

func (t _ESCInfoTypeSupport) New() types.Message {
	return NewESCInfo()
}

func (t _ESCInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ESCInfo
	return (unsafe.Pointer)(C.mavros_msgs__msg__ESCInfo__create())
}

func (t _ESCInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ESCInfo__destroy((*C.mavros_msgs__msg__ESCInfo)(pointer_to_free))
}

func (t _ESCInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ESCInfo)
	mem := (*C.mavros_msgs__msg__ESCInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.counter = C.uint16_t(m.Counter)
	mem.count = C.uint8_t(m.Count)
	mem.connection_type = C.uint8_t(m.ConnectionType)
	mem.info = C.uint8_t(m.Info)
	ESCInfoItem__Sequence_to_C(&mem.esc_info, m.EscInfo)
}

func (t _ESCInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ESCInfo)
	mem := (*C.mavros_msgs__msg__ESCInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Counter = uint16(mem.counter)
	m.Count = uint8(mem.count)
	m.ConnectionType = uint8(mem.connection_type)
	m.Info = uint8(mem.info)
	ESCInfoItem__Sequence_to_Go(&m.EscInfo, mem.esc_info)
}

func (t _ESCInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ESCInfo())
}

type CESCInfo = C.mavros_msgs__msg__ESCInfo
type CESCInfo__Sequence = C.mavros_msgs__msg__ESCInfo__Sequence

func ESCInfo__Sequence_to_Go(goSlice *[]ESCInfo, cSlice CESCInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ESCInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ESCInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ESCInfo__Sequence_to_C(cSlice *CESCInfo__Sequence, goSlice []ESCInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ESCInfo)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ESCInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ESCInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ESCInfo__Array_to_Go(goSlice []ESCInfo, cSlice []CESCInfo) {
	for i := 0; i < len(cSlice); i++ {
		ESCInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ESCInfo__Array_to_C(cSlice []CESCInfo, goSlice []ESCInfo) {
	for i := 0; i < len(goSlice); i++ {
		ESCInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
