// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/esc_status_item.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ESCStatusItem", ESCStatusItemTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ESCStatusItem", ESCStatusItemTypeSupport)
}

type ESCStatusItem struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Rpm int32 `yaml:"rpm"`
	Voltage float32 `yaml:"voltage"`
	Current float32 `yaml:"current"`
}

// NewESCStatusItem creates a new ESCStatusItem with default values.
func NewESCStatusItem() *ESCStatusItem {
	self := ESCStatusItem{}
	self.SetDefaults()
	return &self
}

func (t *ESCStatusItem) Clone() *ESCStatusItem {
	c := &ESCStatusItem{}
	c.Header = *t.Header.Clone()
	c.Rpm = t.Rpm
	c.Voltage = t.Voltage
	c.Current = t.Current
	return c
}

func (t *ESCStatusItem) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ESCStatusItem) SetDefaults() {
	t.Header.SetDefaults()
	t.Rpm = 0
	t.Voltage = 0
	t.Current = 0
}

func (t *ESCStatusItem) GetTypeSupport() types.MessageTypeSupport {
	return ESCStatusItemTypeSupport
}

// ESCStatusItemPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ESCStatusItemPublisher struct {
	*rclgo.Publisher
}

// NewESCStatusItemPublisher creates and returns a new publisher for the
// ESCStatusItem
func NewESCStatusItemPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ESCStatusItemPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ESCStatusItemTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ESCStatusItemPublisher{pub}, nil
}

func (p *ESCStatusItemPublisher) Publish(msg *ESCStatusItem) error {
	return p.Publisher.Publish(msg)
}

// ESCStatusItemSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ESCStatusItemSubscription struct {
	*rclgo.Subscription
}

// ESCStatusItemSubscriptionCallback type is used to provide a subscription
// handler function for a ESCStatusItemSubscription.
type ESCStatusItemSubscriptionCallback func(msg *ESCStatusItem, info *rclgo.MessageInfo, err error)

// NewESCStatusItemSubscription creates and returns a new subscription for the
// ESCStatusItem
func NewESCStatusItemSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ESCStatusItemSubscriptionCallback) (*ESCStatusItemSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ESCStatusItem
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ESCStatusItemTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ESCStatusItemSubscription{sub}, nil
}

func (s *ESCStatusItemSubscription) TakeMessage(out *ESCStatusItem) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneESCStatusItemSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneESCStatusItemSlice(dst, src []ESCStatusItem) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ESCStatusItemTypeSupport types.MessageTypeSupport = _ESCStatusItemTypeSupport{}

type _ESCStatusItemTypeSupport struct{}

func (t _ESCStatusItemTypeSupport) New() types.Message {
	return NewESCStatusItem()
}

func (t _ESCStatusItemTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ESCStatusItem
	return (unsafe.Pointer)(C.mavros_msgs__msg__ESCStatusItem__create())
}

func (t _ESCStatusItemTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ESCStatusItem__destroy((*C.mavros_msgs__msg__ESCStatusItem)(pointer_to_free))
}

func (t _ESCStatusItemTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ESCStatusItem)
	mem := (*C.mavros_msgs__msg__ESCStatusItem)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.rpm = C.int32_t(m.Rpm)
	mem.voltage = C.float(m.Voltage)
	mem.current = C.float(m.Current)
}

func (t _ESCStatusItemTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ESCStatusItem)
	mem := (*C.mavros_msgs__msg__ESCStatusItem)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Rpm = int32(mem.rpm)
	m.Voltage = float32(mem.voltage)
	m.Current = float32(mem.current)
}

func (t _ESCStatusItemTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ESCStatusItem())
}

type CESCStatusItem = C.mavros_msgs__msg__ESCStatusItem
type CESCStatusItem__Sequence = C.mavros_msgs__msg__ESCStatusItem__Sequence

func ESCStatusItem__Sequence_to_Go(goSlice *[]ESCStatusItem, cSlice CESCStatusItem__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ESCStatusItem, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ESCStatusItemTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ESCStatusItem__Sequence_to_C(cSlice *CESCStatusItem__Sequence, goSlice []ESCStatusItem) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ESCStatusItem)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ESCStatusItem * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ESCStatusItemTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ESCStatusItem__Array_to_Go(goSlice []ESCStatusItem, cSlice []CESCStatusItem) {
	for i := 0; i < len(cSlice); i++ {
		ESCStatusItemTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ESCStatusItem__Array_to_C(cSlice []CESCStatusItem, goSlice []ESCStatusItem) {
	for i := 0; i < len(goSlice); i++ {
		ESCStatusItemTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
