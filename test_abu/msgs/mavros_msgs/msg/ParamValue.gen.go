// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/param_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ParamValue", ParamValueTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ParamValue", ParamValueTypeSupport)
}

type ParamValue struct {
	Integer int64 `yaml:"integer"`
	Real float64 `yaml:"real"`
}

// NewParamValue creates a new ParamValue with default values.
func NewParamValue() *ParamValue {
	self := ParamValue{}
	self.SetDefaults()
	return &self
}

func (t *ParamValue) Clone() *ParamValue {
	c := &ParamValue{}
	c.Integer = t.Integer
	c.Real = t.Real
	return c
}

func (t *ParamValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamValue) SetDefaults() {
	t.Integer = 0
	t.Real = 0
}

func (t *ParamValue) GetTypeSupport() types.MessageTypeSupport {
	return ParamValueTypeSupport
}

// ParamValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamValuePublisher struct {
	*rclgo.Publisher
}

// NewParamValuePublisher creates and returns a new publisher for the
// ParamValue
func NewParamValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamValuePublisher{pub}, nil
}

func (p *ParamValuePublisher) Publish(msg *ParamValue) error {
	return p.Publisher.Publish(msg)
}

// ParamValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamValueSubscription struct {
	*rclgo.Subscription
}

// ParamValueSubscriptionCallback type is used to provide a subscription
// handler function for a ParamValueSubscription.
type ParamValueSubscriptionCallback func(msg *ParamValue, info *rclgo.MessageInfo, err error)

// NewParamValueSubscription creates and returns a new subscription for the
// ParamValue
func NewParamValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamValueSubscriptionCallback) (*ParamValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamValueSubscription{sub}, nil
}

func (s *ParamValueSubscription) TakeMessage(out *ParamValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamValueSlice(dst, src []ParamValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamValueTypeSupport types.MessageTypeSupport = _ParamValueTypeSupport{}

type _ParamValueTypeSupport struct{}

func (t _ParamValueTypeSupport) New() types.Message {
	return NewParamValue()
}

func (t _ParamValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ParamValue
	return (unsafe.Pointer)(C.mavros_msgs__msg__ParamValue__create())
}

func (t _ParamValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ParamValue__destroy((*C.mavros_msgs__msg__ParamValue)(pointer_to_free))
}

func (t _ParamValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamValue)
	mem := (*C.mavros_msgs__msg__ParamValue)(dst)
	mem.integer = C.int64_t(m.Integer)
	mem.real = C.double(m.Real)
}

func (t _ParamValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamValue)
	mem := (*C.mavros_msgs__msg__ParamValue)(ros2_message_buffer)
	m.Integer = int64(mem.integer)
	m.Real = float64(mem.real)
}

func (t _ParamValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ParamValue())
}

type CParamValue = C.mavros_msgs__msg__ParamValue
type CParamValue__Sequence = C.mavros_msgs__msg__ParamValue__Sequence

func ParamValue__Sequence_to_Go(goSlice *[]ParamValue, cSlice CParamValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamValue__Sequence_to_C(cSlice *CParamValue__Sequence, goSlice []ParamValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ParamValue)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ParamValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamValue__Array_to_Go(goSlice []ParamValue, cSlice []CParamValue) {
	for i := 0; i < len(cSlice); i++ {
		ParamValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamValue__Array_to_C(cSlice []CParamValue, goSlice []ParamValue) {
	for i := 0; i < len(goSlice); i++ {
		ParamValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
