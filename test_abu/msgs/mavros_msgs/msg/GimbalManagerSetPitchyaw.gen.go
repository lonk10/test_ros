// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/gimbal_manager_set_pitchyaw.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerSetPitchyaw", GimbalManagerSetPitchyawTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/GimbalManagerSetPitchyaw", GimbalManagerSetPitchyawTypeSupport)
}
const (
	GimbalManagerSetPitchyaw_GIMBAL_MANAGER_FLAGS_RETRACT uint32 = 1// Based on GIMBAL_DEVICE_FLAGS_RETRACT. GIMBAL_MANAGER_FLAGS
	GimbalManagerSetPitchyaw_GIMBAL_MANAGER_FLAGS_NEUTRAL uint32 = 2// Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
	GimbalManagerSetPitchyaw_GIMBAL_MANAGER_FLAGS_ROLL_LOCK uint32 = 4// Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
	GimbalManagerSetPitchyaw_GIMBAL_MANAGER_FLAGS_PITCH_LOCK uint32 = 8// Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
	GimbalManagerSetPitchyaw_GIMBAL_MANAGER_FLAGS_YAW_LOCK uint32 = 16// Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
)

type GimbalManagerSetPitchyaw struct {
	TargetSystem uint8 `yaml:"target_system"`// System ID
	TargetComponent uint8 `yaml:"target_component"`// Component ID
	Flags uint32 `yaml:"flags"`// High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS
	GimbalDeviceId uint8 `yaml:"gimbal_device_id"`// Component ID of gimbal device to address
	Pitch float32 `yaml:"pitch"`// Pitch angle (positive: up, negative: down, NaN to be ignored).
	Yaw float32 `yaml:"yaw"`// Yaw angle (positive: to the right, negative: to the left, NaN to be ignored).
	PitchRate float32 `yaml:"pitch_rate"`// Pitch angular rate (positive: up, negative: down, NaN to be ignored).
	YawRate float32 `yaml:"yaw_rate"`// Yaw angular rate (positive: to the right, negative: to the left, NaN to be ignored).
}

// NewGimbalManagerSetPitchyaw creates a new GimbalManagerSetPitchyaw with default values.
func NewGimbalManagerSetPitchyaw() *GimbalManagerSetPitchyaw {
	self := GimbalManagerSetPitchyaw{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerSetPitchyaw) Clone() *GimbalManagerSetPitchyaw {
	c := &GimbalManagerSetPitchyaw{}
	c.TargetSystem = t.TargetSystem
	c.TargetComponent = t.TargetComponent
	c.Flags = t.Flags
	c.GimbalDeviceId = t.GimbalDeviceId
	c.Pitch = t.Pitch
	c.Yaw = t.Yaw
	c.PitchRate = t.PitchRate
	c.YawRate = t.YawRate
	return c
}

func (t *GimbalManagerSetPitchyaw) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerSetPitchyaw) SetDefaults() {
	t.TargetSystem = 0
	t.TargetComponent = 0
	t.Flags = 0
	t.GimbalDeviceId = 0
	t.Pitch = 0
	t.Yaw = 0
	t.PitchRate = 0
	t.YawRate = 0
}

func (t *GimbalManagerSetPitchyaw) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerSetPitchyawTypeSupport
}

// GimbalManagerSetPitchyawPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerSetPitchyawPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerSetPitchyawPublisher creates and returns a new publisher for the
// GimbalManagerSetPitchyaw
func NewGimbalManagerSetPitchyawPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerSetPitchyawPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerSetPitchyawTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerSetPitchyawPublisher{pub}, nil
}

func (p *GimbalManagerSetPitchyawPublisher) Publish(msg *GimbalManagerSetPitchyaw) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerSetPitchyawSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerSetPitchyawSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerSetPitchyawSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerSetPitchyawSubscription.
type GimbalManagerSetPitchyawSubscriptionCallback func(msg *GimbalManagerSetPitchyaw, info *rclgo.MessageInfo, err error)

// NewGimbalManagerSetPitchyawSubscription creates and returns a new subscription for the
// GimbalManagerSetPitchyaw
func NewGimbalManagerSetPitchyawSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerSetPitchyawSubscriptionCallback) (*GimbalManagerSetPitchyawSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerSetPitchyaw
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerSetPitchyawTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerSetPitchyawSubscription{sub}, nil
}

func (s *GimbalManagerSetPitchyawSubscription) TakeMessage(out *GimbalManagerSetPitchyaw) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerSetPitchyawSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerSetPitchyawSlice(dst, src []GimbalManagerSetPitchyaw) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerSetPitchyawTypeSupport types.MessageTypeSupport = _GimbalManagerSetPitchyawTypeSupport{}

type _GimbalManagerSetPitchyawTypeSupport struct{}

func (t _GimbalManagerSetPitchyawTypeSupport) New() types.Message {
	return NewGimbalManagerSetPitchyaw()
}

func (t _GimbalManagerSetPitchyawTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__GimbalManagerSetPitchyaw
	return (unsafe.Pointer)(C.mavros_msgs__msg__GimbalManagerSetPitchyaw__create())
}

func (t _GimbalManagerSetPitchyawTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__GimbalManagerSetPitchyaw__destroy((*C.mavros_msgs__msg__GimbalManagerSetPitchyaw)(pointer_to_free))
}

func (t _GimbalManagerSetPitchyawTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerSetPitchyaw)
	mem := (*C.mavros_msgs__msg__GimbalManagerSetPitchyaw)(dst)
	mem.target_system = C.uint8_t(m.TargetSystem)
	mem.target_component = C.uint8_t(m.TargetComponent)
	mem.flags = C.uint32_t(m.Flags)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
	mem.pitch = C.float(m.Pitch)
	mem.yaw = C.float(m.Yaw)
	mem.pitch_rate = C.float(m.PitchRate)
	mem.yaw_rate = C.float(m.YawRate)
}

func (t _GimbalManagerSetPitchyawTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerSetPitchyaw)
	mem := (*C.mavros_msgs__msg__GimbalManagerSetPitchyaw)(ros2_message_buffer)
	m.TargetSystem = uint8(mem.target_system)
	m.TargetComponent = uint8(mem.target_component)
	m.Flags = uint32(mem.flags)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
	m.Pitch = float32(mem.pitch)
	m.Yaw = float32(mem.yaw)
	m.PitchRate = float32(mem.pitch_rate)
	m.YawRate = float32(mem.yaw_rate)
}

func (t _GimbalManagerSetPitchyawTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__GimbalManagerSetPitchyaw())
}

type CGimbalManagerSetPitchyaw = C.mavros_msgs__msg__GimbalManagerSetPitchyaw
type CGimbalManagerSetPitchyaw__Sequence = C.mavros_msgs__msg__GimbalManagerSetPitchyaw__Sequence

func GimbalManagerSetPitchyaw__Sequence_to_Go(goSlice *[]GimbalManagerSetPitchyaw, cSlice CGimbalManagerSetPitchyaw__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerSetPitchyaw, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerSetPitchyawTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerSetPitchyaw__Sequence_to_C(cSlice *CGimbalManagerSetPitchyaw__Sequence, goSlice []GimbalManagerSetPitchyaw) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__GimbalManagerSetPitchyaw)(C.malloc(C.sizeof_struct_mavros_msgs__msg__GimbalManagerSetPitchyaw * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerSetPitchyawTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerSetPitchyaw__Array_to_Go(goSlice []GimbalManagerSetPitchyaw, cSlice []CGimbalManagerSetPitchyaw) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerSetPitchyawTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerSetPitchyaw__Array_to_C(cSlice []CGimbalManagerSetPitchyaw, goSlice []GimbalManagerSetPitchyaw) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerSetPitchyawTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
