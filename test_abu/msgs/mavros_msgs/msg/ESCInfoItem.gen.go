// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/esc_info_item.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ESCInfoItem", ESCInfoItemTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ESCInfoItem", ESCInfoItemTypeSupport)
}

type ESCInfoItem struct {
	Header std_msgs_msg.Header `yaml:"header"`
	FailureFlags uint16 `yaml:"failure_flags"`
	ErrorCount uint32 `yaml:"error_count"`
	Temperature int32 `yaml:"temperature"`
}

// NewESCInfoItem creates a new ESCInfoItem with default values.
func NewESCInfoItem() *ESCInfoItem {
	self := ESCInfoItem{}
	self.SetDefaults()
	return &self
}

func (t *ESCInfoItem) Clone() *ESCInfoItem {
	c := &ESCInfoItem{}
	c.Header = *t.Header.Clone()
	c.FailureFlags = t.FailureFlags
	c.ErrorCount = t.ErrorCount
	c.Temperature = t.Temperature
	return c
}

func (t *ESCInfoItem) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ESCInfoItem) SetDefaults() {
	t.Header.SetDefaults()
	t.FailureFlags = 0
	t.ErrorCount = 0
	t.Temperature = 0
}

func (t *ESCInfoItem) GetTypeSupport() types.MessageTypeSupport {
	return ESCInfoItemTypeSupport
}

// ESCInfoItemPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ESCInfoItemPublisher struct {
	*rclgo.Publisher
}

// NewESCInfoItemPublisher creates and returns a new publisher for the
// ESCInfoItem
func NewESCInfoItemPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ESCInfoItemPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ESCInfoItemTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ESCInfoItemPublisher{pub}, nil
}

func (p *ESCInfoItemPublisher) Publish(msg *ESCInfoItem) error {
	return p.Publisher.Publish(msg)
}

// ESCInfoItemSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ESCInfoItemSubscription struct {
	*rclgo.Subscription
}

// ESCInfoItemSubscriptionCallback type is used to provide a subscription
// handler function for a ESCInfoItemSubscription.
type ESCInfoItemSubscriptionCallback func(msg *ESCInfoItem, info *rclgo.MessageInfo, err error)

// NewESCInfoItemSubscription creates and returns a new subscription for the
// ESCInfoItem
func NewESCInfoItemSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ESCInfoItemSubscriptionCallback) (*ESCInfoItemSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ESCInfoItem
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ESCInfoItemTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ESCInfoItemSubscription{sub}, nil
}

func (s *ESCInfoItemSubscription) TakeMessage(out *ESCInfoItem) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneESCInfoItemSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneESCInfoItemSlice(dst, src []ESCInfoItem) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ESCInfoItemTypeSupport types.MessageTypeSupport = _ESCInfoItemTypeSupport{}

type _ESCInfoItemTypeSupport struct{}

func (t _ESCInfoItemTypeSupport) New() types.Message {
	return NewESCInfoItem()
}

func (t _ESCInfoItemTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ESCInfoItem
	return (unsafe.Pointer)(C.mavros_msgs__msg__ESCInfoItem__create())
}

func (t _ESCInfoItemTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ESCInfoItem__destroy((*C.mavros_msgs__msg__ESCInfoItem)(pointer_to_free))
}

func (t _ESCInfoItemTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ESCInfoItem)
	mem := (*C.mavros_msgs__msg__ESCInfoItem)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.failure_flags = C.uint16_t(m.FailureFlags)
	mem.error_count = C.uint32_t(m.ErrorCount)
	mem.temperature = C.int32_t(m.Temperature)
}

func (t _ESCInfoItemTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ESCInfoItem)
	mem := (*C.mavros_msgs__msg__ESCInfoItem)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.FailureFlags = uint16(mem.failure_flags)
	m.ErrorCount = uint32(mem.error_count)
	m.Temperature = int32(mem.temperature)
}

func (t _ESCInfoItemTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ESCInfoItem())
}

type CESCInfoItem = C.mavros_msgs__msg__ESCInfoItem
type CESCInfoItem__Sequence = C.mavros_msgs__msg__ESCInfoItem__Sequence

func ESCInfoItem__Sequence_to_Go(goSlice *[]ESCInfoItem, cSlice CESCInfoItem__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ESCInfoItem, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ESCInfoItemTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ESCInfoItem__Sequence_to_C(cSlice *CESCInfoItem__Sequence, goSlice []ESCInfoItem) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ESCInfoItem)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ESCInfoItem * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ESCInfoItemTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ESCInfoItem__Array_to_Go(goSlice []ESCInfoItem, cSlice []CESCInfoItem) {
	for i := 0; i < len(cSlice); i++ {
		ESCInfoItemTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ESCInfoItem__Array_to_C(cSlice []CESCInfoItem, goSlice []ESCInfoItem) {
	for i := 0; i < len(goSlice); i++ {
		ESCInfoItemTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
