// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/gpsinput.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GPSINPUT", GPSINPUTTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/GPSINPUT", GPSINPUTTypeSupport)
}
const (
	GPSINPUT_GPS_FIX_TYPE_NO_GPS uint8 = 0// No GPS connected. # GPS_FIX_TYPE enum
	GPSINPUT_GPS_FIX_TYPE_NO_FIX uint8 = 1// No position information, GPS is connected
	GPSINPUT_GPS_FIX_TYPE_2D_FIX uint8 = 2// 2D position
	GPSINPUT_GPS_FIX_TYPE_3D_FIX uint8 = 3// 3D position
	GPSINPUT_GPS_FIX_TYPE_DGPS uint8 = 4// DGPS/SBAS aided 3D position
	GPSINPUT_GPS_FIX_TYPE_RTK_FLOATR uint8 = 5// TK float, 3D position
	GPSINPUT_GPS_FIX_TYPE_RTK_FIXEDR uint8 = 6// TK Fixed, 3D position
	GPSINPUT_GPS_FIX_TYPE_STATIC uint8 = 7// Static fixed, typically used for base stations
	GPSINPUT_GPS_FIX_TYPE_PPP uint8 = 8// PPP, 3D position
)

type GPSINPUT struct {
	Header std_msgs_msg.Header `yaml:"header"`
	FixType uint8 `yaml:"fix_type"`// [GPS_FIX_TYPE] GPS fix type
	GpsId uint8 `yaml:"gps_id"`// ID of the GPS for multiple GPS inputs
	IgnoreFlags uint16 `yaml:"ignore_flags"`// Bitmap indicating which GPS input flags fields to ignore. All other fields must be provided.
	TimeWeekMs uint32 `yaml:"time_week_ms"`// [ms] GPS time (from start of GPS week)
	TimeWeek uint16 `yaml:"time_week"`// GPS week number
	Lat int32 `yaml:"lat"`// [degE7] Latitude (WGS84, EGM96 ellipsoid)
	Lon int32 `yaml:"lon"`// [degE7] Longitude (WGS84, EGM96 ellipsoid)
	Alt float32 `yaml:"alt"`// [m] Altitude (MSL). Positive for up.
	Hdop float32 `yaml:"hdop"`// [m] GPS HDOP horizontal dilution of position.
	Vdop float32 `yaml:"vdop"`// [m] GPS VDOP vertical dilution of position
	Vn float32 `yaml:"vn"`// [m/s] GPS velocity in NORTH direction in earth-fixed NED frame
	Ve float32 `yaml:"ve"`// [m/s] GPS velocity in EAST direction in earth-fixed NED frame
	Vd float32 `yaml:"vd"`// [m/s] GPS velocity in DOWN direction in earth-fixed NED frame
	SpeedAccuracy float32 `yaml:"speed_accuracy"`// [m/s] GPS speed accuracy
	HorizAccuracy float32 `yaml:"horiz_accuracy"`// [m] GPS horizontal accuracy
	VertAccuracy float32 `yaml:"vert_accuracy"`// [m] GPS vertical accuracy
	SatellitesVisible uint8 `yaml:"satellites_visible"`// Number of satellites visible. If unknown, set to 255
	Yaw uint16 `yaml:"yaw"`// [cdeg] Yaw in earth frame from north.
}

// NewGPSINPUT creates a new GPSINPUT with default values.
func NewGPSINPUT() *GPSINPUT {
	self := GPSINPUT{}
	self.SetDefaults()
	return &self
}

func (t *GPSINPUT) Clone() *GPSINPUT {
	c := &GPSINPUT{}
	c.Header = *t.Header.Clone()
	c.FixType = t.FixType
	c.GpsId = t.GpsId
	c.IgnoreFlags = t.IgnoreFlags
	c.TimeWeekMs = t.TimeWeekMs
	c.TimeWeek = t.TimeWeek
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.Hdop = t.Hdop
	c.Vdop = t.Vdop
	c.Vn = t.Vn
	c.Ve = t.Ve
	c.Vd = t.Vd
	c.SpeedAccuracy = t.SpeedAccuracy
	c.HorizAccuracy = t.HorizAccuracy
	c.VertAccuracy = t.VertAccuracy
	c.SatellitesVisible = t.SatellitesVisible
	c.Yaw = t.Yaw
	return c
}

func (t *GPSINPUT) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GPSINPUT) SetDefaults() {
	t.Header.SetDefaults()
	t.FixType = 0
	t.GpsId = 0
	t.IgnoreFlags = 0
	t.TimeWeekMs = 0
	t.TimeWeek = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.Hdop = 0
	t.Vdop = 0
	t.Vn = 0
	t.Ve = 0
	t.Vd = 0
	t.SpeedAccuracy = 0
	t.HorizAccuracy = 0
	t.VertAccuracy = 0
	t.SatellitesVisible = 0
	t.Yaw = 0
}

func (t *GPSINPUT) GetTypeSupport() types.MessageTypeSupport {
	return GPSINPUTTypeSupport
}

// GPSINPUTPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GPSINPUTPublisher struct {
	*rclgo.Publisher
}

// NewGPSINPUTPublisher creates and returns a new publisher for the
// GPSINPUT
func NewGPSINPUTPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GPSINPUTPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GPSINPUTTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GPSINPUTPublisher{pub}, nil
}

func (p *GPSINPUTPublisher) Publish(msg *GPSINPUT) error {
	return p.Publisher.Publish(msg)
}

// GPSINPUTSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GPSINPUTSubscription struct {
	*rclgo.Subscription
}

// GPSINPUTSubscriptionCallback type is used to provide a subscription
// handler function for a GPSINPUTSubscription.
type GPSINPUTSubscriptionCallback func(msg *GPSINPUT, info *rclgo.MessageInfo, err error)

// NewGPSINPUTSubscription creates and returns a new subscription for the
// GPSINPUT
func NewGPSINPUTSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GPSINPUTSubscriptionCallback) (*GPSINPUTSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GPSINPUT
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GPSINPUTTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GPSINPUTSubscription{sub}, nil
}

func (s *GPSINPUTSubscription) TakeMessage(out *GPSINPUT) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGPSINPUTSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGPSINPUTSlice(dst, src []GPSINPUT) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GPSINPUTTypeSupport types.MessageTypeSupport = _GPSINPUTTypeSupport{}

type _GPSINPUTTypeSupport struct{}

func (t _GPSINPUTTypeSupport) New() types.Message {
	return NewGPSINPUT()
}

func (t _GPSINPUTTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__GPSINPUT
	return (unsafe.Pointer)(C.mavros_msgs__msg__GPSINPUT__create())
}

func (t _GPSINPUTTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__GPSINPUT__destroy((*C.mavros_msgs__msg__GPSINPUT)(pointer_to_free))
}

func (t _GPSINPUTTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GPSINPUT)
	mem := (*C.mavros_msgs__msg__GPSINPUT)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.fix_type = C.uint8_t(m.FixType)
	mem.gps_id = C.uint8_t(m.GpsId)
	mem.ignore_flags = C.uint16_t(m.IgnoreFlags)
	mem.time_week_ms = C.uint32_t(m.TimeWeekMs)
	mem.time_week = C.uint16_t(m.TimeWeek)
	mem.lat = C.int32_t(m.Lat)
	mem.lon = C.int32_t(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.hdop = C.float(m.Hdop)
	mem.vdop = C.float(m.Vdop)
	mem.vn = C.float(m.Vn)
	mem.ve = C.float(m.Ve)
	mem.vd = C.float(m.Vd)
	mem.speed_accuracy = C.float(m.SpeedAccuracy)
	mem.horiz_accuracy = C.float(m.HorizAccuracy)
	mem.vert_accuracy = C.float(m.VertAccuracy)
	mem.satellites_visible = C.uint8_t(m.SatellitesVisible)
	mem.yaw = C.uint16_t(m.Yaw)
}

func (t _GPSINPUTTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GPSINPUT)
	mem := (*C.mavros_msgs__msg__GPSINPUT)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.FixType = uint8(mem.fix_type)
	m.GpsId = uint8(mem.gps_id)
	m.IgnoreFlags = uint16(mem.ignore_flags)
	m.TimeWeekMs = uint32(mem.time_week_ms)
	m.TimeWeek = uint16(mem.time_week)
	m.Lat = int32(mem.lat)
	m.Lon = int32(mem.lon)
	m.Alt = float32(mem.alt)
	m.Hdop = float32(mem.hdop)
	m.Vdop = float32(mem.vdop)
	m.Vn = float32(mem.vn)
	m.Ve = float32(mem.ve)
	m.Vd = float32(mem.vd)
	m.SpeedAccuracy = float32(mem.speed_accuracy)
	m.HorizAccuracy = float32(mem.horiz_accuracy)
	m.VertAccuracy = float32(mem.vert_accuracy)
	m.SatellitesVisible = uint8(mem.satellites_visible)
	m.Yaw = uint16(mem.yaw)
}

func (t _GPSINPUTTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__GPSINPUT())
}

type CGPSINPUT = C.mavros_msgs__msg__GPSINPUT
type CGPSINPUT__Sequence = C.mavros_msgs__msg__GPSINPUT__Sequence

func GPSINPUT__Sequence_to_Go(goSlice *[]GPSINPUT, cSlice CGPSINPUT__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GPSINPUT, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GPSINPUTTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GPSINPUT__Sequence_to_C(cSlice *CGPSINPUT__Sequence, goSlice []GPSINPUT) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__GPSINPUT)(C.malloc(C.sizeof_struct_mavros_msgs__msg__GPSINPUT * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GPSINPUTTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GPSINPUT__Array_to_Go(goSlice []GPSINPUT, cSlice []CGPSINPUT) {
	for i := 0; i < len(cSlice); i++ {
		GPSINPUTTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GPSINPUT__Array_to_C(cSlice []CGPSINPUT, goSlice []GPSINPUT) {
	for i := 0; i < len(goSlice); i++ {
		GPSINPUTTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
