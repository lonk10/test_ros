// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/nav_controller_output.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/NavControllerOutput", NavControllerOutputTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/NavControllerOutput", NavControllerOutputTypeSupport)
}

type NavControllerOutput struct {
	Header std_msgs_msg.Header `yaml:"header"`
	NavRoll float32 `yaml:"nav_roll"`// Current desired roll
	NavPitch float32 `yaml:"nav_pitch"`// Current desired pitch
	NavBearing int16 `yaml:"nav_bearing"`// Current desired heading
	TargetBearing int16 `yaml:"target_bearing"`// Bearing to current waypoint/target
	WpDist uint16 `yaml:"wp_dist"`// Distance to active waypoint
	AltError float32 `yaml:"alt_error"`// Current altitude error
	AspdError float32 `yaml:"aspd_error"`// Current airspeed error
	XtrackError float32 `yaml:"xtrack_error"`// Current crosstrack error on x-y plane
}

// NewNavControllerOutput creates a new NavControllerOutput with default values.
func NewNavControllerOutput() *NavControllerOutput {
	self := NavControllerOutput{}
	self.SetDefaults()
	return &self
}

func (t *NavControllerOutput) Clone() *NavControllerOutput {
	c := &NavControllerOutput{}
	c.Header = *t.Header.Clone()
	c.NavRoll = t.NavRoll
	c.NavPitch = t.NavPitch
	c.NavBearing = t.NavBearing
	c.TargetBearing = t.TargetBearing
	c.WpDist = t.WpDist
	c.AltError = t.AltError
	c.AspdError = t.AspdError
	c.XtrackError = t.XtrackError
	return c
}

func (t *NavControllerOutput) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NavControllerOutput) SetDefaults() {
	t.Header.SetDefaults()
	t.NavRoll = 0
	t.NavPitch = 0
	t.NavBearing = 0
	t.TargetBearing = 0
	t.WpDist = 0
	t.AltError = 0
	t.AspdError = 0
	t.XtrackError = 0
}

func (t *NavControllerOutput) GetTypeSupport() types.MessageTypeSupport {
	return NavControllerOutputTypeSupport
}

// NavControllerOutputPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type NavControllerOutputPublisher struct {
	*rclgo.Publisher
}

// NewNavControllerOutputPublisher creates and returns a new publisher for the
// NavControllerOutput
func NewNavControllerOutputPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*NavControllerOutputPublisher, error) {
	pub, err := node.NewPublisher(topic_name, NavControllerOutputTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavControllerOutputPublisher{pub}, nil
}

func (p *NavControllerOutputPublisher) Publish(msg *NavControllerOutput) error {
	return p.Publisher.Publish(msg)
}

// NavControllerOutputSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type NavControllerOutputSubscription struct {
	*rclgo.Subscription
}

// NavControllerOutputSubscriptionCallback type is used to provide a subscription
// handler function for a NavControllerOutputSubscription.
type NavControllerOutputSubscriptionCallback func(msg *NavControllerOutput, info *rclgo.MessageInfo, err error)

// NewNavControllerOutputSubscription creates and returns a new subscription for the
// NavControllerOutput
func NewNavControllerOutputSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback NavControllerOutputSubscriptionCallback) (*NavControllerOutputSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg NavControllerOutput
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, NavControllerOutputTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NavControllerOutputSubscription{sub}, nil
}

func (s *NavControllerOutputSubscription) TakeMessage(out *NavControllerOutput) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNavControllerOutputSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavControllerOutputSlice(dst, src []NavControllerOutput) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavControllerOutputTypeSupport types.MessageTypeSupport = _NavControllerOutputTypeSupport{}

type _NavControllerOutputTypeSupport struct{}

func (t _NavControllerOutputTypeSupport) New() types.Message {
	return NewNavControllerOutput()
}

func (t _NavControllerOutputTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__NavControllerOutput
	return (unsafe.Pointer)(C.mavros_msgs__msg__NavControllerOutput__create())
}

func (t _NavControllerOutputTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__NavControllerOutput__destroy((*C.mavros_msgs__msg__NavControllerOutput)(pointer_to_free))
}

func (t _NavControllerOutputTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NavControllerOutput)
	mem := (*C.mavros_msgs__msg__NavControllerOutput)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.nav_roll = C.float(m.NavRoll)
	mem.nav_pitch = C.float(m.NavPitch)
	mem.nav_bearing = C.int16_t(m.NavBearing)
	mem.target_bearing = C.int16_t(m.TargetBearing)
	mem.wp_dist = C.uint16_t(m.WpDist)
	mem.alt_error = C.float(m.AltError)
	mem.aspd_error = C.float(m.AspdError)
	mem.xtrack_error = C.float(m.XtrackError)
}

func (t _NavControllerOutputTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavControllerOutput)
	mem := (*C.mavros_msgs__msg__NavControllerOutput)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.NavRoll = float32(mem.nav_roll)
	m.NavPitch = float32(mem.nav_pitch)
	m.NavBearing = int16(mem.nav_bearing)
	m.TargetBearing = int16(mem.target_bearing)
	m.WpDist = uint16(mem.wp_dist)
	m.AltError = float32(mem.alt_error)
	m.AspdError = float32(mem.aspd_error)
	m.XtrackError = float32(mem.xtrack_error)
}

func (t _NavControllerOutputTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__NavControllerOutput())
}

type CNavControllerOutput = C.mavros_msgs__msg__NavControllerOutput
type CNavControllerOutput__Sequence = C.mavros_msgs__msg__NavControllerOutput__Sequence

func NavControllerOutput__Sequence_to_Go(goSlice *[]NavControllerOutput, cSlice CNavControllerOutput__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavControllerOutput, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NavControllerOutputTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func NavControllerOutput__Sequence_to_C(cSlice *CNavControllerOutput__Sequence, goSlice []NavControllerOutput) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__NavControllerOutput)(C.malloc(C.sizeof_struct_mavros_msgs__msg__NavControllerOutput * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NavControllerOutputTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func NavControllerOutput__Array_to_Go(goSlice []NavControllerOutput, cSlice []CNavControllerOutput) {
	for i := 0; i < len(cSlice); i++ {
		NavControllerOutputTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NavControllerOutput__Array_to_C(cSlice []CNavControllerOutput, goSlice []NavControllerOutput) {
	for i := 0; i < len(goSlice); i++ {
		NavControllerOutputTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
