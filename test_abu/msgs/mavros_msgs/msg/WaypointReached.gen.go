// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/waypoint_reached.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/WaypointReached", WaypointReachedTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/WaypointReached", WaypointReachedTypeSupport)
}

type WaypointReached struct {
	Header std_msgs_msg.Header `yaml:"header"`
	WpSeq uint16 `yaml:"wp_seq"`
}

// NewWaypointReached creates a new WaypointReached with default values.
func NewWaypointReached() *WaypointReached {
	self := WaypointReached{}
	self.SetDefaults()
	return &self
}

func (t *WaypointReached) Clone() *WaypointReached {
	c := &WaypointReached{}
	c.Header = *t.Header.Clone()
	c.WpSeq = t.WpSeq
	return c
}

func (t *WaypointReached) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WaypointReached) SetDefaults() {
	t.Header.SetDefaults()
	t.WpSeq = 0
}

func (t *WaypointReached) GetTypeSupport() types.MessageTypeSupport {
	return WaypointReachedTypeSupport
}

// WaypointReachedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WaypointReachedPublisher struct {
	*rclgo.Publisher
}

// NewWaypointReachedPublisher creates and returns a new publisher for the
// WaypointReached
func NewWaypointReachedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WaypointReachedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WaypointReachedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointReachedPublisher{pub}, nil
}

func (p *WaypointReachedPublisher) Publish(msg *WaypointReached) error {
	return p.Publisher.Publish(msg)
}

// WaypointReachedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WaypointReachedSubscription struct {
	*rclgo.Subscription
}

// WaypointReachedSubscriptionCallback type is used to provide a subscription
// handler function for a WaypointReachedSubscription.
type WaypointReachedSubscriptionCallback func(msg *WaypointReached, info *rclgo.MessageInfo, err error)

// NewWaypointReachedSubscription creates and returns a new subscription for the
// WaypointReached
func NewWaypointReachedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WaypointReachedSubscriptionCallback) (*WaypointReachedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WaypointReached
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WaypointReachedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WaypointReachedSubscription{sub}, nil
}

func (s *WaypointReachedSubscription) TakeMessage(out *WaypointReached) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWaypointReachedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWaypointReachedSlice(dst, src []WaypointReached) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WaypointReachedTypeSupport types.MessageTypeSupport = _WaypointReachedTypeSupport{}

type _WaypointReachedTypeSupport struct{}

func (t _WaypointReachedTypeSupport) New() types.Message {
	return NewWaypointReached()
}

func (t _WaypointReachedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__WaypointReached
	return (unsafe.Pointer)(C.mavros_msgs__msg__WaypointReached__create())
}

func (t _WaypointReachedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__WaypointReached__destroy((*C.mavros_msgs__msg__WaypointReached)(pointer_to_free))
}

func (t _WaypointReachedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WaypointReached)
	mem := (*C.mavros_msgs__msg__WaypointReached)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.wp_seq = C.uint16_t(m.WpSeq)
}

func (t _WaypointReachedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WaypointReached)
	mem := (*C.mavros_msgs__msg__WaypointReached)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.WpSeq = uint16(mem.wp_seq)
}

func (t _WaypointReachedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__WaypointReached())
}

type CWaypointReached = C.mavros_msgs__msg__WaypointReached
type CWaypointReached__Sequence = C.mavros_msgs__msg__WaypointReached__Sequence

func WaypointReached__Sequence_to_Go(goSlice *[]WaypointReached, cSlice CWaypointReached__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WaypointReached, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WaypointReachedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WaypointReached__Sequence_to_C(cSlice *CWaypointReached__Sequence, goSlice []WaypointReached) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__WaypointReached)(C.malloc(C.sizeof_struct_mavros_msgs__msg__WaypointReached * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WaypointReachedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WaypointReached__Array_to_Go(goSlice []WaypointReached, cSlice []CWaypointReached) {
	for i := 0; i < len(cSlice); i++ {
		WaypointReachedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WaypointReached__Array_to_C(cSlice []CWaypointReached, goSlice []WaypointReached) {
	for i := 0; i < len(goSlice); i++ {
		WaypointReachedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
