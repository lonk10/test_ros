// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/file_entry.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/FileEntry", FileEntryTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/FileEntry", FileEntryTypeSupport)
}
const (
	FileEntry_TYPE_FILE uint8 = 0
	FileEntry_TYPE_DIRECTORY uint8 = 1
)

type FileEntry struct {
	Name string `yaml:"name"`
	Type uint8 `yaml:"type"`
	Size uint64 `yaml:"size"`
}

// NewFileEntry creates a new FileEntry with default values.
func NewFileEntry() *FileEntry {
	self := FileEntry{}
	self.SetDefaults()
	return &self
}

func (t *FileEntry) Clone() *FileEntry {
	c := &FileEntry{}
	c.Name = t.Name
	c.Type = t.Type
	c.Size = t.Size
	return c
}

func (t *FileEntry) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FileEntry) SetDefaults() {
	t.Name = ""
	t.Type = 0
	t.Size = 0
}

func (t *FileEntry) GetTypeSupport() types.MessageTypeSupport {
	return FileEntryTypeSupport
}

// FileEntryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FileEntryPublisher struct {
	*rclgo.Publisher
}

// NewFileEntryPublisher creates and returns a new publisher for the
// FileEntry
func NewFileEntryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FileEntryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FileEntryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FileEntryPublisher{pub}, nil
}

func (p *FileEntryPublisher) Publish(msg *FileEntry) error {
	return p.Publisher.Publish(msg)
}

// FileEntrySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FileEntrySubscription struct {
	*rclgo.Subscription
}

// FileEntrySubscriptionCallback type is used to provide a subscription
// handler function for a FileEntrySubscription.
type FileEntrySubscriptionCallback func(msg *FileEntry, info *rclgo.MessageInfo, err error)

// NewFileEntrySubscription creates and returns a new subscription for the
// FileEntry
func NewFileEntrySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FileEntrySubscriptionCallback) (*FileEntrySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FileEntry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FileEntryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FileEntrySubscription{sub}, nil
}

func (s *FileEntrySubscription) TakeMessage(out *FileEntry) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFileEntrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFileEntrySlice(dst, src []FileEntry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FileEntryTypeSupport types.MessageTypeSupport = _FileEntryTypeSupport{}

type _FileEntryTypeSupport struct{}

func (t _FileEntryTypeSupport) New() types.Message {
	return NewFileEntry()
}

func (t _FileEntryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__FileEntry
	return (unsafe.Pointer)(C.mavros_msgs__msg__FileEntry__create())
}

func (t _FileEntryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__FileEntry__destroy((*C.mavros_msgs__msg__FileEntry)(pointer_to_free))
}

func (t _FileEntryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FileEntry)
	mem := (*C.mavros_msgs__msg__FileEntry)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem._type = C.uint8_t(m.Type)
	mem.size = C.uint64_t(m.Size)
}

func (t _FileEntryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FileEntry)
	mem := (*C.mavros_msgs__msg__FileEntry)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.Type = uint8(mem._type)
	m.Size = uint64(mem.size)
}

func (t _FileEntryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__FileEntry())
}

type CFileEntry = C.mavros_msgs__msg__FileEntry
type CFileEntry__Sequence = C.mavros_msgs__msg__FileEntry__Sequence

func FileEntry__Sequence_to_Go(goSlice *[]FileEntry, cSlice CFileEntry__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FileEntry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FileEntryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FileEntry__Sequence_to_C(cSlice *CFileEntry__Sequence, goSlice []FileEntry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__FileEntry)(C.malloc(C.sizeof_struct_mavros_msgs__msg__FileEntry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FileEntryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FileEntry__Array_to_Go(goSlice []FileEntry, cSlice []CFileEntry) {
	for i := 0; i < len(cSlice); i++ {
		FileEntryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FileEntry__Array_to_C(cSlice []CFileEntry, goSlice []FileEntry) {
	for i := 0; i < len(goSlice); i++ {
		FileEntryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
