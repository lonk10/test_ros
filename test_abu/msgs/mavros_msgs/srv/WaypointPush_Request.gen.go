// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	mavros_msgs_msg "test/msgs/mavros_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/waypoint_push.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/WaypointPush_Request", WaypointPush_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/WaypointPush_Request", WaypointPush_RequestTypeSupport)
}

type WaypointPush_Request struct {
	StartIndex uint16 `yaml:"start_index"`
	Waypoints []mavros_msgs_msg.Waypoint `yaml:"waypoints"`
}

// NewWaypointPush_Request creates a new WaypointPush_Request with default values.
func NewWaypointPush_Request() *WaypointPush_Request {
	self := WaypointPush_Request{}
	self.SetDefaults()
	return &self
}

func (t *WaypointPush_Request) Clone() *WaypointPush_Request {
	c := &WaypointPush_Request{}
	c.StartIndex = t.StartIndex
	if t.Waypoints != nil {
		c.Waypoints = make([]mavros_msgs_msg.Waypoint, len(t.Waypoints))
		mavros_msgs_msg.CloneWaypointSlice(c.Waypoints, t.Waypoints)
	}
	return c
}

func (t *WaypointPush_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WaypointPush_Request) SetDefaults() {
	t.StartIndex = 0
	t.Waypoints = nil
}

func (t *WaypointPush_Request) GetTypeSupport() types.MessageTypeSupport {
	return WaypointPush_RequestTypeSupport
}

// WaypointPush_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WaypointPush_RequestPublisher struct {
	*rclgo.Publisher
}

// NewWaypointPush_RequestPublisher creates and returns a new publisher for the
// WaypointPush_Request
func NewWaypointPush_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WaypointPush_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WaypointPush_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointPush_RequestPublisher{pub}, nil
}

func (p *WaypointPush_RequestPublisher) Publish(msg *WaypointPush_Request) error {
	return p.Publisher.Publish(msg)
}

// WaypointPush_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WaypointPush_RequestSubscription struct {
	*rclgo.Subscription
}

// WaypointPush_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a WaypointPush_RequestSubscription.
type WaypointPush_RequestSubscriptionCallback func(msg *WaypointPush_Request, info *rclgo.MessageInfo, err error)

// NewWaypointPush_RequestSubscription creates and returns a new subscription for the
// WaypointPush_Request
func NewWaypointPush_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WaypointPush_RequestSubscriptionCallback) (*WaypointPush_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WaypointPush_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WaypointPush_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WaypointPush_RequestSubscription{sub}, nil
}

func (s *WaypointPush_RequestSubscription) TakeMessage(out *WaypointPush_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWaypointPush_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWaypointPush_RequestSlice(dst, src []WaypointPush_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WaypointPush_RequestTypeSupport types.MessageTypeSupport = _WaypointPush_RequestTypeSupport{}

type _WaypointPush_RequestTypeSupport struct{}

func (t _WaypointPush_RequestTypeSupport) New() types.Message {
	return NewWaypointPush_Request()
}

func (t _WaypointPush_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__WaypointPush_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__WaypointPush_Request__create())
}

func (t _WaypointPush_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__WaypointPush_Request__destroy((*C.mavros_msgs__srv__WaypointPush_Request)(pointer_to_free))
}

func (t _WaypointPush_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WaypointPush_Request)
	mem := (*C.mavros_msgs__srv__WaypointPush_Request)(dst)
	mem.start_index = C.uint16_t(m.StartIndex)
	mavros_msgs_msg.Waypoint__Sequence_to_C((*mavros_msgs_msg.CWaypoint__Sequence)(unsafe.Pointer(&mem.waypoints)), m.Waypoints)
}

func (t _WaypointPush_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WaypointPush_Request)
	mem := (*C.mavros_msgs__srv__WaypointPush_Request)(ros2_message_buffer)
	m.StartIndex = uint16(mem.start_index)
	mavros_msgs_msg.Waypoint__Sequence_to_Go(&m.Waypoints, *(*mavros_msgs_msg.CWaypoint__Sequence)(unsafe.Pointer(&mem.waypoints)))
}

func (t _WaypointPush_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__WaypointPush_Request())
}

type CWaypointPush_Request = C.mavros_msgs__srv__WaypointPush_Request
type CWaypointPush_Request__Sequence = C.mavros_msgs__srv__WaypointPush_Request__Sequence

func WaypointPush_Request__Sequence_to_Go(goSlice *[]WaypointPush_Request, cSlice CWaypointPush_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WaypointPush_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WaypointPush_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WaypointPush_Request__Sequence_to_C(cSlice *CWaypointPush_Request__Sequence, goSlice []WaypointPush_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__WaypointPush_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__WaypointPush_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WaypointPush_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WaypointPush_Request__Array_to_Go(goSlice []WaypointPush_Request, cSlice []CWaypointPush_Request) {
	for i := 0; i < len(cSlice); i++ {
		WaypointPush_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WaypointPush_Request__Array_to_C(cSlice []CWaypointPush_Request, goSlice []WaypointPush_Request) {
	for i := 0; i < len(goSlice); i++ {
		WaypointPush_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
