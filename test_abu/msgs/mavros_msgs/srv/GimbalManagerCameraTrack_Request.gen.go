// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/gimbal_manager_camera_track.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerCameraTrack_Request", GimbalManagerCameraTrack_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/GimbalManagerCameraTrack_Request", GimbalManagerCameraTrack_RequestTypeSupport)
}
const (
	GimbalManagerCameraTrack_Request_CAMERA_TRACK_MODE_POINT uint8 = 0// If the camera supports point visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_POINT is set), this command allows to initiate the tracking. [CAMERA_TRACK_POINT]. CAMERA_TRACK_MODE
	GimbalManagerCameraTrack_Request_CAMERA_TRACK_MODE_RECTANGLE uint8 = 1// If the camera supports rectangle visual tracking (CAMERA_CAP_FLAGS_HAS_TRACKING_RECTANGLE is set), this command allows to initiate the tracking. [CAMERA_TRACK_RECTANGLE]
	GimbalManagerCameraTrack_Request_CAMERA_TRACK_MODE_STOP_TRACKING uint8 = 2// Stops ongoing tracking. [CAMERA_STOP_TRACKING]
)

type GimbalManagerCameraTrack_Request struct {
	Mode uint8 `yaml:"mode"`// enumerator to indicate camera track mode setting - see CAMERA_TRACK_MODE
	X float32 `yaml:"x"`// Point to track x value (normalized 0..1, 0 is left, 1 is right).. For CAMERA_TRACK_POINT
	Y float32 `yaml:"y"`// Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
	Radius float32 `yaml:"radius"`// Point radius (normalized 0..1, 0 is image left, 1 is image right).
	TopLeftX float32 `yaml:"top_left_x"`// Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).. For CAMERA_TRACK_RECTANGLE
	TopLeftY float32 `yaml:"top_left_y"`// Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
	BottomRightX float32 `yaml:"bottom_right_x"`// Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
	BottomRightY float32 `yaml:"bottom_right_y"`// Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
}

// NewGimbalManagerCameraTrack_Request creates a new GimbalManagerCameraTrack_Request with default values.
func NewGimbalManagerCameraTrack_Request() *GimbalManagerCameraTrack_Request {
	self := GimbalManagerCameraTrack_Request{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerCameraTrack_Request) Clone() *GimbalManagerCameraTrack_Request {
	c := &GimbalManagerCameraTrack_Request{}
	c.Mode = t.Mode
	c.X = t.X
	c.Y = t.Y
	c.Radius = t.Radius
	c.TopLeftX = t.TopLeftX
	c.TopLeftY = t.TopLeftY
	c.BottomRightX = t.BottomRightX
	c.BottomRightY = t.BottomRightY
	return c
}

func (t *GimbalManagerCameraTrack_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerCameraTrack_Request) SetDefaults() {
	t.Mode = 0
	t.X = 0
	t.Y = 0
	t.Radius = 0
	t.TopLeftX = 0
	t.TopLeftY = 0
	t.BottomRightX = 0
	t.BottomRightY = 0
}

func (t *GimbalManagerCameraTrack_Request) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerCameraTrack_RequestTypeSupport
}

// GimbalManagerCameraTrack_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerCameraTrack_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerCameraTrack_RequestPublisher creates and returns a new publisher for the
// GimbalManagerCameraTrack_Request
func NewGimbalManagerCameraTrack_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerCameraTrack_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerCameraTrack_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerCameraTrack_RequestPublisher{pub}, nil
}

func (p *GimbalManagerCameraTrack_RequestPublisher) Publish(msg *GimbalManagerCameraTrack_Request) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerCameraTrack_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerCameraTrack_RequestSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerCameraTrack_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerCameraTrack_RequestSubscription.
type GimbalManagerCameraTrack_RequestSubscriptionCallback func(msg *GimbalManagerCameraTrack_Request, info *rclgo.MessageInfo, err error)

// NewGimbalManagerCameraTrack_RequestSubscription creates and returns a new subscription for the
// GimbalManagerCameraTrack_Request
func NewGimbalManagerCameraTrack_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerCameraTrack_RequestSubscriptionCallback) (*GimbalManagerCameraTrack_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerCameraTrack_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerCameraTrack_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerCameraTrack_RequestSubscription{sub}, nil
}

func (s *GimbalManagerCameraTrack_RequestSubscription) TakeMessage(out *GimbalManagerCameraTrack_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerCameraTrack_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerCameraTrack_RequestSlice(dst, src []GimbalManagerCameraTrack_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerCameraTrack_RequestTypeSupport types.MessageTypeSupport = _GimbalManagerCameraTrack_RequestTypeSupport{}

type _GimbalManagerCameraTrack_RequestTypeSupport struct{}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) New() types.Message {
	return NewGimbalManagerCameraTrack_Request()
}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__GimbalManagerCameraTrack_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__GimbalManagerCameraTrack_Request__create())
}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__GimbalManagerCameraTrack_Request__destroy((*C.mavros_msgs__srv__GimbalManagerCameraTrack_Request)(pointer_to_free))
}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerCameraTrack_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerCameraTrack_Request)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.radius = C.float(m.Radius)
	mem.top_left_x = C.float(m.TopLeftX)
	mem.top_left_y = C.float(m.TopLeftY)
	mem.bottom_right_x = C.float(m.BottomRightX)
	mem.bottom_right_y = C.float(m.BottomRightY)
}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerCameraTrack_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerCameraTrack_Request)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Radius = float32(mem.radius)
	m.TopLeftX = float32(mem.top_left_x)
	m.TopLeftY = float32(mem.top_left_y)
	m.BottomRightX = float32(mem.bottom_right_x)
	m.BottomRightY = float32(mem.bottom_right_y)
}

func (t _GimbalManagerCameraTrack_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__GimbalManagerCameraTrack_Request())
}

type CGimbalManagerCameraTrack_Request = C.mavros_msgs__srv__GimbalManagerCameraTrack_Request
type CGimbalManagerCameraTrack_Request__Sequence = C.mavros_msgs__srv__GimbalManagerCameraTrack_Request__Sequence

func GimbalManagerCameraTrack_Request__Sequence_to_Go(goSlice *[]GimbalManagerCameraTrack_Request, cSlice CGimbalManagerCameraTrack_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerCameraTrack_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerCameraTrack_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerCameraTrack_Request__Sequence_to_C(cSlice *CGimbalManagerCameraTrack_Request__Sequence, goSlice []GimbalManagerCameraTrack_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__GimbalManagerCameraTrack_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__GimbalManagerCameraTrack_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerCameraTrack_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerCameraTrack_Request__Array_to_Go(goSlice []GimbalManagerCameraTrack_Request, cSlice []CGimbalManagerCameraTrack_Request) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerCameraTrack_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerCameraTrack_Request__Array_to_C(cSlice []CGimbalManagerCameraTrack_Request, goSlice []GimbalManagerCameraTrack_Request) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerCameraTrack_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
