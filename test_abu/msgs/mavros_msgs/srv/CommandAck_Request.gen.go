// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_ack.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandAck_Request", CommandAck_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandAck_Request", CommandAck_RequestTypeSupport)
}

type CommandAck_Request struct {
	Command uint16 `yaml:"command"`
	Result uint8 `yaml:"result"`
	Progress uint8 `yaml:"progress"`
	ResultParam2 uint32 `yaml:"result_param2"`
}

// NewCommandAck_Request creates a new CommandAck_Request with default values.
func NewCommandAck_Request() *CommandAck_Request {
	self := CommandAck_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandAck_Request) Clone() *CommandAck_Request {
	c := &CommandAck_Request{}
	c.Command = t.Command
	c.Result = t.Result
	c.Progress = t.Progress
	c.ResultParam2 = t.ResultParam2
	return c
}

func (t *CommandAck_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandAck_Request) SetDefaults() {
	t.Command = 0
	t.Result = 0
	t.Progress = 0
	t.ResultParam2 = 0
}

func (t *CommandAck_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandAck_RequestTypeSupport
}

// CommandAck_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandAck_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandAck_RequestPublisher creates and returns a new publisher for the
// CommandAck_Request
func NewCommandAck_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandAck_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandAck_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandAck_RequestPublisher{pub}, nil
}

func (p *CommandAck_RequestPublisher) Publish(msg *CommandAck_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandAck_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandAck_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandAck_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandAck_RequestSubscription.
type CommandAck_RequestSubscriptionCallback func(msg *CommandAck_Request, info *rclgo.MessageInfo, err error)

// NewCommandAck_RequestSubscription creates and returns a new subscription for the
// CommandAck_Request
func NewCommandAck_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandAck_RequestSubscriptionCallback) (*CommandAck_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandAck_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandAck_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandAck_RequestSubscription{sub}, nil
}

func (s *CommandAck_RequestSubscription) TakeMessage(out *CommandAck_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandAck_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandAck_RequestSlice(dst, src []CommandAck_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandAck_RequestTypeSupport types.MessageTypeSupport = _CommandAck_RequestTypeSupport{}

type _CommandAck_RequestTypeSupport struct{}

func (t _CommandAck_RequestTypeSupport) New() types.Message {
	return NewCommandAck_Request()
}

func (t _CommandAck_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandAck_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandAck_Request__create())
}

func (t _CommandAck_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandAck_Request__destroy((*C.mavros_msgs__srv__CommandAck_Request)(pointer_to_free))
}

func (t _CommandAck_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandAck_Request)
	mem := (*C.mavros_msgs__srv__CommandAck_Request)(dst)
	mem.command = C.uint16_t(m.Command)
	mem.result = C.uint8_t(m.Result)
	mem.progress = C.uint8_t(m.Progress)
	mem.result_param2 = C.uint32_t(m.ResultParam2)
}

func (t _CommandAck_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandAck_Request)
	mem := (*C.mavros_msgs__srv__CommandAck_Request)(ros2_message_buffer)
	m.Command = uint16(mem.command)
	m.Result = uint8(mem.result)
	m.Progress = uint8(mem.progress)
	m.ResultParam2 = uint32(mem.result_param2)
}

func (t _CommandAck_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandAck_Request())
}

type CCommandAck_Request = C.mavros_msgs__srv__CommandAck_Request
type CCommandAck_Request__Sequence = C.mavros_msgs__srv__CommandAck_Request__Sequence

func CommandAck_Request__Sequence_to_Go(goSlice *[]CommandAck_Request, cSlice CCommandAck_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandAck_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandAck_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandAck_Request__Sequence_to_C(cSlice *CCommandAck_Request__Sequence, goSlice []CommandAck_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandAck_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandAck_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandAck_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandAck_Request__Array_to_Go(goSlice []CommandAck_Request, cSlice []CCommandAck_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandAck_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandAck_Request__Array_to_C(cSlice []CCommandAck_Request, goSlice []CommandAck_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandAck_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
