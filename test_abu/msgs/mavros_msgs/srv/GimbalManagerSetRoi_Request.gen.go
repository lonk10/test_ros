// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/gimbal_manager_set_roi.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerSetRoi_Request", GimbalManagerSetRoi_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/GimbalManagerSetRoi_Request", GimbalManagerSetRoi_RequestTypeSupport)
}
const (
	GimbalManagerSetRoi_Request_ROI_MODE_LOCATION uint8 = 0// Sets the region of interest (ROI) to a location. [DO_SET_ROI_LOCATION]. ROI_MODE
	GimbalManagerSetRoi_Request_ROI_MODE_WP_NEXT_OFFSET uint8 = 1// Sets the region of interest (ROI) to be toward next waypoint, with optional pitch/roll/yaw offset. [DO_SET_ROI_WPNEXT_OFFSET]
	GimbalManagerSetRoi_Request_ROI_MODE_SYSID uint8 = 2// Mount tracks system with specified system ID [DO_SET_ROI_SYSID]
	GimbalManagerSetRoi_Request_ROI_MODE_NONE uint8 = 3// Cancels any previous ROI setting and returns vehicle to defaults [DO_SET_ROI_NONE]
)

type GimbalManagerSetRoi_Request struct {
	Mode uint8 `yaml:"mode"`// enumerator to indicate ROI mode setting - see ROI_MODE
	GimbalDeviceId uint8 `yaml:"gimbal_device_id"`// Component ID of gimbal device to address
	Latitude float32 `yaml:"latitude"`// For ROI_MODE_LOCATION
	Longitude float32 `yaml:"longitude"`
	Altitude float32 `yaml:"altitude"`// Meters
	PitchOffset float32 `yaml:"pitch_offset"`// Pitch offset from next waypoint, positive pitching up. For ROI_MODE_WP_NEXT_OFFSET
	RollOffset float32 `yaml:"roll_offset"`// Roll offset from next waypoint, positive rolling to the right
	YawOffset float32 `yaml:"yaw_offset"`// Yaw offset from next waypoint, positive yawing to the right
	Sysid uint8 `yaml:"sysid"`// System ID to track (min: 1, max: 255). For ROI_MODE_SYSID
}

// NewGimbalManagerSetRoi_Request creates a new GimbalManagerSetRoi_Request with default values.
func NewGimbalManagerSetRoi_Request() *GimbalManagerSetRoi_Request {
	self := GimbalManagerSetRoi_Request{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerSetRoi_Request) Clone() *GimbalManagerSetRoi_Request {
	c := &GimbalManagerSetRoi_Request{}
	c.Mode = t.Mode
	c.GimbalDeviceId = t.GimbalDeviceId
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.Altitude = t.Altitude
	c.PitchOffset = t.PitchOffset
	c.RollOffset = t.RollOffset
	c.YawOffset = t.YawOffset
	c.Sysid = t.Sysid
	return c
}

func (t *GimbalManagerSetRoi_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerSetRoi_Request) SetDefaults() {
	t.Mode = 0
	t.GimbalDeviceId = 0
	t.Latitude = 0
	t.Longitude = 0
	t.Altitude = 0
	t.PitchOffset = 0
	t.RollOffset = 0
	t.YawOffset = 0
	t.Sysid = 0
}

func (t *GimbalManagerSetRoi_Request) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerSetRoi_RequestTypeSupport
}

// GimbalManagerSetRoi_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerSetRoi_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerSetRoi_RequestPublisher creates and returns a new publisher for the
// GimbalManagerSetRoi_Request
func NewGimbalManagerSetRoi_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerSetRoi_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerSetRoi_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerSetRoi_RequestPublisher{pub}, nil
}

func (p *GimbalManagerSetRoi_RequestPublisher) Publish(msg *GimbalManagerSetRoi_Request) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerSetRoi_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerSetRoi_RequestSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerSetRoi_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerSetRoi_RequestSubscription.
type GimbalManagerSetRoi_RequestSubscriptionCallback func(msg *GimbalManagerSetRoi_Request, info *rclgo.MessageInfo, err error)

// NewGimbalManagerSetRoi_RequestSubscription creates and returns a new subscription for the
// GimbalManagerSetRoi_Request
func NewGimbalManagerSetRoi_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerSetRoi_RequestSubscriptionCallback) (*GimbalManagerSetRoi_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerSetRoi_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerSetRoi_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerSetRoi_RequestSubscription{sub}, nil
}

func (s *GimbalManagerSetRoi_RequestSubscription) TakeMessage(out *GimbalManagerSetRoi_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerSetRoi_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerSetRoi_RequestSlice(dst, src []GimbalManagerSetRoi_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerSetRoi_RequestTypeSupport types.MessageTypeSupport = _GimbalManagerSetRoi_RequestTypeSupport{}

type _GimbalManagerSetRoi_RequestTypeSupport struct{}

func (t _GimbalManagerSetRoi_RequestTypeSupport) New() types.Message {
	return NewGimbalManagerSetRoi_Request()
}

func (t _GimbalManagerSetRoi_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__GimbalManagerSetRoi_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__GimbalManagerSetRoi_Request__create())
}

func (t _GimbalManagerSetRoi_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__GimbalManagerSetRoi_Request__destroy((*C.mavros_msgs__srv__GimbalManagerSetRoi_Request)(pointer_to_free))
}

func (t _GimbalManagerSetRoi_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerSetRoi_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerSetRoi_Request)(dst)
	mem.mode = C.uint8_t(m.Mode)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
	mem.latitude = C.float(m.Latitude)
	mem.longitude = C.float(m.Longitude)
	mem.altitude = C.float(m.Altitude)
	mem.pitch_offset = C.float(m.PitchOffset)
	mem.roll_offset = C.float(m.RollOffset)
	mem.yaw_offset = C.float(m.YawOffset)
	mem.sysid = C.uint8_t(m.Sysid)
}

func (t _GimbalManagerSetRoi_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerSetRoi_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerSetRoi_Request)(ros2_message_buffer)
	m.Mode = uint8(mem.mode)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
	m.Latitude = float32(mem.latitude)
	m.Longitude = float32(mem.longitude)
	m.Altitude = float32(mem.altitude)
	m.PitchOffset = float32(mem.pitch_offset)
	m.RollOffset = float32(mem.roll_offset)
	m.YawOffset = float32(mem.yaw_offset)
	m.Sysid = uint8(mem.sysid)
}

func (t _GimbalManagerSetRoi_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__GimbalManagerSetRoi_Request())
}

type CGimbalManagerSetRoi_Request = C.mavros_msgs__srv__GimbalManagerSetRoi_Request
type CGimbalManagerSetRoi_Request__Sequence = C.mavros_msgs__srv__GimbalManagerSetRoi_Request__Sequence

func GimbalManagerSetRoi_Request__Sequence_to_Go(goSlice *[]GimbalManagerSetRoi_Request, cSlice CGimbalManagerSetRoi_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerSetRoi_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerSetRoi_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerSetRoi_Request__Sequence_to_C(cSlice *CGimbalManagerSetRoi_Request__Sequence, goSlice []GimbalManagerSetRoi_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__GimbalManagerSetRoi_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__GimbalManagerSetRoi_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerSetRoi_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerSetRoi_Request__Array_to_Go(goSlice []GimbalManagerSetRoi_Request, cSlice []CGimbalManagerSetRoi_Request) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerSetRoi_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerSetRoi_Request__Array_to_C(cSlice []CGimbalManagerSetRoi_Request, goSlice []GimbalManagerSetRoi_Request) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerSetRoi_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
