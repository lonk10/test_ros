// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/waypoint_pull.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/WaypointPull_Response", WaypointPull_ResponseTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/WaypointPull_Response", WaypointPull_ResponseTypeSupport)
}

type WaypointPull_Response struct {
	Success bool `yaml:"success"`
	WpReceived uint32 `yaml:"wp_received"`
}

// NewWaypointPull_Response creates a new WaypointPull_Response with default values.
func NewWaypointPull_Response() *WaypointPull_Response {
	self := WaypointPull_Response{}
	self.SetDefaults()
	return &self
}

func (t *WaypointPull_Response) Clone() *WaypointPull_Response {
	c := &WaypointPull_Response{}
	c.Success = t.Success
	c.WpReceived = t.WpReceived
	return c
}

func (t *WaypointPull_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WaypointPull_Response) SetDefaults() {
	t.Success = false
	t.WpReceived = 0
}

func (t *WaypointPull_Response) GetTypeSupport() types.MessageTypeSupport {
	return WaypointPull_ResponseTypeSupport
}

// WaypointPull_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WaypointPull_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewWaypointPull_ResponsePublisher creates and returns a new publisher for the
// WaypointPull_Response
func NewWaypointPull_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WaypointPull_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, WaypointPull_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointPull_ResponsePublisher{pub}, nil
}

func (p *WaypointPull_ResponsePublisher) Publish(msg *WaypointPull_Response) error {
	return p.Publisher.Publish(msg)
}

// WaypointPull_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WaypointPull_ResponseSubscription struct {
	*rclgo.Subscription
}

// WaypointPull_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a WaypointPull_ResponseSubscription.
type WaypointPull_ResponseSubscriptionCallback func(msg *WaypointPull_Response, info *rclgo.MessageInfo, err error)

// NewWaypointPull_ResponseSubscription creates and returns a new subscription for the
// WaypointPull_Response
func NewWaypointPull_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WaypointPull_ResponseSubscriptionCallback) (*WaypointPull_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WaypointPull_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WaypointPull_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WaypointPull_ResponseSubscription{sub}, nil
}

func (s *WaypointPull_ResponseSubscription) TakeMessage(out *WaypointPull_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWaypointPull_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWaypointPull_ResponseSlice(dst, src []WaypointPull_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WaypointPull_ResponseTypeSupport types.MessageTypeSupport = _WaypointPull_ResponseTypeSupport{}

type _WaypointPull_ResponseTypeSupport struct{}

func (t _WaypointPull_ResponseTypeSupport) New() types.Message {
	return NewWaypointPull_Response()
}

func (t _WaypointPull_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__WaypointPull_Response
	return (unsafe.Pointer)(C.mavros_msgs__srv__WaypointPull_Response__create())
}

func (t _WaypointPull_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__WaypointPull_Response__destroy((*C.mavros_msgs__srv__WaypointPull_Response)(pointer_to_free))
}

func (t _WaypointPull_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WaypointPull_Response)
	mem := (*C.mavros_msgs__srv__WaypointPull_Response)(dst)
	mem.success = C.bool(m.Success)
	mem.wp_received = C.uint32_t(m.WpReceived)
}

func (t _WaypointPull_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WaypointPull_Response)
	mem := (*C.mavros_msgs__srv__WaypointPull_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	m.WpReceived = uint32(mem.wp_received)
}

func (t _WaypointPull_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__WaypointPull_Response())
}

type CWaypointPull_Response = C.mavros_msgs__srv__WaypointPull_Response
type CWaypointPull_Response__Sequence = C.mavros_msgs__srv__WaypointPull_Response__Sequence

func WaypointPull_Response__Sequence_to_Go(goSlice *[]WaypointPull_Response, cSlice CWaypointPull_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WaypointPull_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WaypointPull_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WaypointPull_Response__Sequence_to_C(cSlice *CWaypointPull_Response__Sequence, goSlice []WaypointPull_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__WaypointPull_Response)(C.malloc(C.sizeof_struct_mavros_msgs__srv__WaypointPull_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WaypointPull_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WaypointPull_Response__Array_to_Go(goSlice []WaypointPull_Response, cSlice []CWaypointPull_Response) {
	for i := 0; i < len(cSlice); i++ {
		WaypointPull_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WaypointPull_Response__Array_to_C(cSlice []CWaypointPull_Response, goSlice []WaypointPull_Response) {
	for i := 0; i < len(goSlice); i++ {
		WaypointPull_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
