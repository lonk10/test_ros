// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/gimbal_get_information.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/GimbalGetInformation", GimbalGetInformationTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/GimbalGetInformation", GimbalGetInformationTypeSupport)
}

type _GimbalGetInformationTypeSupport struct {}

func (s _GimbalGetInformationTypeSupport) Request() types.MessageTypeSupport {
	return GimbalGetInformation_RequestTypeSupport
}

func (s _GimbalGetInformationTypeSupport) Response() types.MessageTypeSupport {
	return GimbalGetInformation_ResponseTypeSupport
}

func (s _GimbalGetInformationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__GimbalGetInformation())
}

// Modifying this variable is undefined behavior.
var GimbalGetInformationTypeSupport types.ServiceTypeSupport = _GimbalGetInformationTypeSupport{}

// GimbalGetInformationClient wraps rclgo.Client to provide type safe helper
// functions
type GimbalGetInformationClient struct {
	*rclgo.Client
}

// NewGimbalGetInformationClient creates and returns a new client for the
// GimbalGetInformation
func NewGimbalGetInformationClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*GimbalGetInformationClient, error) {
	client, err := node.NewClient(serviceName, GimbalGetInformationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalGetInformationClient{client}, nil
}

func (s *GimbalGetInformationClient) Send(ctx context.Context, req *GimbalGetInformation_Request) (*GimbalGetInformation_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*GimbalGetInformation_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type GimbalGetInformationServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s GimbalGetInformationServiceResponseSender) SendResponse(resp *GimbalGetInformation_Response) error {
	return s.sender.SendResponse(resp)
}

type GimbalGetInformationServiceRequestHandler func(*rclgo.ServiceInfo, *GimbalGetInformation_Request, GimbalGetInformationServiceResponseSender)

// GimbalGetInformationService wraps rclgo.Service to provide type safe helper
// functions
type GimbalGetInformationService struct {
	*rclgo.Service
}

// NewGimbalGetInformationService creates and returns a new service for the
// GimbalGetInformation
func NewGimbalGetInformationService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler GimbalGetInformationServiceRequestHandler) (*GimbalGetInformationService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*GimbalGetInformation_Request)
		responseSender := GimbalGetInformationServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, GimbalGetInformationTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &GimbalGetInformationService{service}, nil
}