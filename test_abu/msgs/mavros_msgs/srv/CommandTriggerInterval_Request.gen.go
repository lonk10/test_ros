// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_trigger_interval.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandTriggerInterval_Request", CommandTriggerInterval_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandTriggerInterval_Request", CommandTriggerInterval_RequestTypeSupport)
}

type CommandTriggerInterval_Request struct {
	CycleTime float32 `yaml:"cycle_time"`// Trigger cycle_time (interval between to triggers) - set to 0 to ignore command
	IntegrationTime float32 `yaml:"integration_time"`// Camera shutter integration_time - set to 0 to ignore command
}

// NewCommandTriggerInterval_Request creates a new CommandTriggerInterval_Request with default values.
func NewCommandTriggerInterval_Request() *CommandTriggerInterval_Request {
	self := CommandTriggerInterval_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandTriggerInterval_Request) Clone() *CommandTriggerInterval_Request {
	c := &CommandTriggerInterval_Request{}
	c.CycleTime = t.CycleTime
	c.IntegrationTime = t.IntegrationTime
	return c
}

func (t *CommandTriggerInterval_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandTriggerInterval_Request) SetDefaults() {
	t.CycleTime = 0
	t.IntegrationTime = 0
}

func (t *CommandTriggerInterval_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandTriggerInterval_RequestTypeSupport
}

// CommandTriggerInterval_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandTriggerInterval_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandTriggerInterval_RequestPublisher creates and returns a new publisher for the
// CommandTriggerInterval_Request
func NewCommandTriggerInterval_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandTriggerInterval_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandTriggerInterval_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerInterval_RequestPublisher{pub}, nil
}

func (p *CommandTriggerInterval_RequestPublisher) Publish(msg *CommandTriggerInterval_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandTriggerInterval_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandTriggerInterval_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandTriggerInterval_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandTriggerInterval_RequestSubscription.
type CommandTriggerInterval_RequestSubscriptionCallback func(msg *CommandTriggerInterval_Request, info *rclgo.MessageInfo, err error)

// NewCommandTriggerInterval_RequestSubscription creates and returns a new subscription for the
// CommandTriggerInterval_Request
func NewCommandTriggerInterval_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandTriggerInterval_RequestSubscriptionCallback) (*CommandTriggerInterval_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandTriggerInterval_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandTriggerInterval_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerInterval_RequestSubscription{sub}, nil
}

func (s *CommandTriggerInterval_RequestSubscription) TakeMessage(out *CommandTriggerInterval_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandTriggerInterval_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandTriggerInterval_RequestSlice(dst, src []CommandTriggerInterval_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandTriggerInterval_RequestTypeSupport types.MessageTypeSupport = _CommandTriggerInterval_RequestTypeSupport{}

type _CommandTriggerInterval_RequestTypeSupport struct{}

func (t _CommandTriggerInterval_RequestTypeSupport) New() types.Message {
	return NewCommandTriggerInterval_Request()
}

func (t _CommandTriggerInterval_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandTriggerInterval_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandTriggerInterval_Request__create())
}

func (t _CommandTriggerInterval_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandTriggerInterval_Request__destroy((*C.mavros_msgs__srv__CommandTriggerInterval_Request)(pointer_to_free))
}

func (t _CommandTriggerInterval_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandTriggerInterval_Request)
	mem := (*C.mavros_msgs__srv__CommandTriggerInterval_Request)(dst)
	mem.cycle_time = C.float(m.CycleTime)
	mem.integration_time = C.float(m.IntegrationTime)
}

func (t _CommandTriggerInterval_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandTriggerInterval_Request)
	mem := (*C.mavros_msgs__srv__CommandTriggerInterval_Request)(ros2_message_buffer)
	m.CycleTime = float32(mem.cycle_time)
	m.IntegrationTime = float32(mem.integration_time)
}

func (t _CommandTriggerInterval_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandTriggerInterval_Request())
}

type CCommandTriggerInterval_Request = C.mavros_msgs__srv__CommandTriggerInterval_Request
type CCommandTriggerInterval_Request__Sequence = C.mavros_msgs__srv__CommandTriggerInterval_Request__Sequence

func CommandTriggerInterval_Request__Sequence_to_Go(goSlice *[]CommandTriggerInterval_Request, cSlice CCommandTriggerInterval_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandTriggerInterval_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandTriggerInterval_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandTriggerInterval_Request__Sequence_to_C(cSlice *CCommandTriggerInterval_Request__Sequence, goSlice []CommandTriggerInterval_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandTriggerInterval_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandTriggerInterval_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandTriggerInterval_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandTriggerInterval_Request__Array_to_Go(goSlice []CommandTriggerInterval_Request, cSlice []CCommandTriggerInterval_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandTriggerInterval_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandTriggerInterval_Request__Array_to_C(cSlice []CCommandTriggerInterval_Request, goSlice []CommandTriggerInterval_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandTriggerInterval_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
