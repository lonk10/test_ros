// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/waypoint_clear.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/WaypointClear", WaypointClearTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/WaypointClear", WaypointClearTypeSupport)
}

type _WaypointClearTypeSupport struct {}

func (s _WaypointClearTypeSupport) Request() types.MessageTypeSupport {
	return WaypointClear_RequestTypeSupport
}

func (s _WaypointClearTypeSupport) Response() types.MessageTypeSupport {
	return WaypointClear_ResponseTypeSupport
}

func (s _WaypointClearTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__WaypointClear())
}

// Modifying this variable is undefined behavior.
var WaypointClearTypeSupport types.ServiceTypeSupport = _WaypointClearTypeSupport{}

// WaypointClearClient wraps rclgo.Client to provide type safe helper
// functions
type WaypointClearClient struct {
	*rclgo.Client
}

// NewWaypointClearClient creates and returns a new client for the
// WaypointClear
func NewWaypointClearClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*WaypointClearClient, error) {
	client, err := node.NewClient(serviceName, WaypointClearTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointClearClient{client}, nil
}

func (s *WaypointClearClient) Send(ctx context.Context, req *WaypointClear_Request) (*WaypointClear_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*WaypointClear_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type WaypointClearServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s WaypointClearServiceResponseSender) SendResponse(resp *WaypointClear_Response) error {
	return s.sender.SendResponse(resp)
}

type WaypointClearServiceRequestHandler func(*rclgo.ServiceInfo, *WaypointClear_Request, WaypointClearServiceResponseSender)

// WaypointClearService wraps rclgo.Service to provide type safe helper
// functions
type WaypointClearService struct {
	*rclgo.Service
}

// NewWaypointClearService creates and returns a new service for the
// WaypointClear
func NewWaypointClearService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler WaypointClearServiceRequestHandler) (*WaypointClearService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*WaypointClear_Request)
		responseSender := WaypointClearServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, WaypointClearTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &WaypointClearService{service}, nil
}