// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/vehicle_info_get.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/VehicleInfoGet_Request", VehicleInfoGet_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/VehicleInfoGet_Request", VehicleInfoGet_RequestTypeSupport)
}
const (
	VehicleInfoGet_Request_GET_MY_SYSID uint8 = 0
	VehicleInfoGet_Request_GET_MY_COMPID uint8 = 0
)

type VehicleInfoGet_Request struct {
	Sysid uint8 `yaml:"sysid"`
	Compid uint8 `yaml:"compid"`
	GetAll bool `yaml:"get_all"`
}

// NewVehicleInfoGet_Request creates a new VehicleInfoGet_Request with default values.
func NewVehicleInfoGet_Request() *VehicleInfoGet_Request {
	self := VehicleInfoGet_Request{}
	self.SetDefaults()
	return &self
}

func (t *VehicleInfoGet_Request) Clone() *VehicleInfoGet_Request {
	c := &VehicleInfoGet_Request{}
	c.Sysid = t.Sysid
	c.Compid = t.Compid
	c.GetAll = t.GetAll
	return c
}

func (t *VehicleInfoGet_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleInfoGet_Request) SetDefaults() {
	t.Sysid = 0
	t.Compid = 0
	t.GetAll = false
}

func (t *VehicleInfoGet_Request) GetTypeSupport() types.MessageTypeSupport {
	return VehicleInfoGet_RequestTypeSupport
}

// VehicleInfoGet_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleInfoGet_RequestPublisher struct {
	*rclgo.Publisher
}

// NewVehicleInfoGet_RequestPublisher creates and returns a new publisher for the
// VehicleInfoGet_Request
func NewVehicleInfoGet_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleInfoGet_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleInfoGet_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleInfoGet_RequestPublisher{pub}, nil
}

func (p *VehicleInfoGet_RequestPublisher) Publish(msg *VehicleInfoGet_Request) error {
	return p.Publisher.Publish(msg)
}

// VehicleInfoGet_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleInfoGet_RequestSubscription struct {
	*rclgo.Subscription
}

// VehicleInfoGet_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleInfoGet_RequestSubscription.
type VehicleInfoGet_RequestSubscriptionCallback func(msg *VehicleInfoGet_Request, info *rclgo.MessageInfo, err error)

// NewVehicleInfoGet_RequestSubscription creates and returns a new subscription for the
// VehicleInfoGet_Request
func NewVehicleInfoGet_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleInfoGet_RequestSubscriptionCallback) (*VehicleInfoGet_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleInfoGet_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleInfoGet_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleInfoGet_RequestSubscription{sub}, nil
}

func (s *VehicleInfoGet_RequestSubscription) TakeMessage(out *VehicleInfoGet_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleInfoGet_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleInfoGet_RequestSlice(dst, src []VehicleInfoGet_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleInfoGet_RequestTypeSupport types.MessageTypeSupport = _VehicleInfoGet_RequestTypeSupport{}

type _VehicleInfoGet_RequestTypeSupport struct{}

func (t _VehicleInfoGet_RequestTypeSupport) New() types.Message {
	return NewVehicleInfoGet_Request()
}

func (t _VehicleInfoGet_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__VehicleInfoGet_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__VehicleInfoGet_Request__create())
}

func (t _VehicleInfoGet_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__VehicleInfoGet_Request__destroy((*C.mavros_msgs__srv__VehicleInfoGet_Request)(pointer_to_free))
}

func (t _VehicleInfoGet_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleInfoGet_Request)
	mem := (*C.mavros_msgs__srv__VehicleInfoGet_Request)(dst)
	mem.sysid = C.uint8_t(m.Sysid)
	mem.compid = C.uint8_t(m.Compid)
	mem.get_all = C.bool(m.GetAll)
}

func (t _VehicleInfoGet_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleInfoGet_Request)
	mem := (*C.mavros_msgs__srv__VehicleInfoGet_Request)(ros2_message_buffer)
	m.Sysid = uint8(mem.sysid)
	m.Compid = uint8(mem.compid)
	m.GetAll = bool(mem.get_all)
}

func (t _VehicleInfoGet_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__VehicleInfoGet_Request())
}

type CVehicleInfoGet_Request = C.mavros_msgs__srv__VehicleInfoGet_Request
type CVehicleInfoGet_Request__Sequence = C.mavros_msgs__srv__VehicleInfoGet_Request__Sequence

func VehicleInfoGet_Request__Sequence_to_Go(goSlice *[]VehicleInfoGet_Request, cSlice CVehicleInfoGet_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleInfoGet_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleInfoGet_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleInfoGet_Request__Sequence_to_C(cSlice *CVehicleInfoGet_Request__Sequence, goSlice []VehicleInfoGet_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__VehicleInfoGet_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__VehicleInfoGet_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleInfoGet_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleInfoGet_Request__Array_to_Go(goSlice []VehicleInfoGet_Request, cSlice []CVehicleInfoGet_Request) {
	for i := 0; i < len(cSlice); i++ {
		VehicleInfoGet_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleInfoGet_Request__Array_to_C(cSlice []CVehicleInfoGet_Request, goSlice []VehicleInfoGet_Request) {
	for i := 0; i < len(goSlice); i++ {
		VehicleInfoGet_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
