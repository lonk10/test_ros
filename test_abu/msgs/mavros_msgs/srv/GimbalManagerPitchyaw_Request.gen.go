// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/gimbal_manager_pitchyaw.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerPitchyaw_Request", GimbalManagerPitchyaw_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/GimbalManagerPitchyaw_Request", GimbalManagerPitchyaw_RequestTypeSupport)
}
const (
	GimbalManagerPitchyaw_Request_GIMBAL_MANAGER_FLAGS_RETRACT uint32 = 1// Based on GIMBAL_DEVICE_FLAGS_RETRACT. GIMBAL_MANAGER_FLAGS
	GimbalManagerPitchyaw_Request_GIMBAL_MANAGER_FLAGS_NEUTRAL uint32 = 2// Based on GIMBAL_DEVICE_FLAGS_NEUTRAL
	GimbalManagerPitchyaw_Request_GIMBAL_MANAGER_FLAGS_ROLL_LOCK uint32 = 4// Based on GIMBAL_DEVICE_FLAGS_ROLL_LOCK
	GimbalManagerPitchyaw_Request_GIMBAL_MANAGER_FLAGS_PITCH_LOCK uint32 = 8// Based on GIMBAL_DEVICE_FLAGS_PITCH_LOCK
	GimbalManagerPitchyaw_Request_GIMBAL_MANAGER_FLAGS_YAW_LOCK uint32 = 16// Based on GIMBAL_DEVICE_FLAGS_YAW_LOCK
)

type GimbalManagerPitchyaw_Request struct {
	Pitch float32 `yaml:"pitch"`// Pitch angle (positive to pitch up, relative to vehicle for FOLLOW mode, relative to world horizon for LOCK mode). (-180 to 180 deg)
	Yaw float32 `yaml:"yaw"`// Yaw angle (positive to yaw to the right, relative to vehicle for FOLLOW mode, absolute to North for LOCK mode). (-180 to 180 deg)
	PitchRate float32 `yaml:"pitch_rate"`// Pitch rate (positive to pitch up). (deg/s)
	YawRate float32 `yaml:"yaw_rate"`// Yaw rate (positive to yaw to the right). (deg/s)
	Flags uint32 `yaml:"flags"`// High level gimbal manager flags to use - See GIMBAL_MANAGER_FLAGS
	GimbalDeviceId uint8 `yaml:"gimbal_device_id"`// Component ID of gimbal device to address
}

// NewGimbalManagerPitchyaw_Request creates a new GimbalManagerPitchyaw_Request with default values.
func NewGimbalManagerPitchyaw_Request() *GimbalManagerPitchyaw_Request {
	self := GimbalManagerPitchyaw_Request{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerPitchyaw_Request) Clone() *GimbalManagerPitchyaw_Request {
	c := &GimbalManagerPitchyaw_Request{}
	c.Pitch = t.Pitch
	c.Yaw = t.Yaw
	c.PitchRate = t.PitchRate
	c.YawRate = t.YawRate
	c.Flags = t.Flags
	c.GimbalDeviceId = t.GimbalDeviceId
	return c
}

func (t *GimbalManagerPitchyaw_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerPitchyaw_Request) SetDefaults() {
	t.Pitch = 0
	t.Yaw = 0
	t.PitchRate = 0
	t.YawRate = 0
	t.Flags = 0
	t.GimbalDeviceId = 0
}

func (t *GimbalManagerPitchyaw_Request) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerPitchyaw_RequestTypeSupport
}

// GimbalManagerPitchyaw_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerPitchyaw_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerPitchyaw_RequestPublisher creates and returns a new publisher for the
// GimbalManagerPitchyaw_Request
func NewGimbalManagerPitchyaw_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerPitchyaw_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerPitchyaw_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerPitchyaw_RequestPublisher{pub}, nil
}

func (p *GimbalManagerPitchyaw_RequestPublisher) Publish(msg *GimbalManagerPitchyaw_Request) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerPitchyaw_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerPitchyaw_RequestSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerPitchyaw_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerPitchyaw_RequestSubscription.
type GimbalManagerPitchyaw_RequestSubscriptionCallback func(msg *GimbalManagerPitchyaw_Request, info *rclgo.MessageInfo, err error)

// NewGimbalManagerPitchyaw_RequestSubscription creates and returns a new subscription for the
// GimbalManagerPitchyaw_Request
func NewGimbalManagerPitchyaw_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerPitchyaw_RequestSubscriptionCallback) (*GimbalManagerPitchyaw_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerPitchyaw_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerPitchyaw_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerPitchyaw_RequestSubscription{sub}, nil
}

func (s *GimbalManagerPitchyaw_RequestSubscription) TakeMessage(out *GimbalManagerPitchyaw_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerPitchyaw_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerPitchyaw_RequestSlice(dst, src []GimbalManagerPitchyaw_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerPitchyaw_RequestTypeSupport types.MessageTypeSupport = _GimbalManagerPitchyaw_RequestTypeSupport{}

type _GimbalManagerPitchyaw_RequestTypeSupport struct{}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) New() types.Message {
	return NewGimbalManagerPitchyaw_Request()
}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__GimbalManagerPitchyaw_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__GimbalManagerPitchyaw_Request__create())
}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__GimbalManagerPitchyaw_Request__destroy((*C.mavros_msgs__srv__GimbalManagerPitchyaw_Request)(pointer_to_free))
}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerPitchyaw_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerPitchyaw_Request)(dst)
	mem.pitch = C.float(m.Pitch)
	mem.yaw = C.float(m.Yaw)
	mem.pitch_rate = C.float(m.PitchRate)
	mem.yaw_rate = C.float(m.YawRate)
	mem.flags = C.uint32_t(m.Flags)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerPitchyaw_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerPitchyaw_Request)(ros2_message_buffer)
	m.Pitch = float32(mem.pitch)
	m.Yaw = float32(mem.yaw)
	m.PitchRate = float32(mem.pitch_rate)
	m.YawRate = float32(mem.yaw_rate)
	m.Flags = uint32(mem.flags)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
}

func (t _GimbalManagerPitchyaw_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__GimbalManagerPitchyaw_Request())
}

type CGimbalManagerPitchyaw_Request = C.mavros_msgs__srv__GimbalManagerPitchyaw_Request
type CGimbalManagerPitchyaw_Request__Sequence = C.mavros_msgs__srv__GimbalManagerPitchyaw_Request__Sequence

func GimbalManagerPitchyaw_Request__Sequence_to_Go(goSlice *[]GimbalManagerPitchyaw_Request, cSlice CGimbalManagerPitchyaw_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerPitchyaw_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerPitchyaw_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerPitchyaw_Request__Sequence_to_C(cSlice *CGimbalManagerPitchyaw_Request__Sequence, goSlice []GimbalManagerPitchyaw_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__GimbalManagerPitchyaw_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__GimbalManagerPitchyaw_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerPitchyaw_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerPitchyaw_Request__Array_to_Go(goSlice []GimbalManagerPitchyaw_Request, cSlice []CGimbalManagerPitchyaw_Request) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerPitchyaw_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerPitchyaw_Request__Array_to_C(cSlice []CGimbalManagerPitchyaw_Request, goSlice []GimbalManagerPitchyaw_Request) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerPitchyaw_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
