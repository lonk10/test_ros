// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/file_open.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/FileOpen_Request", FileOpen_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/FileOpen_Request", FileOpen_RequestTypeSupport)
}
const (
	FileOpen_Request_MODE_READ uint8 = 0// open for read
	FileOpen_Request_MODE_WRITE uint8 = 1// open for write
	FileOpen_Request_MODE_CREATE uint8 = 2// do creat()
)

type FileOpen_Request struct {
	FilePath string `yaml:"file_path"`
	Mode uint8 `yaml:"mode"`
}

// NewFileOpen_Request creates a new FileOpen_Request with default values.
func NewFileOpen_Request() *FileOpen_Request {
	self := FileOpen_Request{}
	self.SetDefaults()
	return &self
}

func (t *FileOpen_Request) Clone() *FileOpen_Request {
	c := &FileOpen_Request{}
	c.FilePath = t.FilePath
	c.Mode = t.Mode
	return c
}

func (t *FileOpen_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FileOpen_Request) SetDefaults() {
	t.FilePath = ""
	t.Mode = 0
}

func (t *FileOpen_Request) GetTypeSupport() types.MessageTypeSupport {
	return FileOpen_RequestTypeSupport
}

// FileOpen_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FileOpen_RequestPublisher struct {
	*rclgo.Publisher
}

// NewFileOpen_RequestPublisher creates and returns a new publisher for the
// FileOpen_Request
func NewFileOpen_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FileOpen_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FileOpen_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FileOpen_RequestPublisher{pub}, nil
}

func (p *FileOpen_RequestPublisher) Publish(msg *FileOpen_Request) error {
	return p.Publisher.Publish(msg)
}

// FileOpen_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FileOpen_RequestSubscription struct {
	*rclgo.Subscription
}

// FileOpen_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a FileOpen_RequestSubscription.
type FileOpen_RequestSubscriptionCallback func(msg *FileOpen_Request, info *rclgo.MessageInfo, err error)

// NewFileOpen_RequestSubscription creates and returns a new subscription for the
// FileOpen_Request
func NewFileOpen_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FileOpen_RequestSubscriptionCallback) (*FileOpen_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FileOpen_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FileOpen_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FileOpen_RequestSubscription{sub}, nil
}

func (s *FileOpen_RequestSubscription) TakeMessage(out *FileOpen_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFileOpen_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFileOpen_RequestSlice(dst, src []FileOpen_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FileOpen_RequestTypeSupport types.MessageTypeSupport = _FileOpen_RequestTypeSupport{}

type _FileOpen_RequestTypeSupport struct{}

func (t _FileOpen_RequestTypeSupport) New() types.Message {
	return NewFileOpen_Request()
}

func (t _FileOpen_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__FileOpen_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__FileOpen_Request__create())
}

func (t _FileOpen_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__FileOpen_Request__destroy((*C.mavros_msgs__srv__FileOpen_Request)(pointer_to_free))
}

func (t _FileOpen_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FileOpen_Request)
	mem := (*C.mavros_msgs__srv__FileOpen_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.file_path), m.FilePath)
	mem.mode = C.uint8_t(m.Mode)
}

func (t _FileOpen_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FileOpen_Request)
	mem := (*C.mavros_msgs__srv__FileOpen_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.FilePath, unsafe.Pointer(&mem.file_path))
	m.Mode = uint8(mem.mode)
}

func (t _FileOpen_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__FileOpen_Request())
}

type CFileOpen_Request = C.mavros_msgs__srv__FileOpen_Request
type CFileOpen_Request__Sequence = C.mavros_msgs__srv__FileOpen_Request__Sequence

func FileOpen_Request__Sequence_to_Go(goSlice *[]FileOpen_Request, cSlice CFileOpen_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FileOpen_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FileOpen_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FileOpen_Request__Sequence_to_C(cSlice *CFileOpen_Request__Sequence, goSlice []FileOpen_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__FileOpen_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__FileOpen_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FileOpen_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FileOpen_Request__Array_to_Go(goSlice []FileOpen_Request, cSlice []CFileOpen_Request) {
	for i := 0; i < len(cSlice); i++ {
		FileOpen_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FileOpen_Request__Array_to_C(cSlice []CFileOpen_Request, goSlice []FileOpen_Request) {
	for i := 0; i < len(goSlice); i++ {
		FileOpen_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
