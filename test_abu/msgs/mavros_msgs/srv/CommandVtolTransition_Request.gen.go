// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_vtol_transition.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandVtolTransition_Request", CommandVtolTransition_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandVtolTransition_Request", CommandVtolTransition_RequestTypeSupport)
}
const (
	CommandVtolTransition_Request_STATE_MC uint8 = 3// MAV_VTOL_STATE
	CommandVtolTransition_Request_STATE_FW uint8 = 4
)

type CommandVtolTransition_Request struct {
	Header std_msgs_msg.Header `yaml:"header"`
	State uint8 `yaml:"state"`// See enum MAV_VTOL_STATE.
}

// NewCommandVtolTransition_Request creates a new CommandVtolTransition_Request with default values.
func NewCommandVtolTransition_Request() *CommandVtolTransition_Request {
	self := CommandVtolTransition_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandVtolTransition_Request) Clone() *CommandVtolTransition_Request {
	c := &CommandVtolTransition_Request{}
	c.Header = *t.Header.Clone()
	c.State = t.State
	return c
}

func (t *CommandVtolTransition_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandVtolTransition_Request) SetDefaults() {
	t.Header.SetDefaults()
	t.State = 0
}

func (t *CommandVtolTransition_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandVtolTransition_RequestTypeSupport
}

// CommandVtolTransition_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandVtolTransition_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandVtolTransition_RequestPublisher creates and returns a new publisher for the
// CommandVtolTransition_Request
func NewCommandVtolTransition_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandVtolTransition_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandVtolTransition_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandVtolTransition_RequestPublisher{pub}, nil
}

func (p *CommandVtolTransition_RequestPublisher) Publish(msg *CommandVtolTransition_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandVtolTransition_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandVtolTransition_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandVtolTransition_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandVtolTransition_RequestSubscription.
type CommandVtolTransition_RequestSubscriptionCallback func(msg *CommandVtolTransition_Request, info *rclgo.MessageInfo, err error)

// NewCommandVtolTransition_RequestSubscription creates and returns a new subscription for the
// CommandVtolTransition_Request
func NewCommandVtolTransition_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandVtolTransition_RequestSubscriptionCallback) (*CommandVtolTransition_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandVtolTransition_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandVtolTransition_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandVtolTransition_RequestSubscription{sub}, nil
}

func (s *CommandVtolTransition_RequestSubscription) TakeMessage(out *CommandVtolTransition_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandVtolTransition_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandVtolTransition_RequestSlice(dst, src []CommandVtolTransition_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandVtolTransition_RequestTypeSupport types.MessageTypeSupport = _CommandVtolTransition_RequestTypeSupport{}

type _CommandVtolTransition_RequestTypeSupport struct{}

func (t _CommandVtolTransition_RequestTypeSupport) New() types.Message {
	return NewCommandVtolTransition_Request()
}

func (t _CommandVtolTransition_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandVtolTransition_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandVtolTransition_Request__create())
}

func (t _CommandVtolTransition_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandVtolTransition_Request__destroy((*C.mavros_msgs__srv__CommandVtolTransition_Request)(pointer_to_free))
}

func (t _CommandVtolTransition_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandVtolTransition_Request)
	mem := (*C.mavros_msgs__srv__CommandVtolTransition_Request)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.state = C.uint8_t(m.State)
}

func (t _CommandVtolTransition_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandVtolTransition_Request)
	mem := (*C.mavros_msgs__srv__CommandVtolTransition_Request)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.State = uint8(mem.state)
}

func (t _CommandVtolTransition_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandVtolTransition_Request())
}

type CCommandVtolTransition_Request = C.mavros_msgs__srv__CommandVtolTransition_Request
type CCommandVtolTransition_Request__Sequence = C.mavros_msgs__srv__CommandVtolTransition_Request__Sequence

func CommandVtolTransition_Request__Sequence_to_Go(goSlice *[]CommandVtolTransition_Request, cSlice CCommandVtolTransition_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandVtolTransition_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandVtolTransition_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandVtolTransition_Request__Sequence_to_C(cSlice *CCommandVtolTransition_Request__Sequence, goSlice []CommandVtolTransition_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandVtolTransition_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandVtolTransition_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandVtolTransition_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandVtolTransition_Request__Array_to_Go(goSlice []CommandVtolTransition_Request, cSlice []CCommandVtolTransition_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandVtolTransition_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandVtolTransition_Request__Array_to_C(cSlice []CCommandVtolTransition_Request, goSlice []CommandVtolTransition_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandVtolTransition_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
