// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/command_trigger_interval.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/CommandTriggerInterval", CommandTriggerIntervalTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/CommandTriggerInterval", CommandTriggerIntervalTypeSupport)
}

type _CommandTriggerIntervalTypeSupport struct {}

func (s _CommandTriggerIntervalTypeSupport) Request() types.MessageTypeSupport {
	return CommandTriggerInterval_RequestTypeSupport
}

func (s _CommandTriggerIntervalTypeSupport) Response() types.MessageTypeSupport {
	return CommandTriggerInterval_ResponseTypeSupport
}

func (s _CommandTriggerIntervalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__CommandTriggerInterval())
}

// Modifying this variable is undefined behavior.
var CommandTriggerIntervalTypeSupport types.ServiceTypeSupport = _CommandTriggerIntervalTypeSupport{}

// CommandTriggerIntervalClient wraps rclgo.Client to provide type safe helper
// functions
type CommandTriggerIntervalClient struct {
	*rclgo.Client
}

// NewCommandTriggerIntervalClient creates and returns a new client for the
// CommandTriggerInterval
func NewCommandTriggerIntervalClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*CommandTriggerIntervalClient, error) {
	client, err := node.NewClient(serviceName, CommandTriggerIntervalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerIntervalClient{client}, nil
}

func (s *CommandTriggerIntervalClient) Send(ctx context.Context, req *CommandTriggerInterval_Request) (*CommandTriggerInterval_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*CommandTriggerInterval_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type CommandTriggerIntervalServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s CommandTriggerIntervalServiceResponseSender) SendResponse(resp *CommandTriggerInterval_Response) error {
	return s.sender.SendResponse(resp)
}

type CommandTriggerIntervalServiceRequestHandler func(*rclgo.ServiceInfo, *CommandTriggerInterval_Request, CommandTriggerIntervalServiceResponseSender)

// CommandTriggerIntervalService wraps rclgo.Service to provide type safe helper
// functions
type CommandTriggerIntervalService struct {
	*rclgo.Service
}

// NewCommandTriggerIntervalService creates and returns a new service for the
// CommandTriggerInterval
func NewCommandTriggerIntervalService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler CommandTriggerIntervalServiceRequestHandler) (*CommandTriggerIntervalService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*CommandTriggerInterval_Request)
		responseSender := CommandTriggerIntervalServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, CommandTriggerIntervalTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerIntervalService{service}, nil
}