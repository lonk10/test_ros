// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	mavros_msgs_msg "test/msgs/mavros_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/param_set.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ParamSet_Request", ParamSet_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/ParamSet_Request", ParamSet_RequestTypeSupport)
}

type ParamSet_Request struct {
	ParamId string `yaml:"param_id"`
	Value mavros_msgs_msg.ParamValue `yaml:"value"`
}

// NewParamSet_Request creates a new ParamSet_Request with default values.
func NewParamSet_Request() *ParamSet_Request {
	self := ParamSet_Request{}
	self.SetDefaults()
	return &self
}

func (t *ParamSet_Request) Clone() *ParamSet_Request {
	c := &ParamSet_Request{}
	c.ParamId = t.ParamId
	c.Value = *t.Value.Clone()
	return c
}

func (t *ParamSet_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamSet_Request) SetDefaults() {
	t.ParamId = ""
	t.Value.SetDefaults()
}

func (t *ParamSet_Request) GetTypeSupport() types.MessageTypeSupport {
	return ParamSet_RequestTypeSupport
}

// ParamSet_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamSet_RequestPublisher struct {
	*rclgo.Publisher
}

// NewParamSet_RequestPublisher creates and returns a new publisher for the
// ParamSet_Request
func NewParamSet_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamSet_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamSet_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamSet_RequestPublisher{pub}, nil
}

func (p *ParamSet_RequestPublisher) Publish(msg *ParamSet_Request) error {
	return p.Publisher.Publish(msg)
}

// ParamSet_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamSet_RequestSubscription struct {
	*rclgo.Subscription
}

// ParamSet_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ParamSet_RequestSubscription.
type ParamSet_RequestSubscriptionCallback func(msg *ParamSet_Request, info *rclgo.MessageInfo, err error)

// NewParamSet_RequestSubscription creates and returns a new subscription for the
// ParamSet_Request
func NewParamSet_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamSet_RequestSubscriptionCallback) (*ParamSet_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamSet_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamSet_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamSet_RequestSubscription{sub}, nil
}

func (s *ParamSet_RequestSubscription) TakeMessage(out *ParamSet_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamSet_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamSet_RequestSlice(dst, src []ParamSet_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamSet_RequestTypeSupport types.MessageTypeSupport = _ParamSet_RequestTypeSupport{}

type _ParamSet_RequestTypeSupport struct{}

func (t _ParamSet_RequestTypeSupport) New() types.Message {
	return NewParamSet_Request()
}

func (t _ParamSet_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__ParamSet_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__ParamSet_Request__create())
}

func (t _ParamSet_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__ParamSet_Request__destroy((*C.mavros_msgs__srv__ParamSet_Request)(pointer_to_free))
}

func (t _ParamSet_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamSet_Request)
	mem := (*C.mavros_msgs__srv__ParamSet_Request)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.param_id), m.ParamId)
	mavros_msgs_msg.ParamValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
}

func (t _ParamSet_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamSet_Request)
	mem := (*C.mavros_msgs__srv__ParamSet_Request)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.ParamId, unsafe.Pointer(&mem.param_id))
	mavros_msgs_msg.ParamValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _ParamSet_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__ParamSet_Request())
}

type CParamSet_Request = C.mavros_msgs__srv__ParamSet_Request
type CParamSet_Request__Sequence = C.mavros_msgs__srv__ParamSet_Request__Sequence

func ParamSet_Request__Sequence_to_Go(goSlice *[]ParamSet_Request, cSlice CParamSet_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamSet_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamSet_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamSet_Request__Sequence_to_C(cSlice *CParamSet_Request__Sequence, goSlice []ParamSet_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__ParamSet_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__ParamSet_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamSet_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamSet_Request__Array_to_Go(goSlice []ParamSet_Request, cSlice []CParamSet_Request) {
	for i := 0; i < len(cSlice); i++ {
		ParamSet_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamSet_Request__Array_to_C(cSlice []CParamSet_Request, goSlice []ParamSet_Request) {
	for i := 0; i < len(goSlice); i++ {
		ParamSet_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
