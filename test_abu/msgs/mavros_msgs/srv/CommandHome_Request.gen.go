// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_home.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandHome_Request", CommandHome_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandHome_Request", CommandHome_RequestTypeSupport)
}

type CommandHome_Request struct {
	CurrentGps bool `yaml:"current_gps"`
	Yaw float32 `yaml:"yaw"`
	Latitude float32 `yaml:"latitude"`
	Longitude float32 `yaml:"longitude"`
	Altitude float32 `yaml:"altitude"`
}

// NewCommandHome_Request creates a new CommandHome_Request with default values.
func NewCommandHome_Request() *CommandHome_Request {
	self := CommandHome_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandHome_Request) Clone() *CommandHome_Request {
	c := &CommandHome_Request{}
	c.CurrentGps = t.CurrentGps
	c.Yaw = t.Yaw
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.Altitude = t.Altitude
	return c
}

func (t *CommandHome_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandHome_Request) SetDefaults() {
	t.CurrentGps = false
	t.Yaw = 0
	t.Latitude = 0
	t.Longitude = 0
	t.Altitude = 0
}

func (t *CommandHome_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandHome_RequestTypeSupport
}

// CommandHome_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandHome_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandHome_RequestPublisher creates and returns a new publisher for the
// CommandHome_Request
func NewCommandHome_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandHome_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandHome_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandHome_RequestPublisher{pub}, nil
}

func (p *CommandHome_RequestPublisher) Publish(msg *CommandHome_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandHome_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandHome_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandHome_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandHome_RequestSubscription.
type CommandHome_RequestSubscriptionCallback func(msg *CommandHome_Request, info *rclgo.MessageInfo, err error)

// NewCommandHome_RequestSubscription creates and returns a new subscription for the
// CommandHome_Request
func NewCommandHome_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandHome_RequestSubscriptionCallback) (*CommandHome_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandHome_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandHome_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandHome_RequestSubscription{sub}, nil
}

func (s *CommandHome_RequestSubscription) TakeMessage(out *CommandHome_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandHome_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandHome_RequestSlice(dst, src []CommandHome_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandHome_RequestTypeSupport types.MessageTypeSupport = _CommandHome_RequestTypeSupport{}

type _CommandHome_RequestTypeSupport struct{}

func (t _CommandHome_RequestTypeSupport) New() types.Message {
	return NewCommandHome_Request()
}

func (t _CommandHome_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandHome_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandHome_Request__create())
}

func (t _CommandHome_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandHome_Request__destroy((*C.mavros_msgs__srv__CommandHome_Request)(pointer_to_free))
}

func (t _CommandHome_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandHome_Request)
	mem := (*C.mavros_msgs__srv__CommandHome_Request)(dst)
	mem.current_gps = C.bool(m.CurrentGps)
	mem.yaw = C.float(m.Yaw)
	mem.latitude = C.float(m.Latitude)
	mem.longitude = C.float(m.Longitude)
	mem.altitude = C.float(m.Altitude)
}

func (t _CommandHome_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandHome_Request)
	mem := (*C.mavros_msgs__srv__CommandHome_Request)(ros2_message_buffer)
	m.CurrentGps = bool(mem.current_gps)
	m.Yaw = float32(mem.yaw)
	m.Latitude = float32(mem.latitude)
	m.Longitude = float32(mem.longitude)
	m.Altitude = float32(mem.altitude)
}

func (t _CommandHome_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandHome_Request())
}

type CCommandHome_Request = C.mavros_msgs__srv__CommandHome_Request
type CCommandHome_Request__Sequence = C.mavros_msgs__srv__CommandHome_Request__Sequence

func CommandHome_Request__Sequence_to_Go(goSlice *[]CommandHome_Request, cSlice CCommandHome_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandHome_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandHome_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandHome_Request__Sequence_to_C(cSlice *CCommandHome_Request__Sequence, goSlice []CommandHome_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandHome_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandHome_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandHome_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandHome_Request__Array_to_Go(goSlice []CommandHome_Request, cSlice []CCommandHome_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandHome_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandHome_Request__Array_to_C(cSlice []CCommandHome_Request, goSlice []CommandHome_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandHome_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
