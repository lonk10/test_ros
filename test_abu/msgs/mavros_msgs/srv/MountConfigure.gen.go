// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/mount_configure.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/MountConfigure", MountConfigureTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/MountConfigure", MountConfigureTypeSupport)
}

type _MountConfigureTypeSupport struct {}

func (s _MountConfigureTypeSupport) Request() types.MessageTypeSupport {
	return MountConfigure_RequestTypeSupport
}

func (s _MountConfigureTypeSupport) Response() types.MessageTypeSupport {
	return MountConfigure_ResponseTypeSupport
}

func (s _MountConfigureTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__MountConfigure())
}

// Modifying this variable is undefined behavior.
var MountConfigureTypeSupport types.ServiceTypeSupport = _MountConfigureTypeSupport{}

// MountConfigureClient wraps rclgo.Client to provide type safe helper
// functions
type MountConfigureClient struct {
	*rclgo.Client
}

// NewMountConfigureClient creates and returns a new client for the
// MountConfigure
func NewMountConfigureClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*MountConfigureClient, error) {
	client, err := node.NewClient(serviceName, MountConfigureTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MountConfigureClient{client}, nil
}

func (s *MountConfigureClient) Send(ctx context.Context, req *MountConfigure_Request) (*MountConfigure_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*MountConfigure_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type MountConfigureServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s MountConfigureServiceResponseSender) SendResponse(resp *MountConfigure_Response) error {
	return s.sender.SendResponse(resp)
}

type MountConfigureServiceRequestHandler func(*rclgo.ServiceInfo, *MountConfigure_Request, MountConfigureServiceResponseSender)

// MountConfigureService wraps rclgo.Service to provide type safe helper
// functions
type MountConfigureService struct {
	*rclgo.Service
}

// NewMountConfigureService creates and returns a new service for the
// MountConfigure
func NewMountConfigureService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler MountConfigureServiceRequestHandler) (*MountConfigureService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*MountConfigure_Request)
		responseSender := MountConfigureServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, MountConfigureTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &MountConfigureService{service}, nil
}