// Code generated by rclgo-gen. DO NOT EDIT.

package aburos_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <aburos_msgs/msg/abu_rule.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("aburos_msgs/AbuRule", AbuRuleTypeSupport)
	typemap.RegisterMessage("aburos_msgs/msg/AbuRule", AbuRuleTypeSupport)
}

type AbuRule struct {
	Condition string `yaml:"condition"`
	Actions []string `yaml:"actions"`
	LocalResources []byte `yaml:"local_resources"`
	RemoteResources []string `yaml:"remote_resources"`
}

// NewAbuRule creates a new AbuRule with default values.
func NewAbuRule() *AbuRule {
	self := AbuRule{}
	self.SetDefaults()
	return &self
}

func (t *AbuRule) Clone() *AbuRule {
	c := &AbuRule{}
	c.Condition = t.Condition
	if t.Actions != nil {
		c.Actions = make([]string, len(t.Actions))
		copy(c.Actions, t.Actions)
	}
	if t.LocalResources != nil {
		c.LocalResources = make([]byte, len(t.LocalResources))
		copy(c.LocalResources, t.LocalResources)
	}
	if t.RemoteResources != nil {
		c.RemoteResources = make([]string, len(t.RemoteResources))
		copy(c.RemoteResources, t.RemoteResources)
	}
	return c
}

func (t *AbuRule) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AbuRule) SetDefaults() {
	t.Condition = ""
	t.Actions = nil
	t.LocalResources = nil
	t.RemoteResources = nil
}

func (t *AbuRule) GetTypeSupport() types.MessageTypeSupport {
	return AbuRuleTypeSupport
}

// AbuRulePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AbuRulePublisher struct {
	*rclgo.Publisher
}

// NewAbuRulePublisher creates and returns a new publisher for the
// AbuRule
func NewAbuRulePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AbuRulePublisher, error) {
	pub, err := node.NewPublisher(topic_name, AbuRuleTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AbuRulePublisher{pub}, nil
}

func (p *AbuRulePublisher) Publish(msg *AbuRule) error {
	return p.Publisher.Publish(msg)
}

// AbuRuleSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AbuRuleSubscription struct {
	*rclgo.Subscription
}

// AbuRuleSubscriptionCallback type is used to provide a subscription
// handler function for a AbuRuleSubscription.
type AbuRuleSubscriptionCallback func(msg *AbuRule, info *rclgo.MessageInfo, err error)

// NewAbuRuleSubscription creates and returns a new subscription for the
// AbuRule
func NewAbuRuleSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AbuRuleSubscriptionCallback) (*AbuRuleSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AbuRule
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AbuRuleTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AbuRuleSubscription{sub}, nil
}

func (s *AbuRuleSubscription) TakeMessage(out *AbuRule) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAbuRuleSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAbuRuleSlice(dst, src []AbuRule) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AbuRuleTypeSupport types.MessageTypeSupport = _AbuRuleTypeSupport{}

type _AbuRuleTypeSupport struct{}

func (t _AbuRuleTypeSupport) New() types.Message {
	return NewAbuRule()
}

func (t _AbuRuleTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.aburos_msgs__msg__AbuRule
	return (unsafe.Pointer)(C.aburos_msgs__msg__AbuRule__create())
}

func (t _AbuRuleTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.aburos_msgs__msg__AbuRule__destroy((*C.aburos_msgs__msg__AbuRule)(pointer_to_free))
}

func (t _AbuRuleTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AbuRule)
	mem := (*C.aburos_msgs__msg__AbuRule)(dst)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.condition), m.Condition)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.actions)), m.Actions)
	primitives.Byte__Sequence_to_C((*primitives.CByte__Sequence)(unsafe.Pointer(&mem.local_resources)), m.LocalResources)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.remote_resources)), m.RemoteResources)
}

func (t _AbuRuleTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AbuRule)
	mem := (*C.aburos_msgs__msg__AbuRule)(ros2_message_buffer)
	primitives.StringAsGoStruct(&m.Condition, unsafe.Pointer(&mem.condition))
	primitives.String__Sequence_to_Go(&m.Actions, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.actions)))
	primitives.Byte__Sequence_to_Go(&m.LocalResources, *(*primitives.CByte__Sequence)(unsafe.Pointer(&mem.local_resources)))
	primitives.String__Sequence_to_Go(&m.RemoteResources, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.remote_resources)))
}

func (t _AbuRuleTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__aburos_msgs__msg__AbuRule())
}

type CAbuRule = C.aburos_msgs__msg__AbuRule
type CAbuRule__Sequence = C.aburos_msgs__msg__AbuRule__Sequence

func AbuRule__Sequence_to_Go(goSlice *[]AbuRule, cSlice CAbuRule__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AbuRule, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AbuRuleTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AbuRule__Sequence_to_C(cSlice *CAbuRule__Sequence, goSlice []AbuRule) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.aburos_msgs__msg__AbuRule)(C.malloc(C.sizeof_struct_aburos_msgs__msg__AbuRule * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AbuRuleTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AbuRule__Array_to_Go(goSlice []AbuRule, cSlice []CAbuRule) {
	for i := 0; i < len(cSlice); i++ {
		AbuRuleTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AbuRule__Array_to_C(cSlice []CAbuRule, goSlice []AbuRule) {
	for i := 0; i < len(goSlice); i++ {
		AbuRuleTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
