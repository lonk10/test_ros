// Code generated by rclgo-gen. DO NOT EDIT.

package aburos_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <aburos_msgs/msg/abu_bytes.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("aburos_msgs/AbuBytes", AbuBytesTypeSupport)
	typemap.RegisterMessage("aburos_msgs/msg/AbuBytes", AbuBytesTypeSupport)
}

type AbuBytes struct {
	Data []byte `yaml:"data"`
	Origin string `yaml:"origin"`
}

// NewAbuBytes creates a new AbuBytes with default values.
func NewAbuBytes() *AbuBytes {
	self := AbuBytes{}
	self.SetDefaults()
	return &self
}

func (t *AbuBytes) Clone() *AbuBytes {
	c := &AbuBytes{}
	if t.Data != nil {
		c.Data = make([]byte, len(t.Data))
		copy(c.Data, t.Data)
	}
	c.Origin = t.Origin
	return c
}

func (t *AbuBytes) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AbuBytes) SetDefaults() {
	t.Data = nil
	t.Origin = ""
}

func (t *AbuBytes) GetTypeSupport() types.MessageTypeSupport {
	return AbuBytesTypeSupport
}

// AbuBytesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AbuBytesPublisher struct {
	*rclgo.Publisher
}

// NewAbuBytesPublisher creates and returns a new publisher for the
// AbuBytes
func NewAbuBytesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AbuBytesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AbuBytesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AbuBytesPublisher{pub}, nil
}

func (p *AbuBytesPublisher) Publish(msg *AbuBytes) error {
	return p.Publisher.Publish(msg)
}

// AbuBytesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AbuBytesSubscription struct {
	*rclgo.Subscription
}

// AbuBytesSubscriptionCallback type is used to provide a subscription
// handler function for a AbuBytesSubscription.
type AbuBytesSubscriptionCallback func(msg *AbuBytes, info *rclgo.MessageInfo, err error)

// NewAbuBytesSubscription creates and returns a new subscription for the
// AbuBytes
func NewAbuBytesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AbuBytesSubscriptionCallback) (*AbuBytesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AbuBytes
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AbuBytesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AbuBytesSubscription{sub}, nil
}

func (s *AbuBytesSubscription) TakeMessage(out *AbuBytes) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAbuBytesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAbuBytesSlice(dst, src []AbuBytes) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AbuBytesTypeSupport types.MessageTypeSupport = _AbuBytesTypeSupport{}

type _AbuBytesTypeSupport struct{}

func (t _AbuBytesTypeSupport) New() types.Message {
	return NewAbuBytes()
}

func (t _AbuBytesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.aburos_msgs__msg__AbuBytes
	return (unsafe.Pointer)(C.aburos_msgs__msg__AbuBytes__create())
}

func (t _AbuBytesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.aburos_msgs__msg__AbuBytes__destroy((*C.aburos_msgs__msg__AbuBytes)(pointer_to_free))
}

func (t _AbuBytesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AbuBytes)
	mem := (*C.aburos_msgs__msg__AbuBytes)(dst)
	primitives.Byte__Sequence_to_C((*primitives.CByte__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.origin), m.Origin)
}

func (t _AbuBytesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AbuBytes)
	mem := (*C.aburos_msgs__msg__AbuBytes)(ros2_message_buffer)
	primitives.Byte__Sequence_to_Go(&m.Data, *(*primitives.CByte__Sequence)(unsafe.Pointer(&mem.data)))
	primitives.StringAsGoStruct(&m.Origin, unsafe.Pointer(&mem.origin))
}

func (t _AbuBytesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__aburos_msgs__msg__AbuBytes())
}

type CAbuBytes = C.aburos_msgs__msg__AbuBytes
type CAbuBytes__Sequence = C.aburos_msgs__msg__AbuBytes__Sequence

func AbuBytes__Sequence_to_Go(goSlice *[]AbuBytes, cSlice CAbuBytes__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AbuBytes, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AbuBytesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AbuBytes__Sequence_to_C(cSlice *CAbuBytes__Sequence, goSlice []AbuBytes) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.aburos_msgs__msg__AbuBytes)(C.malloc(C.sizeof_struct_aburos_msgs__msg__AbuBytes * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AbuBytesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AbuBytes__Array_to_Go(goSlice []AbuBytes, cSlice []CAbuBytes) {
	for i := 0; i < len(cSlice); i++ {
		AbuBytesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AbuBytes__Array_to_C(cSlice []CAbuBytes, goSlice []AbuBytes) {
	for i := 0; i < len(goSlice); i++ {
		AbuBytesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
