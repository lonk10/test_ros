Running program. Press Ctrl+C to exit...
Created first executer
dev1 update routine
Created second executer
dev2 update routine
dev2 evaluating  to %!s(int64=2)
dev2 evaluating  to %!s(float64=2.72)
Entered discovery
dev2 triggered rule MyGlobalRule
dev2 case append
dev2 case3
dev2 update routine
dev2 case1
dev2 case11
dev2 case111
dev2 case12
dev2 case2
dev2 update routine
published msg
Input done
dev1 Exec func start...
dev1 Exec pool empty...
dev1 Exec func start...
dev1 Exec pool empty...
dev2 Exec func start...
dev2 Exec pool empty...
dev1 Exec func start...
dev1 Exec pool empty...
dev1 lock in take state...
dev1 preparing update in take state...
dev1 sent update in take state...
dev1 case append
dev1 case3
dev1 update routine
dev1 case1
dev1 lock something?...
dev1 take state finish...
foo = 1
bar = octocat
dev2 lock in take state...
dev2 preparing update in take state...
dev2 sent update in take state...
dev2 case append
dev2 case3
dev2 update routine
dev2 case1
dev2 lock something?...
dev2 take state finish...
foo = 2
baz = 2.72
Waiting...
dev2 case12
dev2 case2
dev2 update routine
dev1 case12
dev1 case2
dev1 update routine
dev1 action received
dev1 parsing...
dev1 evaluating...
task.Condition: &{1728989211-25 ext.foo>=this.foo 0xc000183b20 0xc000183ea0 <nil> <nil> 9 false <bool Value> true}
task.Actions: [this.foo=this.foo+ext.foo]
dev1 confirming...
dev1 case append
dev1 case3
dev1 update routine
dev1 case1
dev1 case11
dev1 case111
dev1 confirm done
dev1 case12
dev1 case2
dev1 update routine
wait stop
exec1
dev2 Exec func start...
dev2 Exec pool empty...
exec2
dev2 Exec func start...
dev2 Exec pool empty...
exec3
dev1 Exec func start...
dev1 Exec getting update...
dev1 Exec getting actions...
dev1 Exec removing update...
dev1 Exec applying update...
dev1 evaluating  to %!s(int64=3)
dev1 Exec signaling modification...
dev1 Exec discovery...
Entered discovery
dev1 triggered rule MyLocalRule
dev1 appending task [(foo,6) (bar,gopher)]
dev1 case append
dev1 case3
dev1 update routine
dev1 case1
dev1 case11
dev1 case111
dev1 Exec end...
exec4
dev1 Exec func start...
dev1 Exec getting update...
dev1 Exec getting actions...
dev1 Exec removing update...
dev1 Exec applying update...
dev1 evaluating  to %!s(int64=6)
dev1 evaluating  to gopher
dev1 case12
dev1 Exec signaling modification...
dev1 Exec discovery...
Entered discovery
dev1 triggered rule MyLocalRule
dev1 case2
dev1 update routine
dev1 appending task []
dev1 case append
dev1 case3
dev1 update routine
dev1 case1
dev1 case11
dev1 case111
dev1 Exec end...
Exec done
dev1 lock in take state...
dev1 preparing update in take state...
dev1 case12
dev1 case2
dev1 update routine
dev1 case append
dev1 case3
dev1 update routine
dev1 sent update in take state...
dev1 lock something?...
dev1 case1
dev1 case12
dev1 case2
dev1 update routine
dev1 take state finish...
2foo = 6
2bar = gopher
dev2 lock in take state...
dev2 preparing update in take state...
dev2 sent update in take state...
dev2 case append
dev2 case3
dev2 update routine
dev2 case1
dev2 lock something?...
dev2 take state finish...
2foo = 2
2baz = 2.72
dev2 case12
dev2 case2
dev2 update routine

Received signal: interrupt, exiting...
