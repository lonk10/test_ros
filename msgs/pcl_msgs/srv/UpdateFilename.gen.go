// Code generated by rclgo-gen. DO NOT EDIT.

package pcl_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <pcl_msgs/srv/update_filename.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("pcl_msgs/UpdateFilename", UpdateFilenameTypeSupport)
	typemap.RegisterService("pcl_msgs/srv/UpdateFilename", UpdateFilenameTypeSupport)
}

type _UpdateFilenameTypeSupport struct {}

func (s _UpdateFilenameTypeSupport) Request() types.MessageTypeSupport {
	return UpdateFilename_RequestTypeSupport
}

func (s _UpdateFilenameTypeSupport) Response() types.MessageTypeSupport {
	return UpdateFilename_ResponseTypeSupport
}

func (s _UpdateFilenameTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__pcl_msgs__srv__UpdateFilename())
}

// Modifying this variable is undefined behavior.
var UpdateFilenameTypeSupport types.ServiceTypeSupport = _UpdateFilenameTypeSupport{}

// UpdateFilenameClient wraps rclgo.Client to provide type safe helper
// functions
type UpdateFilenameClient struct {
	*rclgo.Client
}

// NewUpdateFilenameClient creates and returns a new client for the
// UpdateFilename
func NewUpdateFilenameClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*UpdateFilenameClient, error) {
	client, err := node.NewClient(serviceName, UpdateFilenameTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UpdateFilenameClient{client}, nil
}

func (s *UpdateFilenameClient) Send(ctx context.Context, req *UpdateFilename_Request) (*UpdateFilename_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*UpdateFilename_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type UpdateFilenameServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s UpdateFilenameServiceResponseSender) SendResponse(resp *UpdateFilename_Response) error {
	return s.sender.SendResponse(resp)
}

type UpdateFilenameServiceRequestHandler func(*rclgo.ServiceInfo, *UpdateFilename_Request, UpdateFilenameServiceResponseSender)

// UpdateFilenameService wraps rclgo.Service to provide type safe helper
// functions
type UpdateFilenameService struct {
	*rclgo.Service
}

// NewUpdateFilenameService creates and returns a new service for the
// UpdateFilename
func NewUpdateFilenameService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler UpdateFilenameServiceRequestHandler) (*UpdateFilenameService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*UpdateFilename_Request)
		responseSender := UpdateFilenameServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, UpdateFilenameTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &UpdateFilenameService{service}, nil
}