// Code generated by rclgo-gen. DO NOT EDIT.

package pcl_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <pcl_msgs/msg/model_coefficients.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("pcl_msgs/ModelCoefficients", ModelCoefficientsTypeSupport)
	typemap.RegisterMessage("pcl_msgs/msg/ModelCoefficients", ModelCoefficientsTypeSupport)
}

type ModelCoefficients struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Values []float32 `yaml:"values"`
}

// NewModelCoefficients creates a new ModelCoefficients with default values.
func NewModelCoefficients() *ModelCoefficients {
	self := ModelCoefficients{}
	self.SetDefaults()
	return &self
}

func (t *ModelCoefficients) Clone() *ModelCoefficients {
	c := &ModelCoefficients{}
	c.Header = *t.Header.Clone()
	if t.Values != nil {
		c.Values = make([]float32, len(t.Values))
		copy(c.Values, t.Values)
	}
	return c
}

func (t *ModelCoefficients) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ModelCoefficients) SetDefaults() {
	t.Header.SetDefaults()
	t.Values = nil
}

func (t *ModelCoefficients) GetTypeSupport() types.MessageTypeSupport {
	return ModelCoefficientsTypeSupport
}

// ModelCoefficientsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ModelCoefficientsPublisher struct {
	*rclgo.Publisher
}

// NewModelCoefficientsPublisher creates and returns a new publisher for the
// ModelCoefficients
func NewModelCoefficientsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ModelCoefficientsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ModelCoefficientsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ModelCoefficientsPublisher{pub}, nil
}

func (p *ModelCoefficientsPublisher) Publish(msg *ModelCoefficients) error {
	return p.Publisher.Publish(msg)
}

// ModelCoefficientsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ModelCoefficientsSubscription struct {
	*rclgo.Subscription
}

// ModelCoefficientsSubscriptionCallback type is used to provide a subscription
// handler function for a ModelCoefficientsSubscription.
type ModelCoefficientsSubscriptionCallback func(msg *ModelCoefficients, info *rclgo.MessageInfo, err error)

// NewModelCoefficientsSubscription creates and returns a new subscription for the
// ModelCoefficients
func NewModelCoefficientsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ModelCoefficientsSubscriptionCallback) (*ModelCoefficientsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ModelCoefficients
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ModelCoefficientsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ModelCoefficientsSubscription{sub}, nil
}

func (s *ModelCoefficientsSubscription) TakeMessage(out *ModelCoefficients) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneModelCoefficientsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneModelCoefficientsSlice(dst, src []ModelCoefficients) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ModelCoefficientsTypeSupport types.MessageTypeSupport = _ModelCoefficientsTypeSupport{}

type _ModelCoefficientsTypeSupport struct{}

func (t _ModelCoefficientsTypeSupport) New() types.Message {
	return NewModelCoefficients()
}

func (t _ModelCoefficientsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.pcl_msgs__msg__ModelCoefficients
	return (unsafe.Pointer)(C.pcl_msgs__msg__ModelCoefficients__create())
}

func (t _ModelCoefficientsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.pcl_msgs__msg__ModelCoefficients__destroy((*C.pcl_msgs__msg__ModelCoefficients)(pointer_to_free))
}

func (t _ModelCoefficientsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ModelCoefficients)
	mem := (*C.pcl_msgs__msg__ModelCoefficients)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Float32__Sequence_to_C((*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.values)), m.Values)
}

func (t _ModelCoefficientsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ModelCoefficients)
	mem := (*C.pcl_msgs__msg__ModelCoefficients)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Float32__Sequence_to_Go(&m.Values, *(*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.values)))
}

func (t _ModelCoefficientsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__pcl_msgs__msg__ModelCoefficients())
}

type CModelCoefficients = C.pcl_msgs__msg__ModelCoefficients
type CModelCoefficients__Sequence = C.pcl_msgs__msg__ModelCoefficients__Sequence

func ModelCoefficients__Sequence_to_Go(goSlice *[]ModelCoefficients, cSlice CModelCoefficients__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ModelCoefficients, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ModelCoefficientsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ModelCoefficients__Sequence_to_C(cSlice *CModelCoefficients__Sequence, goSlice []ModelCoefficients) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.pcl_msgs__msg__ModelCoefficients)(C.malloc(C.sizeof_struct_pcl_msgs__msg__ModelCoefficients * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ModelCoefficientsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ModelCoefficients__Array_to_Go(goSlice []ModelCoefficients, cSlice []CModelCoefficients) {
	for i := 0; i < len(cSlice); i++ {
		ModelCoefficientsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ModelCoefficients__Array_to_C(cSlice []CModelCoefficients, goSlice []ModelCoefficients) {
	for i := 0; i < len(goSlice); i++ {
		ModelCoefficientsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
