// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_action

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <turtlesim/action/rotate_absolute.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("turtlesim/RotateAbsolute_GetResult", RotateAbsolute_GetResultTypeSupport)
	typemap.RegisterService("turtlesim/action/RotateAbsolute_GetResult", RotateAbsolute_GetResultTypeSupport)
}

type _RotateAbsolute_GetResultTypeSupport struct {}

func (s _RotateAbsolute_GetResultTypeSupport) Request() types.MessageTypeSupport {
	return RotateAbsolute_GetResult_RequestTypeSupport
}

func (s _RotateAbsolute_GetResultTypeSupport) Response() types.MessageTypeSupport {
	return RotateAbsolute_GetResult_ResponseTypeSupport
}

func (s _RotateAbsolute_GetResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__turtlesim__action__RotateAbsolute_GetResult())
}

// Modifying this variable is undefined behavior.
var RotateAbsolute_GetResultTypeSupport types.ServiceTypeSupport = _RotateAbsolute_GetResultTypeSupport{}

// RotateAbsolute_GetResultClient wraps rclgo.Client to provide type safe helper
// functions
type RotateAbsolute_GetResultClient struct {
	*rclgo.Client
}

// NewRotateAbsolute_GetResultClient creates and returns a new client for the
// RotateAbsolute_GetResult
func NewRotateAbsolute_GetResultClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*RotateAbsolute_GetResultClient, error) {
	client, err := node.NewClient(serviceName, RotateAbsolute_GetResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RotateAbsolute_GetResultClient{client}, nil
}

func (s *RotateAbsolute_GetResultClient) Send(ctx context.Context, req *RotateAbsolute_GetResult_Request) (*RotateAbsolute_GetResult_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*RotateAbsolute_GetResult_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type RotateAbsolute_GetResultServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s RotateAbsolute_GetResultServiceResponseSender) SendResponse(resp *RotateAbsolute_GetResult_Response) error {
	return s.sender.SendResponse(resp)
}

type RotateAbsolute_GetResultServiceRequestHandler func(*rclgo.ServiceInfo, *RotateAbsolute_GetResult_Request, RotateAbsolute_GetResultServiceResponseSender)

// RotateAbsolute_GetResultService wraps rclgo.Service to provide type safe helper
// functions
type RotateAbsolute_GetResultService struct {
	*rclgo.Service
}

// NewRotateAbsolute_GetResultService creates and returns a new service for the
// RotateAbsolute_GetResult
func NewRotateAbsolute_GetResultService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler RotateAbsolute_GetResultServiceRequestHandler) (*RotateAbsolute_GetResultService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*RotateAbsolute_GetResult_Request)
		responseSender := RotateAbsolute_GetResultServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, RotateAbsolute_GetResultTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &RotateAbsolute_GetResultService{service}, nil
}