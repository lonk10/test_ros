// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <turtlesim/srv/set_pen.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("turtlesim/SetPen", SetPenTypeSupport)
	typemap.RegisterService("turtlesim/srv/SetPen", SetPenTypeSupport)
}

type _SetPenTypeSupport struct {}

func (s _SetPenTypeSupport) Request() types.MessageTypeSupport {
	return SetPen_RequestTypeSupport
}

func (s _SetPenTypeSupport) Response() types.MessageTypeSupport {
	return SetPen_ResponseTypeSupport
}

func (s _SetPenTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__SetPen())
}

// Modifying this variable is undefined behavior.
var SetPenTypeSupport types.ServiceTypeSupport = _SetPenTypeSupport{}

// SetPenClient wraps rclgo.Client to provide type safe helper
// functions
type SetPenClient struct {
	*rclgo.Client
}

// NewSetPenClient creates and returns a new client for the
// SetPen
func NewSetPenClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SetPenClient, error) {
	client, err := node.NewClient(serviceName, SetPenTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetPenClient{client}, nil
}

func (s *SetPenClient) Send(ctx context.Context, req *SetPen_Request) (*SetPen_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetPen_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetPenServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SetPenServiceResponseSender) SendResponse(resp *SetPen_Response) error {
	return s.sender.SendResponse(resp)
}

type SetPenServiceRequestHandler func(*rclgo.ServiceInfo, *SetPen_Request, SetPenServiceResponseSender)

// SetPenService wraps rclgo.Service to provide type safe helper
// functions
type SetPenService struct {
	*rclgo.Service
}

// NewSetPenService creates and returns a new service for the
// SetPen
func NewSetPenService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SetPenServiceRequestHandler) (*SetPenService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SetPen_Request)
		responseSender := SetPenServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetPenTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetPenService{service}, nil
}