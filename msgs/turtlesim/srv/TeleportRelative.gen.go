// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <turtlesim/srv/teleport_relative.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("turtlesim/TeleportRelative", TeleportRelativeTypeSupport)
	typemap.RegisterService("turtlesim/srv/TeleportRelative", TeleportRelativeTypeSupport)
}

type _TeleportRelativeTypeSupport struct {}

func (s _TeleportRelativeTypeSupport) Request() types.MessageTypeSupport {
	return TeleportRelative_RequestTypeSupport
}

func (s _TeleportRelativeTypeSupport) Response() types.MessageTypeSupport {
	return TeleportRelative_ResponseTypeSupport
}

func (s _TeleportRelativeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__TeleportRelative())
}

// Modifying this variable is undefined behavior.
var TeleportRelativeTypeSupport types.ServiceTypeSupport = _TeleportRelativeTypeSupport{}

// TeleportRelativeClient wraps rclgo.Client to provide type safe helper
// functions
type TeleportRelativeClient struct {
	*rclgo.Client
}

// NewTeleportRelativeClient creates and returns a new client for the
// TeleportRelative
func NewTeleportRelativeClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*TeleportRelativeClient, error) {
	client, err := node.NewClient(serviceName, TeleportRelativeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TeleportRelativeClient{client}, nil
}

func (s *TeleportRelativeClient) Send(ctx context.Context, req *TeleportRelative_Request) (*TeleportRelative_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*TeleportRelative_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type TeleportRelativeServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s TeleportRelativeServiceResponseSender) SendResponse(resp *TeleportRelative_Response) error {
	return s.sender.SendResponse(resp)
}

type TeleportRelativeServiceRequestHandler func(*rclgo.ServiceInfo, *TeleportRelative_Request, TeleportRelativeServiceResponseSender)

// TeleportRelativeService wraps rclgo.Service to provide type safe helper
// functions
type TeleportRelativeService struct {
	*rclgo.Service
}

// NewTeleportRelativeService creates and returns a new service for the
// TeleportRelative
func NewTeleportRelativeService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler TeleportRelativeServiceRequestHandler) (*TeleportRelativeService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*TeleportRelative_Request)
		responseSender := TeleportRelativeServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, TeleportRelativeTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &TeleportRelativeService{service}, nil
}