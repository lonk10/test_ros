// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <turtlesim/srv/kill.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("turtlesim/Kill", KillTypeSupport)
	typemap.RegisterService("turtlesim/srv/Kill", KillTypeSupport)
}

type _KillTypeSupport struct {}

func (s _KillTypeSupport) Request() types.MessageTypeSupport {
	return Kill_RequestTypeSupport
}

func (s _KillTypeSupport) Response() types.MessageTypeSupport {
	return Kill_ResponseTypeSupport
}

func (s _KillTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__turtlesim__srv__Kill())
}

// Modifying this variable is undefined behavior.
var KillTypeSupport types.ServiceTypeSupport = _KillTypeSupport{}

// KillClient wraps rclgo.Client to provide type safe helper
// functions
type KillClient struct {
	*rclgo.Client
}

// NewKillClient creates and returns a new client for the
// Kill
func NewKillClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*KillClient, error) {
	client, err := node.NewClient(serviceName, KillTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &KillClient{client}, nil
}

func (s *KillClient) Send(ctx context.Context, req *Kill_Request) (*Kill_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*Kill_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type KillServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s KillServiceResponseSender) SendResponse(resp *Kill_Response) error {
	return s.sender.SendResponse(resp)
}

type KillServiceRequestHandler func(*rclgo.ServiceInfo, *Kill_Request, KillServiceResponseSender)

// KillService wraps rclgo.Service to provide type safe helper
// functions
type KillService struct {
	*rclgo.Service
}

// NewKillService creates and returns a new service for the
// Kill
func NewKillService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler KillServiceRequestHandler) (*KillService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*Kill_Request)
		responseSender := KillServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, KillTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &KillService{service}, nil
}