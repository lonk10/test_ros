// Code generated by rclgo-gen. DO NOT EDIT.

package turtlesim_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <turtlesim/msg/color.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("turtlesim/Color", ColorTypeSupport)
	typemap.RegisterMessage("turtlesim/msg/Color", ColorTypeSupport)
}

type Color struct {
	R uint8 `yaml:"r"`
	G uint8 `yaml:"g"`
	B uint8 `yaml:"b"`
}

// NewColor creates a new Color with default values.
func NewColor() *Color {
	self := Color{}
	self.SetDefaults()
	return &self
}

func (t *Color) Clone() *Color {
	c := &Color{}
	c.R = t.R
	c.G = t.G
	c.B = t.B
	return c
}

func (t *Color) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Color) SetDefaults() {
	t.R = 0
	t.G = 0
	t.B = 0
}

func (t *Color) GetTypeSupport() types.MessageTypeSupport {
	return ColorTypeSupport
}

// ColorPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ColorPublisher struct {
	*rclgo.Publisher
}

// NewColorPublisher creates and returns a new publisher for the
// Color
func NewColorPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ColorPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ColorTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ColorPublisher{pub}, nil
}

func (p *ColorPublisher) Publish(msg *Color) error {
	return p.Publisher.Publish(msg)
}

// ColorSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ColorSubscription struct {
	*rclgo.Subscription
}

// ColorSubscriptionCallback type is used to provide a subscription
// handler function for a ColorSubscription.
type ColorSubscriptionCallback func(msg *Color, info *rclgo.MessageInfo, err error)

// NewColorSubscription creates and returns a new subscription for the
// Color
func NewColorSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ColorSubscriptionCallback) (*ColorSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Color
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ColorTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ColorSubscription{sub}, nil
}

func (s *ColorSubscription) TakeMessage(out *Color) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneColorSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneColorSlice(dst, src []Color) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ColorTypeSupport types.MessageTypeSupport = _ColorTypeSupport{}

type _ColorTypeSupport struct{}

func (t _ColorTypeSupport) New() types.Message {
	return NewColor()
}

func (t _ColorTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.turtlesim__msg__Color
	return (unsafe.Pointer)(C.turtlesim__msg__Color__create())
}

func (t _ColorTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.turtlesim__msg__Color__destroy((*C.turtlesim__msg__Color)(pointer_to_free))
}

func (t _ColorTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Color)
	mem := (*C.turtlesim__msg__Color)(dst)
	mem.r = C.uint8_t(m.R)
	mem.g = C.uint8_t(m.G)
	mem.b = C.uint8_t(m.B)
}

func (t _ColorTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Color)
	mem := (*C.turtlesim__msg__Color)(ros2_message_buffer)
	m.R = uint8(mem.r)
	m.G = uint8(mem.g)
	m.B = uint8(mem.b)
}

func (t _ColorTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__turtlesim__msg__Color())
}

type CColor = C.turtlesim__msg__Color
type CColor__Sequence = C.turtlesim__msg__Color__Sequence

func Color__Sequence_to_Go(goSlice *[]Color, cSlice CColor__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Color, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ColorTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Color__Sequence_to_C(cSlice *CColor__Sequence, goSlice []Color) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.turtlesim__msg__Color)(C.malloc(C.sizeof_struct_turtlesim__msg__Color * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ColorTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Color__Array_to_Go(goSlice []Color, cSlice []CColor) {
	for i := 0; i < len(cSlice); i++ {
		ColorTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Color__Array_to_C(cSlice []CColor, goSlice []Color) {
	for i := 0; i < len(goSlice); i++ {
		ColorTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
