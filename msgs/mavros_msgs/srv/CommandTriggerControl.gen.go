// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/command_trigger_control.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/CommandTriggerControl", CommandTriggerControlTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/CommandTriggerControl", CommandTriggerControlTypeSupport)
}

type _CommandTriggerControlTypeSupport struct {}

func (s _CommandTriggerControlTypeSupport) Request() types.MessageTypeSupport {
	return CommandTriggerControl_RequestTypeSupport
}

func (s _CommandTriggerControlTypeSupport) Response() types.MessageTypeSupport {
	return CommandTriggerControl_ResponseTypeSupport
}

func (s _CommandTriggerControlTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__CommandTriggerControl())
}

// Modifying this variable is undefined behavior.
var CommandTriggerControlTypeSupport types.ServiceTypeSupport = _CommandTriggerControlTypeSupport{}

// CommandTriggerControlClient wraps rclgo.Client to provide type safe helper
// functions
type CommandTriggerControlClient struct {
	*rclgo.Client
}

// NewCommandTriggerControlClient creates and returns a new client for the
// CommandTriggerControl
func NewCommandTriggerControlClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*CommandTriggerControlClient, error) {
	client, err := node.NewClient(serviceName, CommandTriggerControlTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerControlClient{client}, nil
}

func (s *CommandTriggerControlClient) Send(ctx context.Context, req *CommandTriggerControl_Request) (*CommandTriggerControl_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*CommandTriggerControl_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type CommandTriggerControlServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s CommandTriggerControlServiceResponseSender) SendResponse(resp *CommandTriggerControl_Response) error {
	return s.sender.SendResponse(resp)
}

type CommandTriggerControlServiceRequestHandler func(*rclgo.ServiceInfo, *CommandTriggerControl_Request, CommandTriggerControlServiceResponseSender)

// CommandTriggerControlService wraps rclgo.Service to provide type safe helper
// functions
type CommandTriggerControlService struct {
	*rclgo.Service
}

// NewCommandTriggerControlService creates and returns a new service for the
// CommandTriggerControl
func NewCommandTriggerControlService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler CommandTriggerControlServiceRequestHandler) (*CommandTriggerControlService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*CommandTriggerControl_Request)
		responseSender := CommandTriggerControlServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, CommandTriggerControlTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerControlService{service}, nil
}