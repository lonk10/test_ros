// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/set_mav_frame.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/SetMavFrame_Request", SetMavFrame_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/SetMavFrame_Request", SetMavFrame_RequestTypeSupport)
}
const (
	SetMavFrame_Request_FRAME_GLOBAL uint8 = 0// Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).. [[[cog:import mavros_cogmavros_cog.idl_decl_enum('MAV_FRAME', 'FRAME_')]]]MAV_FRAME
	SetMavFrame_Request_FRAME_LOCAL_NED uint8 = 1// NED local tangent frame (x: North, y: East, z: Down) with origin fixed relative to earth.
	SetMavFrame_Request_FRAME_MISSION uint8 = 2// NOT a coordinate frame, indicates a mission command.
	SetMavFrame_Request_FRAME_GLOBAL_RELATIVE_ALT uint8 = 3// Global (WGS84) coordinate frame + altitude relative to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
	SetMavFrame_Request_FRAME_LOCAL_ENU uint8 = 4// ENU local tangent frame (x: East, y: North, z: Up) with origin fixed relative to earth.
	SetMavFrame_Request_FRAME_GLOBAL_INT uint8 = 5// Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude over mean sea level (MSL).
	SetMavFrame_Request_FRAME_GLOBAL_RELATIVE_ALT_INT uint8 = 6// Global (WGS84) coordinate frame (scaled) + altitude relative to the home position. First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude with 0 being at the altitude of the home location.
	SetMavFrame_Request_FRAME_LOCAL_OFFSET_NED uint8 = 7// NED local tangent frame (x: North, y: East, z: Down) with origin that travels with the vehicle.
	SetMavFrame_Request_FRAME_BODY_NED uint8 = 8// Same as MAV_FRAME_LOCAL_NED when used to represent position values. Same as MAV_FRAME_BODY_FRD when used with velocity/accelaration values.
	SetMavFrame_Request_FRAME_BODY_OFFSET_NED uint8 = 9// This is the same as MAV_FRAME_BODY_FRD.
	SetMavFrame_Request_FRAME_GLOBAL_TERRAIN_ALT uint8 = 10// Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	SetMavFrame_Request_FRAME_GLOBAL_TERRAIN_ALT_INT uint8 = 11// Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*1E7, second value / y: longitude in degrees*1E7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	SetMavFrame_Request_FRAME_BODY_FRD uint8 = 12// FRD local tangent frame (x: Forward, y: Right, z: Down) with origin that travels with vehicle. The forward axis is aligned to the front of the vehicle in the horizontal plane.
	SetMavFrame_Request_FRAME_RESERVED_13 uint8 = 13// MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward, y: Left, z: Up).
	SetMavFrame_Request_FRAME_RESERVED_14 uint8 = 14// MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by a motion capture system, Z-down (x: North, y: East, z: Down).
	SetMavFrame_Request_FRAME_RESERVED_15 uint8 = 15// MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by a motion capture system, Z-up (x: East, y: North, z: Up).
	SetMavFrame_Request_FRAME_RESERVED_16 uint8 = 16// MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: North, y: East, z: Down).
	SetMavFrame_Request_FRAME_RESERVED_17 uint8 = 17// MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: East, y: North, z: Up).
	SetMavFrame_Request_FRAME_RESERVED_18 uint8 = 18// MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: North, y: East, z: Down).
	SetMavFrame_Request_FRAME_RESERVED_19 uint8 = 19// MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: East, y: North, z: Up).
	SetMavFrame_Request_FRAME_LOCAL_FRD uint8 = 20// FRD local tangent frame (x: Forward, y: Right, z: Down) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
	SetMavFrame_Request_FRAME_LOCAL_FLU uint8 = 21// FLU local tangent frame (x: Forward, y: Left, z: Up) with origin fixed relative to earth. The forward axis is aligned to the front of the vehicle in the horizontal plane.
)

type SetMavFrame_Request struct {
	MavFrame uint8 `yaml:"mav_frame"`
}

// NewSetMavFrame_Request creates a new SetMavFrame_Request with default values.
func NewSetMavFrame_Request() *SetMavFrame_Request {
	self := SetMavFrame_Request{}
	self.SetDefaults()
	return &self
}

func (t *SetMavFrame_Request) Clone() *SetMavFrame_Request {
	c := &SetMavFrame_Request{}
	c.MavFrame = t.MavFrame
	return c
}

func (t *SetMavFrame_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SetMavFrame_Request) SetDefaults() {
	t.MavFrame = 0
}

func (t *SetMavFrame_Request) GetTypeSupport() types.MessageTypeSupport {
	return SetMavFrame_RequestTypeSupport
}

// SetMavFrame_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SetMavFrame_RequestPublisher struct {
	*rclgo.Publisher
}

// NewSetMavFrame_RequestPublisher creates and returns a new publisher for the
// SetMavFrame_Request
func NewSetMavFrame_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SetMavFrame_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SetMavFrame_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetMavFrame_RequestPublisher{pub}, nil
}

func (p *SetMavFrame_RequestPublisher) Publish(msg *SetMavFrame_Request) error {
	return p.Publisher.Publish(msg)
}

// SetMavFrame_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SetMavFrame_RequestSubscription struct {
	*rclgo.Subscription
}

// SetMavFrame_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a SetMavFrame_RequestSubscription.
type SetMavFrame_RequestSubscriptionCallback func(msg *SetMavFrame_Request, info *rclgo.MessageInfo, err error)

// NewSetMavFrame_RequestSubscription creates and returns a new subscription for the
// SetMavFrame_Request
func NewSetMavFrame_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SetMavFrame_RequestSubscriptionCallback) (*SetMavFrame_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SetMavFrame_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SetMavFrame_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SetMavFrame_RequestSubscription{sub}, nil
}

func (s *SetMavFrame_RequestSubscription) TakeMessage(out *SetMavFrame_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSetMavFrame_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSetMavFrame_RequestSlice(dst, src []SetMavFrame_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SetMavFrame_RequestTypeSupport types.MessageTypeSupport = _SetMavFrame_RequestTypeSupport{}

type _SetMavFrame_RequestTypeSupport struct{}

func (t _SetMavFrame_RequestTypeSupport) New() types.Message {
	return NewSetMavFrame_Request()
}

func (t _SetMavFrame_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__SetMavFrame_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__SetMavFrame_Request__create())
}

func (t _SetMavFrame_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__SetMavFrame_Request__destroy((*C.mavros_msgs__srv__SetMavFrame_Request)(pointer_to_free))
}

func (t _SetMavFrame_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SetMavFrame_Request)
	mem := (*C.mavros_msgs__srv__SetMavFrame_Request)(dst)
	mem.mav_frame = C.uint8_t(m.MavFrame)
}

func (t _SetMavFrame_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SetMavFrame_Request)
	mem := (*C.mavros_msgs__srv__SetMavFrame_Request)(ros2_message_buffer)
	m.MavFrame = uint8(mem.mav_frame)
}

func (t _SetMavFrame_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__SetMavFrame_Request())
}

type CSetMavFrame_Request = C.mavros_msgs__srv__SetMavFrame_Request
type CSetMavFrame_Request__Sequence = C.mavros_msgs__srv__SetMavFrame_Request__Sequence

func SetMavFrame_Request__Sequence_to_Go(goSlice *[]SetMavFrame_Request, cSlice CSetMavFrame_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SetMavFrame_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SetMavFrame_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SetMavFrame_Request__Sequence_to_C(cSlice *CSetMavFrame_Request__Sequence, goSlice []SetMavFrame_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__SetMavFrame_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__SetMavFrame_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SetMavFrame_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SetMavFrame_Request__Array_to_Go(goSlice []SetMavFrame_Request, cSlice []CSetMavFrame_Request) {
	for i := 0; i < len(cSlice); i++ {
		SetMavFrame_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SetMavFrame_Request__Array_to_C(cSlice []CSetMavFrame_Request, goSlice []SetMavFrame_Request) {
	for i := 0; i < len(goSlice); i++ {
		SetMavFrame_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
