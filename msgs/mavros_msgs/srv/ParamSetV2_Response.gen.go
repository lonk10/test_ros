// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "test/msgs/rcl_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/param_set_v2.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ParamSetV2_Response", ParamSetV2_ResponseTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/ParamSetV2_Response", ParamSetV2_ResponseTypeSupport)
}

type ParamSetV2_Response struct {
	Success bool `yaml:"success"`
	Value rcl_interfaces_msg.ParameterValue `yaml:"value"`
}

// NewParamSetV2_Response creates a new ParamSetV2_Response with default values.
func NewParamSetV2_Response() *ParamSetV2_Response {
	self := ParamSetV2_Response{}
	self.SetDefaults()
	return &self
}

func (t *ParamSetV2_Response) Clone() *ParamSetV2_Response {
	c := &ParamSetV2_Response{}
	c.Success = t.Success
	c.Value = *t.Value.Clone()
	return c
}

func (t *ParamSetV2_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamSetV2_Response) SetDefaults() {
	t.Success = false
	t.Value.SetDefaults()
}

func (t *ParamSetV2_Response) GetTypeSupport() types.MessageTypeSupport {
	return ParamSetV2_ResponseTypeSupport
}

// ParamSetV2_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamSetV2_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewParamSetV2_ResponsePublisher creates and returns a new publisher for the
// ParamSetV2_Response
func NewParamSetV2_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamSetV2_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamSetV2_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamSetV2_ResponsePublisher{pub}, nil
}

func (p *ParamSetV2_ResponsePublisher) Publish(msg *ParamSetV2_Response) error {
	return p.Publisher.Publish(msg)
}

// ParamSetV2_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamSetV2_ResponseSubscription struct {
	*rclgo.Subscription
}

// ParamSetV2_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ParamSetV2_ResponseSubscription.
type ParamSetV2_ResponseSubscriptionCallback func(msg *ParamSetV2_Response, info *rclgo.MessageInfo, err error)

// NewParamSetV2_ResponseSubscription creates and returns a new subscription for the
// ParamSetV2_Response
func NewParamSetV2_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamSetV2_ResponseSubscriptionCallback) (*ParamSetV2_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamSetV2_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamSetV2_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamSetV2_ResponseSubscription{sub}, nil
}

func (s *ParamSetV2_ResponseSubscription) TakeMessage(out *ParamSetV2_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamSetV2_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamSetV2_ResponseSlice(dst, src []ParamSetV2_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamSetV2_ResponseTypeSupport types.MessageTypeSupport = _ParamSetV2_ResponseTypeSupport{}

type _ParamSetV2_ResponseTypeSupport struct{}

func (t _ParamSetV2_ResponseTypeSupport) New() types.Message {
	return NewParamSetV2_Response()
}

func (t _ParamSetV2_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__ParamSetV2_Response
	return (unsafe.Pointer)(C.mavros_msgs__srv__ParamSetV2_Response__create())
}

func (t _ParamSetV2_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__ParamSetV2_Response__destroy((*C.mavros_msgs__srv__ParamSetV2_Response)(pointer_to_free))
}

func (t _ParamSetV2_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamSetV2_Response)
	mem := (*C.mavros_msgs__srv__ParamSetV2_Response)(dst)
	mem.success = C.bool(m.Success)
	rcl_interfaces_msg.ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
}

func (t _ParamSetV2_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamSetV2_Response)
	mem := (*C.mavros_msgs__srv__ParamSetV2_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	rcl_interfaces_msg.ParameterValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _ParamSetV2_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__ParamSetV2_Response())
}

type CParamSetV2_Response = C.mavros_msgs__srv__ParamSetV2_Response
type CParamSetV2_Response__Sequence = C.mavros_msgs__srv__ParamSetV2_Response__Sequence

func ParamSetV2_Response__Sequence_to_Go(goSlice *[]ParamSetV2_Response, cSlice CParamSetV2_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamSetV2_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamSetV2_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamSetV2_Response__Sequence_to_C(cSlice *CParamSetV2_Response__Sequence, goSlice []ParamSetV2_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__ParamSetV2_Response)(C.malloc(C.sizeof_struct_mavros_msgs__srv__ParamSetV2_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamSetV2_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamSetV2_Response__Array_to_Go(goSlice []ParamSetV2_Response, cSlice []CParamSetV2_Response) {
	for i := 0; i < len(cSlice); i++ {
		ParamSetV2_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamSetV2_Response__Array_to_C(cSlice []CParamSetV2_Response, goSlice []ParamSetV2_Response) {
	for i := 0; i < len(goSlice); i++ {
		ParamSetV2_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
