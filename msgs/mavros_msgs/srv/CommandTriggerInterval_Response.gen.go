// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_trigger_interval.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandTriggerInterval_Response", CommandTriggerInterval_ResponseTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandTriggerInterval_Response", CommandTriggerInterval_ResponseTypeSupport)
}

type CommandTriggerInterval_Response struct {
	Success bool `yaml:"success"`
	Result uint8 `yaml:"result"`
}

// NewCommandTriggerInterval_Response creates a new CommandTriggerInterval_Response with default values.
func NewCommandTriggerInterval_Response() *CommandTriggerInterval_Response {
	self := CommandTriggerInterval_Response{}
	self.SetDefaults()
	return &self
}

func (t *CommandTriggerInterval_Response) Clone() *CommandTriggerInterval_Response {
	c := &CommandTriggerInterval_Response{}
	c.Success = t.Success
	c.Result = t.Result
	return c
}

func (t *CommandTriggerInterval_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandTriggerInterval_Response) SetDefaults() {
	t.Success = false
	t.Result = 0
}

func (t *CommandTriggerInterval_Response) GetTypeSupport() types.MessageTypeSupport {
	return CommandTriggerInterval_ResponseTypeSupport
}

// CommandTriggerInterval_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandTriggerInterval_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewCommandTriggerInterval_ResponsePublisher creates and returns a new publisher for the
// CommandTriggerInterval_Response
func NewCommandTriggerInterval_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandTriggerInterval_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandTriggerInterval_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerInterval_ResponsePublisher{pub}, nil
}

func (p *CommandTriggerInterval_ResponsePublisher) Publish(msg *CommandTriggerInterval_Response) error {
	return p.Publisher.Publish(msg)
}

// CommandTriggerInterval_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandTriggerInterval_ResponseSubscription struct {
	*rclgo.Subscription
}

// CommandTriggerInterval_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a CommandTriggerInterval_ResponseSubscription.
type CommandTriggerInterval_ResponseSubscriptionCallback func(msg *CommandTriggerInterval_Response, info *rclgo.MessageInfo, err error)

// NewCommandTriggerInterval_ResponseSubscription creates and returns a new subscription for the
// CommandTriggerInterval_Response
func NewCommandTriggerInterval_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandTriggerInterval_ResponseSubscriptionCallback) (*CommandTriggerInterval_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandTriggerInterval_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandTriggerInterval_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandTriggerInterval_ResponseSubscription{sub}, nil
}

func (s *CommandTriggerInterval_ResponseSubscription) TakeMessage(out *CommandTriggerInterval_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandTriggerInterval_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandTriggerInterval_ResponseSlice(dst, src []CommandTriggerInterval_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandTriggerInterval_ResponseTypeSupport types.MessageTypeSupport = _CommandTriggerInterval_ResponseTypeSupport{}

type _CommandTriggerInterval_ResponseTypeSupport struct{}

func (t _CommandTriggerInterval_ResponseTypeSupport) New() types.Message {
	return NewCommandTriggerInterval_Response()
}

func (t _CommandTriggerInterval_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandTriggerInterval_Response
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandTriggerInterval_Response__create())
}

func (t _CommandTriggerInterval_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandTriggerInterval_Response__destroy((*C.mavros_msgs__srv__CommandTriggerInterval_Response)(pointer_to_free))
}

func (t _CommandTriggerInterval_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandTriggerInterval_Response)
	mem := (*C.mavros_msgs__srv__CommandTriggerInterval_Response)(dst)
	mem.success = C.bool(m.Success)
	mem.result = C.uint8_t(m.Result)
}

func (t _CommandTriggerInterval_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandTriggerInterval_Response)
	mem := (*C.mavros_msgs__srv__CommandTriggerInterval_Response)(ros2_message_buffer)
	m.Success = bool(mem.success)
	m.Result = uint8(mem.result)
}

func (t _CommandTriggerInterval_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandTriggerInterval_Response())
}

type CCommandTriggerInterval_Response = C.mavros_msgs__srv__CommandTriggerInterval_Response
type CCommandTriggerInterval_Response__Sequence = C.mavros_msgs__srv__CommandTriggerInterval_Response__Sequence

func CommandTriggerInterval_Response__Sequence_to_Go(goSlice *[]CommandTriggerInterval_Response, cSlice CCommandTriggerInterval_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandTriggerInterval_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandTriggerInterval_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandTriggerInterval_Response__Sequence_to_C(cSlice *CCommandTriggerInterval_Response__Sequence, goSlice []CommandTriggerInterval_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandTriggerInterval_Response)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandTriggerInterval_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandTriggerInterval_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandTriggerInterval_Response__Array_to_Go(goSlice []CommandTriggerInterval_Response, cSlice []CCommandTriggerInterval_Response) {
	for i := 0; i < len(cSlice); i++ {
		CommandTriggerInterval_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandTriggerInterval_Response__Array_to_C(cSlice []CCommandTriggerInterval_Response, goSlice []CommandTriggerInterval_Response) {
	for i := 0; i < len(goSlice); i++ {
		CommandTriggerInterval_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
