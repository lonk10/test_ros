// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/waypoint_push.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/WaypointPush", WaypointPushTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/WaypointPush", WaypointPushTypeSupport)
}

type _WaypointPushTypeSupport struct {}

func (s _WaypointPushTypeSupport) Request() types.MessageTypeSupport {
	return WaypointPush_RequestTypeSupport
}

func (s _WaypointPushTypeSupport) Response() types.MessageTypeSupport {
	return WaypointPush_ResponseTypeSupport
}

func (s _WaypointPushTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__WaypointPush())
}

// Modifying this variable is undefined behavior.
var WaypointPushTypeSupport types.ServiceTypeSupport = _WaypointPushTypeSupport{}

// WaypointPushClient wraps rclgo.Client to provide type safe helper
// functions
type WaypointPushClient struct {
	*rclgo.Client
}

// NewWaypointPushClient creates and returns a new client for the
// WaypointPush
func NewWaypointPushClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*WaypointPushClient, error) {
	client, err := node.NewClient(serviceName, WaypointPushTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointPushClient{client}, nil
}

func (s *WaypointPushClient) Send(ctx context.Context, req *WaypointPush_Request) (*WaypointPush_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*WaypointPush_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type WaypointPushServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s WaypointPushServiceResponseSender) SendResponse(resp *WaypointPush_Response) error {
	return s.sender.SendResponse(resp)
}

type WaypointPushServiceRequestHandler func(*rclgo.ServiceInfo, *WaypointPush_Request, WaypointPushServiceResponseSender)

// WaypointPushService wraps rclgo.Service to provide type safe helper
// functions
type WaypointPushService struct {
	*rclgo.Service
}

// NewWaypointPushService creates and returns a new service for the
// WaypointPush
func NewWaypointPushService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler WaypointPushServiceRequestHandler) (*WaypointPushService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*WaypointPush_Request)
		responseSender := WaypointPushServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, WaypointPushTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &WaypointPushService{service}, nil
}