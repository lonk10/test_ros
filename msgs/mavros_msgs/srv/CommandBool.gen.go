// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/command_bool.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/CommandBool", CommandBoolTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/CommandBool", CommandBoolTypeSupport)
}

type _CommandBoolTypeSupport struct {}

func (s _CommandBoolTypeSupport) Request() types.MessageTypeSupport {
	return CommandBool_RequestTypeSupport
}

func (s _CommandBoolTypeSupport) Response() types.MessageTypeSupport {
	return CommandBool_ResponseTypeSupport
}

func (s _CommandBoolTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__CommandBool())
}

// Modifying this variable is undefined behavior.
var CommandBoolTypeSupport types.ServiceTypeSupport = _CommandBoolTypeSupport{}

// CommandBoolClient wraps rclgo.Client to provide type safe helper
// functions
type CommandBoolClient struct {
	*rclgo.Client
}

// NewCommandBoolClient creates and returns a new client for the
// CommandBool
func NewCommandBoolClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*CommandBoolClient, error) {
	client, err := node.NewClient(serviceName, CommandBoolTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandBoolClient{client}, nil
}

func (s *CommandBoolClient) Send(ctx context.Context, req *CommandBool_Request) (*CommandBool_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*CommandBool_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type CommandBoolServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s CommandBoolServiceResponseSender) SendResponse(resp *CommandBool_Response) error {
	return s.sender.SendResponse(resp)
}

type CommandBoolServiceRequestHandler func(*rclgo.ServiceInfo, *CommandBool_Request, CommandBoolServiceResponseSender)

// CommandBoolService wraps rclgo.Service to provide type safe helper
// functions
type CommandBoolService struct {
	*rclgo.Service
}

// NewCommandBoolService creates and returns a new service for the
// CommandBool
func NewCommandBoolService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler CommandBoolServiceRequestHandler) (*CommandBoolService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*CommandBool_Request)
		responseSender := CommandBoolServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, CommandBoolTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &CommandBoolService{service}, nil
}