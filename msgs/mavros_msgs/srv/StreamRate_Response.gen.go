// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/stream_rate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/StreamRate_Response", StreamRate_ResponseTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/StreamRate_Response", StreamRate_ResponseTypeSupport)
}

type StreamRate_Response struct {
}

// NewStreamRate_Response creates a new StreamRate_Response with default values.
func NewStreamRate_Response() *StreamRate_Response {
	self := StreamRate_Response{}
	self.SetDefaults()
	return &self
}

func (t *StreamRate_Response) Clone() *StreamRate_Response {
	c := &StreamRate_Response{}
	return c
}

func (t *StreamRate_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *StreamRate_Response) SetDefaults() {
}

func (t *StreamRate_Response) GetTypeSupport() types.MessageTypeSupport {
	return StreamRate_ResponseTypeSupport
}

// StreamRate_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type StreamRate_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewStreamRate_ResponsePublisher creates and returns a new publisher for the
// StreamRate_Response
func NewStreamRate_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*StreamRate_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, StreamRate_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StreamRate_ResponsePublisher{pub}, nil
}

func (p *StreamRate_ResponsePublisher) Publish(msg *StreamRate_Response) error {
	return p.Publisher.Publish(msg)
}

// StreamRate_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type StreamRate_ResponseSubscription struct {
	*rclgo.Subscription
}

// StreamRate_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a StreamRate_ResponseSubscription.
type StreamRate_ResponseSubscriptionCallback func(msg *StreamRate_Response, info *rclgo.MessageInfo, err error)

// NewStreamRate_ResponseSubscription creates and returns a new subscription for the
// StreamRate_Response
func NewStreamRate_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback StreamRate_ResponseSubscriptionCallback) (*StreamRate_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg StreamRate_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, StreamRate_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StreamRate_ResponseSubscription{sub}, nil
}

func (s *StreamRate_ResponseSubscription) TakeMessage(out *StreamRate_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStreamRate_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStreamRate_ResponseSlice(dst, src []StreamRate_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StreamRate_ResponseTypeSupport types.MessageTypeSupport = _StreamRate_ResponseTypeSupport{}

type _StreamRate_ResponseTypeSupport struct{}

func (t _StreamRate_ResponseTypeSupport) New() types.Message {
	return NewStreamRate_Response()
}

func (t _StreamRate_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__StreamRate_Response
	return (unsafe.Pointer)(C.mavros_msgs__srv__StreamRate_Response__create())
}

func (t _StreamRate_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__StreamRate_Response__destroy((*C.mavros_msgs__srv__StreamRate_Response)(pointer_to_free))
}

func (t _StreamRate_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	
}

func (t _StreamRate_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	
}

func (t _StreamRate_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__StreamRate_Response())
}

type CStreamRate_Response = C.mavros_msgs__srv__StreamRate_Response
type CStreamRate_Response__Sequence = C.mavros_msgs__srv__StreamRate_Response__Sequence

func StreamRate_Response__Sequence_to_Go(goSlice *[]StreamRate_Response, cSlice CStreamRate_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]StreamRate_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StreamRate_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func StreamRate_Response__Sequence_to_C(cSlice *CStreamRate_Response__Sequence, goSlice []StreamRate_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__StreamRate_Response)(C.malloc(C.sizeof_struct_mavros_msgs__srv__StreamRate_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StreamRate_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func StreamRate_Response__Array_to_Go(goSlice []StreamRate_Response, cSlice []CStreamRate_Response) {
	for i := 0; i < len(cSlice); i++ {
		StreamRate_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func StreamRate_Response__Array_to_C(cSlice []CStreamRate_Response, goSlice []StreamRate_Response) {
	for i := 0; i < len(goSlice); i++ {
		StreamRate_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
