// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/log_request_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/LogRequestData_Request", LogRequestData_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/LogRequestData_Request", LogRequestData_RequestTypeSupport)
}

type LogRequestData_Request struct {
	Id uint16 `yaml:"id"`
	Offset uint32 `yaml:"offset"`
	Count uint32 `yaml:"count"`
}

// NewLogRequestData_Request creates a new LogRequestData_Request with default values.
func NewLogRequestData_Request() *LogRequestData_Request {
	self := LogRequestData_Request{}
	self.SetDefaults()
	return &self
}

func (t *LogRequestData_Request) Clone() *LogRequestData_Request {
	c := &LogRequestData_Request{}
	c.Id = t.Id
	c.Offset = t.Offset
	c.Count = t.Count
	return c
}

func (t *LogRequestData_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LogRequestData_Request) SetDefaults() {
	t.Id = 0
	t.Offset = 0
	t.Count = 0
}

func (t *LogRequestData_Request) GetTypeSupport() types.MessageTypeSupport {
	return LogRequestData_RequestTypeSupport
}

// LogRequestData_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LogRequestData_RequestPublisher struct {
	*rclgo.Publisher
}

// NewLogRequestData_RequestPublisher creates and returns a new publisher for the
// LogRequestData_Request
func NewLogRequestData_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LogRequestData_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LogRequestData_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LogRequestData_RequestPublisher{pub}, nil
}

func (p *LogRequestData_RequestPublisher) Publish(msg *LogRequestData_Request) error {
	return p.Publisher.Publish(msg)
}

// LogRequestData_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LogRequestData_RequestSubscription struct {
	*rclgo.Subscription
}

// LogRequestData_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a LogRequestData_RequestSubscription.
type LogRequestData_RequestSubscriptionCallback func(msg *LogRequestData_Request, info *rclgo.MessageInfo, err error)

// NewLogRequestData_RequestSubscription creates and returns a new subscription for the
// LogRequestData_Request
func NewLogRequestData_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LogRequestData_RequestSubscriptionCallback) (*LogRequestData_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LogRequestData_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LogRequestData_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LogRequestData_RequestSubscription{sub}, nil
}

func (s *LogRequestData_RequestSubscription) TakeMessage(out *LogRequestData_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLogRequestData_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLogRequestData_RequestSlice(dst, src []LogRequestData_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LogRequestData_RequestTypeSupport types.MessageTypeSupport = _LogRequestData_RequestTypeSupport{}

type _LogRequestData_RequestTypeSupport struct{}

func (t _LogRequestData_RequestTypeSupport) New() types.Message {
	return NewLogRequestData_Request()
}

func (t _LogRequestData_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__LogRequestData_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__LogRequestData_Request__create())
}

func (t _LogRequestData_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__LogRequestData_Request__destroy((*C.mavros_msgs__srv__LogRequestData_Request)(pointer_to_free))
}

func (t _LogRequestData_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LogRequestData_Request)
	mem := (*C.mavros_msgs__srv__LogRequestData_Request)(dst)
	mem.id = C.uint16_t(m.Id)
	mem.offset = C.uint32_t(m.Offset)
	mem.count = C.uint32_t(m.Count)
}

func (t _LogRequestData_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LogRequestData_Request)
	mem := (*C.mavros_msgs__srv__LogRequestData_Request)(ros2_message_buffer)
	m.Id = uint16(mem.id)
	m.Offset = uint32(mem.offset)
	m.Count = uint32(mem.count)
}

func (t _LogRequestData_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__LogRequestData_Request())
}

type CLogRequestData_Request = C.mavros_msgs__srv__LogRequestData_Request
type CLogRequestData_Request__Sequence = C.mavros_msgs__srv__LogRequestData_Request__Sequence

func LogRequestData_Request__Sequence_to_Go(goSlice *[]LogRequestData_Request, cSlice CLogRequestData_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LogRequestData_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LogRequestData_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LogRequestData_Request__Sequence_to_C(cSlice *CLogRequestData_Request__Sequence, goSlice []LogRequestData_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__LogRequestData_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__LogRequestData_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LogRequestData_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LogRequestData_Request__Array_to_Go(goSlice []LogRequestData_Request, cSlice []CLogRequestData_Request) {
	for i := 0; i < len(cSlice); i++ {
		LogRequestData_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LogRequestData_Request__Array_to_C(cSlice []CLogRequestData_Request, goSlice []LogRequestData_Request) {
	for i := 0; i < len(goSlice); i++ {
		LogRequestData_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
