// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_tol_local.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandTOLLocal_Request", CommandTOLLocal_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandTOLLocal_Request", CommandTOLLocal_RequestTypeSupport)
}

type CommandTOLLocal_Request struct {
	MinPitch float32 `yaml:"min_pitch"`// used by takeoff
	Offset float32 `yaml:"offset"`// used by land (landing position accuracy)
	Rate float32 `yaml:"rate"`// speed of takeoff/land in m/s
	Yaw float32 `yaml:"yaw"`// in radians
	Position geometry_msgs_msg.Vector3 `yaml:"position"`// (x,y,z) in meters
}

// NewCommandTOLLocal_Request creates a new CommandTOLLocal_Request with default values.
func NewCommandTOLLocal_Request() *CommandTOLLocal_Request {
	self := CommandTOLLocal_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandTOLLocal_Request) Clone() *CommandTOLLocal_Request {
	c := &CommandTOLLocal_Request{}
	c.MinPitch = t.MinPitch
	c.Offset = t.Offset
	c.Rate = t.Rate
	c.Yaw = t.Yaw
	c.Position = *t.Position.Clone()
	return c
}

func (t *CommandTOLLocal_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandTOLLocal_Request) SetDefaults() {
	t.MinPitch = 0
	t.Offset = 0
	t.Rate = 0
	t.Yaw = 0
	t.Position.SetDefaults()
}

func (t *CommandTOLLocal_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandTOLLocal_RequestTypeSupport
}

// CommandTOLLocal_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandTOLLocal_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandTOLLocal_RequestPublisher creates and returns a new publisher for the
// CommandTOLLocal_Request
func NewCommandTOLLocal_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandTOLLocal_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandTOLLocal_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTOLLocal_RequestPublisher{pub}, nil
}

func (p *CommandTOLLocal_RequestPublisher) Publish(msg *CommandTOLLocal_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandTOLLocal_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandTOLLocal_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandTOLLocal_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandTOLLocal_RequestSubscription.
type CommandTOLLocal_RequestSubscriptionCallback func(msg *CommandTOLLocal_Request, info *rclgo.MessageInfo, err error)

// NewCommandTOLLocal_RequestSubscription creates and returns a new subscription for the
// CommandTOLLocal_Request
func NewCommandTOLLocal_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandTOLLocal_RequestSubscriptionCallback) (*CommandTOLLocal_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandTOLLocal_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandTOLLocal_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandTOLLocal_RequestSubscription{sub}, nil
}

func (s *CommandTOLLocal_RequestSubscription) TakeMessage(out *CommandTOLLocal_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandTOLLocal_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandTOLLocal_RequestSlice(dst, src []CommandTOLLocal_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandTOLLocal_RequestTypeSupport types.MessageTypeSupport = _CommandTOLLocal_RequestTypeSupport{}

type _CommandTOLLocal_RequestTypeSupport struct{}

func (t _CommandTOLLocal_RequestTypeSupport) New() types.Message {
	return NewCommandTOLLocal_Request()
}

func (t _CommandTOLLocal_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandTOLLocal_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandTOLLocal_Request__create())
}

func (t _CommandTOLLocal_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandTOLLocal_Request__destroy((*C.mavros_msgs__srv__CommandTOLLocal_Request)(pointer_to_free))
}

func (t _CommandTOLLocal_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandTOLLocal_Request)
	mem := (*C.mavros_msgs__srv__CommandTOLLocal_Request)(dst)
	mem.min_pitch = C.float(m.MinPitch)
	mem.offset = C.float(m.Offset)
	mem.rate = C.float(m.Rate)
	mem.yaw = C.float(m.Yaw)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.position), &m.Position)
}

func (t _CommandTOLLocal_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandTOLLocal_Request)
	mem := (*C.mavros_msgs__srv__CommandTOLLocal_Request)(ros2_message_buffer)
	m.MinPitch = float32(mem.min_pitch)
	m.Offset = float32(mem.offset)
	m.Rate = float32(mem.rate)
	m.Yaw = float32(mem.yaw)
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Position, unsafe.Pointer(&mem.position))
}

func (t _CommandTOLLocal_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandTOLLocal_Request())
}

type CCommandTOLLocal_Request = C.mavros_msgs__srv__CommandTOLLocal_Request
type CCommandTOLLocal_Request__Sequence = C.mavros_msgs__srv__CommandTOLLocal_Request__Sequence

func CommandTOLLocal_Request__Sequence_to_Go(goSlice *[]CommandTOLLocal_Request, cSlice CCommandTOLLocal_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandTOLLocal_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandTOLLocal_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandTOLLocal_Request__Sequence_to_C(cSlice *CCommandTOLLocal_Request__Sequence, goSlice []CommandTOLLocal_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandTOLLocal_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandTOLLocal_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandTOLLocal_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandTOLLocal_Request__Array_to_Go(goSlice []CommandTOLLocal_Request, cSlice []CCommandTOLLocal_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandTOLLocal_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandTOLLocal_Request__Array_to_C(cSlice []CCommandTOLLocal_Request, goSlice []CommandTOLLocal_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandTOLLocal_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
