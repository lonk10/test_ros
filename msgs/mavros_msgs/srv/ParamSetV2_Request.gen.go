// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	rcl_interfaces_msg "test/msgs/rcl_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/param_set_v2.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ParamSetV2_Request", ParamSetV2_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/ParamSetV2_Request", ParamSetV2_RequestTypeSupport)
}

type ParamSetV2_Request struct {
	ForceSet bool `yaml:"force_set"`
	ParamId string `yaml:"param_id"`
	Value rcl_interfaces_msg.ParameterValue `yaml:"value"`
}

// NewParamSetV2_Request creates a new ParamSetV2_Request with default values.
func NewParamSetV2_Request() *ParamSetV2_Request {
	self := ParamSetV2_Request{}
	self.SetDefaults()
	return &self
}

func (t *ParamSetV2_Request) Clone() *ParamSetV2_Request {
	c := &ParamSetV2_Request{}
	c.ForceSet = t.ForceSet
	c.ParamId = t.ParamId
	c.Value = *t.Value.Clone()
	return c
}

func (t *ParamSetV2_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParamSetV2_Request) SetDefaults() {
	t.ForceSet = false
	t.ParamId = ""
	t.Value.SetDefaults()
}

func (t *ParamSetV2_Request) GetTypeSupport() types.MessageTypeSupport {
	return ParamSetV2_RequestTypeSupport
}

// ParamSetV2_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParamSetV2_RequestPublisher struct {
	*rclgo.Publisher
}

// NewParamSetV2_RequestPublisher creates and returns a new publisher for the
// ParamSetV2_Request
func NewParamSetV2_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParamSetV2_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParamSetV2_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParamSetV2_RequestPublisher{pub}, nil
}

func (p *ParamSetV2_RequestPublisher) Publish(msg *ParamSetV2_Request) error {
	return p.Publisher.Publish(msg)
}

// ParamSetV2_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParamSetV2_RequestSubscription struct {
	*rclgo.Subscription
}

// ParamSetV2_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a ParamSetV2_RequestSubscription.
type ParamSetV2_RequestSubscriptionCallback func(msg *ParamSetV2_Request, info *rclgo.MessageInfo, err error)

// NewParamSetV2_RequestSubscription creates and returns a new subscription for the
// ParamSetV2_Request
func NewParamSetV2_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParamSetV2_RequestSubscriptionCallback) (*ParamSetV2_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParamSetV2_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParamSetV2_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParamSetV2_RequestSubscription{sub}, nil
}

func (s *ParamSetV2_RequestSubscription) TakeMessage(out *ParamSetV2_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParamSetV2_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParamSetV2_RequestSlice(dst, src []ParamSetV2_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParamSetV2_RequestTypeSupport types.MessageTypeSupport = _ParamSetV2_RequestTypeSupport{}

type _ParamSetV2_RequestTypeSupport struct{}

func (t _ParamSetV2_RequestTypeSupport) New() types.Message {
	return NewParamSetV2_Request()
}

func (t _ParamSetV2_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__ParamSetV2_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__ParamSetV2_Request__create())
}

func (t _ParamSetV2_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__ParamSetV2_Request__destroy((*C.mavros_msgs__srv__ParamSetV2_Request)(pointer_to_free))
}

func (t _ParamSetV2_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParamSetV2_Request)
	mem := (*C.mavros_msgs__srv__ParamSetV2_Request)(dst)
	mem.force_set = C.bool(m.ForceSet)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.param_id), m.ParamId)
	rcl_interfaces_msg.ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&mem.value), &m.Value)
}

func (t _ParamSetV2_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParamSetV2_Request)
	mem := (*C.mavros_msgs__srv__ParamSetV2_Request)(ros2_message_buffer)
	m.ForceSet = bool(mem.force_set)
	primitives.StringAsGoStruct(&m.ParamId, unsafe.Pointer(&mem.param_id))
	rcl_interfaces_msg.ParameterValueTypeSupport.AsGoStruct(&m.Value, unsafe.Pointer(&mem.value))
}

func (t _ParamSetV2_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__ParamSetV2_Request())
}

type CParamSetV2_Request = C.mavros_msgs__srv__ParamSetV2_Request
type CParamSetV2_Request__Sequence = C.mavros_msgs__srv__ParamSetV2_Request__Sequence

func ParamSetV2_Request__Sequence_to_Go(goSlice *[]ParamSetV2_Request, cSlice CParamSetV2_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParamSetV2_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParamSetV2_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParamSetV2_Request__Sequence_to_C(cSlice *CParamSetV2_Request__Sequence, goSlice []ParamSetV2_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__ParamSetV2_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__ParamSetV2_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParamSetV2_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParamSetV2_Request__Array_to_Go(goSlice []ParamSetV2_Request, cSlice []CParamSetV2_Request) {
	for i := 0; i < len(cSlice); i++ {
		ParamSetV2_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParamSetV2_Request__Array_to_C(cSlice []CParamSetV2_Request, goSlice []ParamSetV2_Request) {
	for i := 0; i < len(goSlice); i++ {
		ParamSetV2_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
