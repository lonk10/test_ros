// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <mavros_msgs/srv/log_request_list.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("mavros_msgs/LogRequestList", LogRequestListTypeSupport)
	typemap.RegisterService("mavros_msgs/srv/LogRequestList", LogRequestListTypeSupport)
}

type _LogRequestListTypeSupport struct {}

func (s _LogRequestListTypeSupport) Request() types.MessageTypeSupport {
	return LogRequestList_RequestTypeSupport
}

func (s _LogRequestListTypeSupport) Response() types.MessageTypeSupport {
	return LogRequestList_ResponseTypeSupport
}

func (s _LogRequestListTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__mavros_msgs__srv__LogRequestList())
}

// Modifying this variable is undefined behavior.
var LogRequestListTypeSupport types.ServiceTypeSupport = _LogRequestListTypeSupport{}

// LogRequestListClient wraps rclgo.Client to provide type safe helper
// functions
type LogRequestListClient struct {
	*rclgo.Client
}

// NewLogRequestListClient creates and returns a new client for the
// LogRequestList
func NewLogRequestListClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*LogRequestListClient, error) {
	client, err := node.NewClient(serviceName, LogRequestListTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LogRequestListClient{client}, nil
}

func (s *LogRequestListClient) Send(ctx context.Context, req *LogRequestList_Request) (*LogRequestList_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*LogRequestList_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type LogRequestListServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s LogRequestListServiceResponseSender) SendResponse(resp *LogRequestList_Response) error {
	return s.sender.SendResponse(resp)
}

type LogRequestListServiceRequestHandler func(*rclgo.ServiceInfo, *LogRequestList_Request, LogRequestListServiceResponseSender)

// LogRequestListService wraps rclgo.Service to provide type safe helper
// functions
type LogRequestListService struct {
	*rclgo.Service
}

// NewLogRequestListService creates and returns a new service for the
// LogRequestList
func NewLogRequestListService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler LogRequestListServiceRequestHandler) (*LogRequestListService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*LogRequestList_Request)
		responseSender := LogRequestListServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, LogRequestListTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &LogRequestListService{service}, nil
}