// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/command_tol.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CommandTOL_Request", CommandTOL_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/CommandTOL_Request", CommandTOL_RequestTypeSupport)
}

type CommandTOL_Request struct {
	MinPitch float32 `yaml:"min_pitch"`// used by takeoff
	Yaw float32 `yaml:"yaw"`
	Latitude float32 `yaml:"latitude"`
	Longitude float32 `yaml:"longitude"`
	Altitude float32 `yaml:"altitude"`
}

// NewCommandTOL_Request creates a new CommandTOL_Request with default values.
func NewCommandTOL_Request() *CommandTOL_Request {
	self := CommandTOL_Request{}
	self.SetDefaults()
	return &self
}

func (t *CommandTOL_Request) Clone() *CommandTOL_Request {
	c := &CommandTOL_Request{}
	c.MinPitch = t.MinPitch
	c.Yaw = t.Yaw
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	c.Altitude = t.Altitude
	return c
}

func (t *CommandTOL_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CommandTOL_Request) SetDefaults() {
	t.MinPitch = 0
	t.Yaw = 0
	t.Latitude = 0
	t.Longitude = 0
	t.Altitude = 0
}

func (t *CommandTOL_Request) GetTypeSupport() types.MessageTypeSupport {
	return CommandTOL_RequestTypeSupport
}

// CommandTOL_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CommandTOL_RequestPublisher struct {
	*rclgo.Publisher
}

// NewCommandTOL_RequestPublisher creates and returns a new publisher for the
// CommandTOL_Request
func NewCommandTOL_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CommandTOL_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CommandTOL_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CommandTOL_RequestPublisher{pub}, nil
}

func (p *CommandTOL_RequestPublisher) Publish(msg *CommandTOL_Request) error {
	return p.Publisher.Publish(msg)
}

// CommandTOL_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CommandTOL_RequestSubscription struct {
	*rclgo.Subscription
}

// CommandTOL_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a CommandTOL_RequestSubscription.
type CommandTOL_RequestSubscriptionCallback func(msg *CommandTOL_Request, info *rclgo.MessageInfo, err error)

// NewCommandTOL_RequestSubscription creates and returns a new subscription for the
// CommandTOL_Request
func NewCommandTOL_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CommandTOL_RequestSubscriptionCallback) (*CommandTOL_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CommandTOL_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CommandTOL_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CommandTOL_RequestSubscription{sub}, nil
}

func (s *CommandTOL_RequestSubscription) TakeMessage(out *CommandTOL_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCommandTOL_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCommandTOL_RequestSlice(dst, src []CommandTOL_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CommandTOL_RequestTypeSupport types.MessageTypeSupport = _CommandTOL_RequestTypeSupport{}

type _CommandTOL_RequestTypeSupport struct{}

func (t _CommandTOL_RequestTypeSupport) New() types.Message {
	return NewCommandTOL_Request()
}

func (t _CommandTOL_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__CommandTOL_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__CommandTOL_Request__create())
}

func (t _CommandTOL_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__CommandTOL_Request__destroy((*C.mavros_msgs__srv__CommandTOL_Request)(pointer_to_free))
}

func (t _CommandTOL_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CommandTOL_Request)
	mem := (*C.mavros_msgs__srv__CommandTOL_Request)(dst)
	mem.min_pitch = C.float(m.MinPitch)
	mem.yaw = C.float(m.Yaw)
	mem.latitude = C.float(m.Latitude)
	mem.longitude = C.float(m.Longitude)
	mem.altitude = C.float(m.Altitude)
}

func (t _CommandTOL_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CommandTOL_Request)
	mem := (*C.mavros_msgs__srv__CommandTOL_Request)(ros2_message_buffer)
	m.MinPitch = float32(mem.min_pitch)
	m.Yaw = float32(mem.yaw)
	m.Latitude = float32(mem.latitude)
	m.Longitude = float32(mem.longitude)
	m.Altitude = float32(mem.altitude)
}

func (t _CommandTOL_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__CommandTOL_Request())
}

type CCommandTOL_Request = C.mavros_msgs__srv__CommandTOL_Request
type CCommandTOL_Request__Sequence = C.mavros_msgs__srv__CommandTOL_Request__Sequence

func CommandTOL_Request__Sequence_to_Go(goSlice *[]CommandTOL_Request, cSlice CCommandTOL_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CommandTOL_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CommandTOL_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CommandTOL_Request__Sequence_to_C(cSlice *CCommandTOL_Request__Sequence, goSlice []CommandTOL_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__CommandTOL_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__CommandTOL_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CommandTOL_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CommandTOL_Request__Array_to_Go(goSlice []CommandTOL_Request, cSlice []CCommandTOL_Request) {
	for i := 0; i < len(cSlice); i++ {
		CommandTOL_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CommandTOL_Request__Array_to_C(cSlice []CCommandTOL_Request, goSlice []CommandTOL_Request) {
	for i := 0; i < len(goSlice); i++ {
		CommandTOL_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
