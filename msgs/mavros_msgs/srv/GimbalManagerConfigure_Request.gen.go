// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/srv/gimbal_manager_configure.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerConfigure_Request", GimbalManagerConfigure_RequestTypeSupport)
	typemap.RegisterMessage("mavros_msgs/srv/GimbalManagerConfigure_Request", GimbalManagerConfigure_RequestTypeSupport)
}

type GimbalManagerConfigure_Request struct {
	SysidPrimary int16 `yaml:"sysid_primary"`// Sysid for primary control (0: no one in control,
	CompidPrimary int16 `yaml:"compid_primary"`// Compid for primary control (0: no one in control,. -1: leave unchanged, -2: set itself in control(for missions where the own sysid is still unknown),-3: remove control if currently in control).
	SysidSecondary int16 `yaml:"sysid_secondary"`// Sysid for secondary control (0: no one in control,. -1: leave unchanged, -2: set itself in control(for missions where the own sysid is still unknown),-3: remove control if currently in control).
	CompidSecondary int16 `yaml:"compid_secondary"`// Compid for secondary control (0: no one in control,. -1: leave unchanged, -2: set itself in control(for missions where the own sysid is still unknown),-3: remove control if currently in control).
	GimbalDeviceId uint8 `yaml:"gimbal_device_id"`// Component ID of gimbal device to address
}

// NewGimbalManagerConfigure_Request creates a new GimbalManagerConfigure_Request with default values.
func NewGimbalManagerConfigure_Request() *GimbalManagerConfigure_Request {
	self := GimbalManagerConfigure_Request{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerConfigure_Request) Clone() *GimbalManagerConfigure_Request {
	c := &GimbalManagerConfigure_Request{}
	c.SysidPrimary = t.SysidPrimary
	c.CompidPrimary = t.CompidPrimary
	c.SysidSecondary = t.SysidSecondary
	c.CompidSecondary = t.CompidSecondary
	c.GimbalDeviceId = t.GimbalDeviceId
	return c
}

func (t *GimbalManagerConfigure_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerConfigure_Request) SetDefaults() {
	t.SysidPrimary = 0
	t.CompidPrimary = 0
	t.SysidSecondary = 0
	t.CompidSecondary = 0
	t.GimbalDeviceId = 0
}

func (t *GimbalManagerConfigure_Request) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerConfigure_RequestTypeSupport
}

// GimbalManagerConfigure_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerConfigure_RequestPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerConfigure_RequestPublisher creates and returns a new publisher for the
// GimbalManagerConfigure_Request
func NewGimbalManagerConfigure_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerConfigure_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerConfigure_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerConfigure_RequestPublisher{pub}, nil
}

func (p *GimbalManagerConfigure_RequestPublisher) Publish(msg *GimbalManagerConfigure_Request) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerConfigure_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerConfigure_RequestSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerConfigure_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerConfigure_RequestSubscription.
type GimbalManagerConfigure_RequestSubscriptionCallback func(msg *GimbalManagerConfigure_Request, info *rclgo.MessageInfo, err error)

// NewGimbalManagerConfigure_RequestSubscription creates and returns a new subscription for the
// GimbalManagerConfigure_Request
func NewGimbalManagerConfigure_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerConfigure_RequestSubscriptionCallback) (*GimbalManagerConfigure_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerConfigure_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerConfigure_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerConfigure_RequestSubscription{sub}, nil
}

func (s *GimbalManagerConfigure_RequestSubscription) TakeMessage(out *GimbalManagerConfigure_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerConfigure_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerConfigure_RequestSlice(dst, src []GimbalManagerConfigure_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerConfigure_RequestTypeSupport types.MessageTypeSupport = _GimbalManagerConfigure_RequestTypeSupport{}

type _GimbalManagerConfigure_RequestTypeSupport struct{}

func (t _GimbalManagerConfigure_RequestTypeSupport) New() types.Message {
	return NewGimbalManagerConfigure_Request()
}

func (t _GimbalManagerConfigure_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__srv__GimbalManagerConfigure_Request
	return (unsafe.Pointer)(C.mavros_msgs__srv__GimbalManagerConfigure_Request__create())
}

func (t _GimbalManagerConfigure_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__srv__GimbalManagerConfigure_Request__destroy((*C.mavros_msgs__srv__GimbalManagerConfigure_Request)(pointer_to_free))
}

func (t _GimbalManagerConfigure_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerConfigure_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerConfigure_Request)(dst)
	mem.sysid_primary = C.int16_t(m.SysidPrimary)
	mem.compid_primary = C.int16_t(m.CompidPrimary)
	mem.sysid_secondary = C.int16_t(m.SysidSecondary)
	mem.compid_secondary = C.int16_t(m.CompidSecondary)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
}

func (t _GimbalManagerConfigure_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerConfigure_Request)
	mem := (*C.mavros_msgs__srv__GimbalManagerConfigure_Request)(ros2_message_buffer)
	m.SysidPrimary = int16(mem.sysid_primary)
	m.CompidPrimary = int16(mem.compid_primary)
	m.SysidSecondary = int16(mem.sysid_secondary)
	m.CompidSecondary = int16(mem.compid_secondary)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
}

func (t _GimbalManagerConfigure_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__srv__GimbalManagerConfigure_Request())
}

type CGimbalManagerConfigure_Request = C.mavros_msgs__srv__GimbalManagerConfigure_Request
type CGimbalManagerConfigure_Request__Sequence = C.mavros_msgs__srv__GimbalManagerConfigure_Request__Sequence

func GimbalManagerConfigure_Request__Sequence_to_Go(goSlice *[]GimbalManagerConfigure_Request, cSlice CGimbalManagerConfigure_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerConfigure_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerConfigure_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerConfigure_Request__Sequence_to_C(cSlice *CGimbalManagerConfigure_Request__Sequence, goSlice []GimbalManagerConfigure_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__srv__GimbalManagerConfigure_Request)(C.malloc(C.sizeof_struct_mavros_msgs__srv__GimbalManagerConfigure_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerConfigure_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerConfigure_Request__Array_to_Go(goSlice []GimbalManagerConfigure_Request, cSlice []CGimbalManagerConfigure_Request) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerConfigure_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerConfigure_Request__Array_to_C(cSlice []CGimbalManagerConfigure_Request, goSlice []GimbalManagerConfigure_Request) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerConfigure_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
