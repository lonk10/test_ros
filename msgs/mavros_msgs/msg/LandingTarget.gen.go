// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/landing_target.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/LandingTarget", LandingTargetTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/LandingTarget", LandingTargetTypeSupport)
}
const (
	LandingTarget_GLOBAL uint8 = 0// Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL). # MAV_FRAME enum
	LandingTarget_LOCAL_NED uint8 = 2// Local coordinate frame, Z-up (x: north, y: east, z: down).
	LandingTarget_MISSION uint8 = 3// NOT a coordinate frame, indicates a mission command.
	LandingTarget_GLOBAL_RELATIVE_ALT uint8 = 4// Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
	LandingTarget_LOCAL_ENU uint8 = 5// Local coordinate frame, Z-down (x: east, y: north, z: up)
	LandingTarget_GLOBAL_INT uint8 = 6// Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)
	LandingTarget_GLOBAL_RELATIVE_ALT_INT uint8 = 7// Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
	LandingTarget_LOCAL_OFFSET_NED uint8 = 8// Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
	LandingTarget_BODY_NED uint8 = 9// Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
	LandingTarget_BODY_OFFSET_NED uint8 = 10// Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
	LandingTarget_GLOBAL_TERRAIN_ALT uint8 = 11// Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	LandingTarget_GLOBAL_TERRAIN_ALT_INT uint8 = 12// Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	LandingTarget_LIGHT_BEACON uint8 = 0// Landing target signaled by light beacon (ex: IR-LOCK). # LANDING_TARGET_TYPE enum
	LandingTarget_RADIO_BEACON uint8 = 1// Landing target signaled by radio beacon (ex: ILS, NDB)
	LandingTarget_VISION_FIDUCIAL uint8 = 2// Landing target represented by a fiducial marker (ex: ARTag)
	LandingTarget_VISION_OTHER uint8 = 3// Landing target represented by a pre-defined visual shape/feature (ex: X-marker, H-marker, square)
)

type LandingTarget struct {
	Header std_msgs_msg.Header `yaml:"header"`
	TargetNum uint8 `yaml:"target_num"`
	Frame uint8 `yaml:"frame"`
	Angle [2]float32 `yaml:"angle"`
	Distance float32 `yaml:"distance"`
	Size [2]float32 `yaml:"size"`
	Pose geometry_msgs_msg.Pose `yaml:"pose"`
	Type uint8 `yaml:"type"`
}

// NewLandingTarget creates a new LandingTarget with default values.
func NewLandingTarget() *LandingTarget {
	self := LandingTarget{}
	self.SetDefaults()
	return &self
}

func (t *LandingTarget) Clone() *LandingTarget {
	c := &LandingTarget{}
	c.Header = *t.Header.Clone()
	c.TargetNum = t.TargetNum
	c.Frame = t.Frame
	c.Angle = t.Angle
	c.Distance = t.Distance
	c.Size = t.Size
	c.Pose = *t.Pose.Clone()
	c.Type = t.Type
	return c
}

func (t *LandingTarget) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LandingTarget) SetDefaults() {
	t.Header.SetDefaults()
	t.TargetNum = 0
	t.Frame = 0
	t.Angle = [2]float32{}
	t.Distance = 0
	t.Size = [2]float32{}
	t.Pose.SetDefaults()
	t.Type = 0
}

func (t *LandingTarget) GetTypeSupport() types.MessageTypeSupport {
	return LandingTargetTypeSupport
}

// LandingTargetPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LandingTargetPublisher struct {
	*rclgo.Publisher
}

// NewLandingTargetPublisher creates and returns a new publisher for the
// LandingTarget
func NewLandingTargetPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LandingTargetPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LandingTargetTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LandingTargetPublisher{pub}, nil
}

func (p *LandingTargetPublisher) Publish(msg *LandingTarget) error {
	return p.Publisher.Publish(msg)
}

// LandingTargetSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LandingTargetSubscription struct {
	*rclgo.Subscription
}

// LandingTargetSubscriptionCallback type is used to provide a subscription
// handler function for a LandingTargetSubscription.
type LandingTargetSubscriptionCallback func(msg *LandingTarget, info *rclgo.MessageInfo, err error)

// NewLandingTargetSubscription creates and returns a new subscription for the
// LandingTarget
func NewLandingTargetSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LandingTargetSubscriptionCallback) (*LandingTargetSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LandingTarget
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LandingTargetTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LandingTargetSubscription{sub}, nil
}

func (s *LandingTargetSubscription) TakeMessage(out *LandingTarget) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLandingTargetSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLandingTargetSlice(dst, src []LandingTarget) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LandingTargetTypeSupport types.MessageTypeSupport = _LandingTargetTypeSupport{}

type _LandingTargetTypeSupport struct{}

func (t _LandingTargetTypeSupport) New() types.Message {
	return NewLandingTarget()
}

func (t _LandingTargetTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__LandingTarget
	return (unsafe.Pointer)(C.mavros_msgs__msg__LandingTarget__create())
}

func (t _LandingTargetTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__LandingTarget__destroy((*C.mavros_msgs__msg__LandingTarget)(pointer_to_free))
}

func (t _LandingTargetTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LandingTarget)
	mem := (*C.mavros_msgs__msg__LandingTarget)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.target_num = C.uint8_t(m.TargetNum)
	mem.frame = C.uint8_t(m.Frame)
	cSlice_angle := mem.angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_angle)), m.Angle[:])
	mem.distance = C.float(m.Distance)
	cSlice_size := mem.size[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_size)), m.Size[:])
	geometry_msgs_msg.PoseTypeSupport.AsCStruct(unsafe.Pointer(&mem.pose), &m.Pose)
	mem._type = C.uint8_t(m.Type)
}

func (t _LandingTargetTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LandingTarget)
	mem := (*C.mavros_msgs__msg__LandingTarget)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.TargetNum = uint8(mem.target_num)
	m.Frame = uint8(mem.frame)
	cSlice_angle := mem.angle[:]
	primitives.Float32__Array_to_Go(m.Angle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_angle)))
	m.Distance = float32(mem.distance)
	cSlice_size := mem.size[:]
	primitives.Float32__Array_to_Go(m.Size[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_size)))
	geometry_msgs_msg.PoseTypeSupport.AsGoStruct(&m.Pose, unsafe.Pointer(&mem.pose))
	m.Type = uint8(mem._type)
}

func (t _LandingTargetTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__LandingTarget())
}

type CLandingTarget = C.mavros_msgs__msg__LandingTarget
type CLandingTarget__Sequence = C.mavros_msgs__msg__LandingTarget__Sequence

func LandingTarget__Sequence_to_Go(goSlice *[]LandingTarget, cSlice CLandingTarget__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LandingTarget, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LandingTargetTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LandingTarget__Sequence_to_C(cSlice *CLandingTarget__Sequence, goSlice []LandingTarget) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__LandingTarget)(C.malloc(C.sizeof_struct_mavros_msgs__msg__LandingTarget * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LandingTargetTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LandingTarget__Array_to_Go(goSlice []LandingTarget, cSlice []CLandingTarget) {
	for i := 0; i < len(cSlice); i++ {
		LandingTargetTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LandingTarget__Array_to_C(cSlice []CLandingTarget, goSlice []LandingTarget) {
	for i := 0; i < len(goSlice); i++ {
		LandingTargetTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
