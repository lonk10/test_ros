// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/gimbal_manager_information.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalManagerInformation", GimbalManagerInformationTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/GimbalManagerInformation", GimbalManagerInformationTypeSupport)
}
const (
	GimbalManagerInformation_CAP_FLAGS_HAS_RETRACT uint32 = 1// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT.. GIMBAL_MANAGER_CAP_FLAGS
	GimbalManagerInformation_CAP_FLAGS_HAS_NEUTRAL uint32 = 2// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL.
	GimbalManagerInformation_CAP_FLAGS_HAS_ROLL_AXIS uint32 = 4// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS.
	GimbalManagerInformation_CAP_FLAGS_HAS_ROLL_FOLLOW uint32 = 8// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW.
	GimbalManagerInformation_CAP_FLAGS_HAS_ROLL_LOCK uint32 = 16// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK.
	GimbalManagerInformation_CAP_FLAGS_HAS_PITCH_AXIS uint32 = 32// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS.
	GimbalManagerInformation_CAP_FLAGS_HAS_PITCH_FOLLOW uint32 = 64// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW.
	GimbalManagerInformation_CAP_FLAGS_HAS_PITCH_LOCK uint32 = 128// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK.
	GimbalManagerInformation_CAP_FLAGS_HAS_YAW_AXIS uint32 = 256// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS.
	GimbalManagerInformation_CAP_FLAGS_HAS_YAW_FOLLOW uint32 = 512// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW.
	GimbalManagerInformation_CAP_FLAGS_HAS_YAW_LOCK uint32 = 1024// Based on GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK.
	GimbalManagerInformation_CAP_FLAGS_SUPPORTS_INFINITE_YAW uint32 = 2048// Based on GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW.
	GimbalManagerInformation_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL uint32 = 65536// Gimbal manager supports to point to a local position.
	GimbalManagerInformation_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL uint32 = 131072// Gimbal manager supports to point to a global latitude, longitude, altitude position.
)

type GimbalManagerInformation struct {
	Header std_msgs_msg.Header `yaml:"header"`
	CapFlags uint32 `yaml:"cap_flags"`// Bitmap of gimbal capability flags - see GIMBAL_MANAGER_CAP_FLAGS
	GimbalDeviceId uint8 `yaml:"gimbal_device_id"`// Gimbal device ID that this gimbal manager is responsible for.
	RollMin float32 `yaml:"roll_min"`// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	RollMax float32 `yaml:"roll_max"`// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	PitchMin float32 `yaml:"pitch_min"`// Minimum pitch angle (positive: up, negative: down)
	PitchMax float32 `yaml:"pitch_max"`// Maximum pitch angle (positive: up, negative: down)
	YawMin float32 `yaml:"yaw_min"`// Minimum yaw angle (positive: to the right, negative: to the left)
	YawMax float32 `yaml:"yaw_max"`// Maximum yaw angle (positive: to the right, negative: to the left)
}

// NewGimbalManagerInformation creates a new GimbalManagerInformation with default values.
func NewGimbalManagerInformation() *GimbalManagerInformation {
	self := GimbalManagerInformation{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerInformation) Clone() *GimbalManagerInformation {
	c := &GimbalManagerInformation{}
	c.Header = *t.Header.Clone()
	c.CapFlags = t.CapFlags
	c.GimbalDeviceId = t.GimbalDeviceId
	c.RollMin = t.RollMin
	c.RollMax = t.RollMax
	c.PitchMin = t.PitchMin
	c.PitchMax = t.PitchMax
	c.YawMin = t.YawMin
	c.YawMax = t.YawMax
	return c
}

func (t *GimbalManagerInformation) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerInformation) SetDefaults() {
	t.Header.SetDefaults()
	t.CapFlags = 0
	t.GimbalDeviceId = 0
	t.RollMin = 0
	t.RollMax = 0
	t.PitchMin = 0
	t.PitchMax = 0
	t.YawMin = 0
	t.YawMax = 0
}

func (t *GimbalManagerInformation) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerInformationTypeSupport
}

// GimbalManagerInformationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerInformationPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerInformationPublisher creates and returns a new publisher for the
// GimbalManagerInformation
func NewGimbalManagerInformationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerInformationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerInformationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerInformationPublisher{pub}, nil
}

func (p *GimbalManagerInformationPublisher) Publish(msg *GimbalManagerInformation) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerInformationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerInformationSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerInformationSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerInformationSubscription.
type GimbalManagerInformationSubscriptionCallback func(msg *GimbalManagerInformation, info *rclgo.MessageInfo, err error)

// NewGimbalManagerInformationSubscription creates and returns a new subscription for the
// GimbalManagerInformation
func NewGimbalManagerInformationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerInformationSubscriptionCallback) (*GimbalManagerInformationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerInformation
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerInformationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerInformationSubscription{sub}, nil
}

func (s *GimbalManagerInformationSubscription) TakeMessage(out *GimbalManagerInformation) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerInformationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerInformationSlice(dst, src []GimbalManagerInformation) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerInformationTypeSupport types.MessageTypeSupport = _GimbalManagerInformationTypeSupport{}

type _GimbalManagerInformationTypeSupport struct{}

func (t _GimbalManagerInformationTypeSupport) New() types.Message {
	return NewGimbalManagerInformation()
}

func (t _GimbalManagerInformationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__GimbalManagerInformation
	return (unsafe.Pointer)(C.mavros_msgs__msg__GimbalManagerInformation__create())
}

func (t _GimbalManagerInformationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__GimbalManagerInformation__destroy((*C.mavros_msgs__msg__GimbalManagerInformation)(pointer_to_free))
}

func (t _GimbalManagerInformationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerInformation)
	mem := (*C.mavros_msgs__msg__GimbalManagerInformation)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.cap_flags = C.uint32_t(m.CapFlags)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
	mem.roll_min = C.float(m.RollMin)
	mem.roll_max = C.float(m.RollMax)
	mem.pitch_min = C.float(m.PitchMin)
	mem.pitch_max = C.float(m.PitchMax)
	mem.yaw_min = C.float(m.YawMin)
	mem.yaw_max = C.float(m.YawMax)
}

func (t _GimbalManagerInformationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerInformation)
	mem := (*C.mavros_msgs__msg__GimbalManagerInformation)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.CapFlags = uint32(mem.cap_flags)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
	m.RollMin = float32(mem.roll_min)
	m.RollMax = float32(mem.roll_max)
	m.PitchMin = float32(mem.pitch_min)
	m.PitchMax = float32(mem.pitch_max)
	m.YawMin = float32(mem.yaw_min)
	m.YawMax = float32(mem.yaw_max)
}

func (t _GimbalManagerInformationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__GimbalManagerInformation())
}

type CGimbalManagerInformation = C.mavros_msgs__msg__GimbalManagerInformation
type CGimbalManagerInformation__Sequence = C.mavros_msgs__msg__GimbalManagerInformation__Sequence

func GimbalManagerInformation__Sequence_to_Go(goSlice *[]GimbalManagerInformation, cSlice CGimbalManagerInformation__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerInformation, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerInformationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerInformation__Sequence_to_C(cSlice *CGimbalManagerInformation__Sequence, goSlice []GimbalManagerInformation) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__GimbalManagerInformation)(C.malloc(C.sizeof_struct_mavros_msgs__msg__GimbalManagerInformation * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerInformationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerInformation__Array_to_Go(goSlice []GimbalManagerInformation, cSlice []CGimbalManagerInformation) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerInformationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerInformation__Array_to_C(cSlice []CGimbalManagerInformation, goSlice []GimbalManagerInformation) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerInformationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
