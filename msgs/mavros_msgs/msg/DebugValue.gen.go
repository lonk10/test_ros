// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/debug_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/DebugValue", DebugValueTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/DebugValue", DebugValueTypeSupport)
}
const (
	DebugValue_TYPE_DEBUG uint8 = 0
	DebugValue_TYPE_DEBUG_VECT uint8 = 1
	DebugValue_TYPE_DEBUG_FLOAT_ARRAY uint8 = 2
	DebugValue_TYPE_NAMED_VALUE_FLOAT uint8 = 3
	DebugValue_TYPE_NAMED_VALUE_INT uint8 = 4
)

type DebugValue struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Index int32 `yaml:"index"`// index value of DEBUG value (-1 if not indexed)
	ArrayId int32 `yaml:"array_id"`// Unique ID used to discriminate between DEBUG_FLOAT_ARRAYS (-1 if not used)
	Name string `yaml:"name"`// value name/key
	ValueFloat float32 `yaml:"value_float"`// float value for NAMED_VALUE_FLOAT and DEBUG
	ValueInt int32 `yaml:"value_int"`// int value for NAMED_VALUE_INT
	Data []float32 `yaml:"data"`// DEBUG vector or array
	Type uint8 `yaml:"type"`
}

// NewDebugValue creates a new DebugValue with default values.
func NewDebugValue() *DebugValue {
	self := DebugValue{}
	self.SetDefaults()
	return &self
}

func (t *DebugValue) Clone() *DebugValue {
	c := &DebugValue{}
	c.Header = *t.Header.Clone()
	c.Index = t.Index
	c.ArrayId = t.ArrayId
	c.Name = t.Name
	c.ValueFloat = t.ValueFloat
	c.ValueInt = t.ValueInt
	if t.Data != nil {
		c.Data = make([]float32, len(t.Data))
		copy(c.Data, t.Data)
	}
	c.Type = t.Type
	return c
}

func (t *DebugValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugValue) SetDefaults() {
	t.Header.SetDefaults()
	t.Index = 0
	t.ArrayId = 0
	t.Name = ""
	t.ValueFloat = 0
	t.ValueInt = 0
	t.Data = nil
	t.Type = 0
}

func (t *DebugValue) GetTypeSupport() types.MessageTypeSupport {
	return DebugValueTypeSupport
}

// DebugValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DebugValuePublisher struct {
	*rclgo.Publisher
}

// NewDebugValuePublisher creates and returns a new publisher for the
// DebugValue
func NewDebugValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DebugValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DebugValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DebugValuePublisher{pub}, nil
}

func (p *DebugValuePublisher) Publish(msg *DebugValue) error {
	return p.Publisher.Publish(msg)
}

// DebugValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DebugValueSubscription struct {
	*rclgo.Subscription
}

// DebugValueSubscriptionCallback type is used to provide a subscription
// handler function for a DebugValueSubscription.
type DebugValueSubscriptionCallback func(msg *DebugValue, info *rclgo.MessageInfo, err error)

// NewDebugValueSubscription creates and returns a new subscription for the
// DebugValue
func NewDebugValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DebugValueSubscriptionCallback) (*DebugValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DebugValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DebugValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DebugValueSubscription{sub}, nil
}

func (s *DebugValueSubscription) TakeMessage(out *DebugValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDebugValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugValueSlice(dst, src []DebugValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugValueTypeSupport types.MessageTypeSupport = _DebugValueTypeSupport{}

type _DebugValueTypeSupport struct{}

func (t _DebugValueTypeSupport) New() types.Message {
	return NewDebugValue()
}

func (t _DebugValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__DebugValue
	return (unsafe.Pointer)(C.mavros_msgs__msg__DebugValue__create())
}

func (t _DebugValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__DebugValue__destroy((*C.mavros_msgs__msg__DebugValue)(pointer_to_free))
}

func (t _DebugValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugValue)
	mem := (*C.mavros_msgs__msg__DebugValue)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.index = C.int32_t(m.Index)
	mem.array_id = C.int32_t(m.ArrayId)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.name), m.Name)
	mem.value_float = C.float(m.ValueFloat)
	mem.value_int = C.int32_t(m.ValueInt)
	primitives.Float32__Sequence_to_C((*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
	mem._type = C.uint8_t(m.Type)
}

func (t _DebugValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugValue)
	mem := (*C.mavros_msgs__msg__DebugValue)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Index = int32(mem.index)
	m.ArrayId = int32(mem.array_id)
	primitives.StringAsGoStruct(&m.Name, unsafe.Pointer(&mem.name))
	m.ValueFloat = float32(mem.value_float)
	m.ValueInt = int32(mem.value_int)
	primitives.Float32__Sequence_to_Go(&m.Data, *(*primitives.CFloat32__Sequence)(unsafe.Pointer(&mem.data)))
	m.Type = uint8(mem._type)
}

func (t _DebugValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__DebugValue())
}

type CDebugValue = C.mavros_msgs__msg__DebugValue
type CDebugValue__Sequence = C.mavros_msgs__msg__DebugValue__Sequence

func DebugValue__Sequence_to_Go(goSlice *[]DebugValue, cSlice CDebugValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DebugValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DebugValue__Sequence_to_C(cSlice *CDebugValue__Sequence, goSlice []DebugValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__DebugValue)(C.malloc(C.sizeof_struct_mavros_msgs__msg__DebugValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DebugValue__Array_to_Go(goSlice []DebugValue, cSlice []CDebugValue) {
	for i := 0; i < len(cSlice); i++ {
		DebugValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugValue__Array_to_C(cSlice []CDebugValue, goSlice []DebugValue) {
	for i := 0; i < len(goSlice); i++ {
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
