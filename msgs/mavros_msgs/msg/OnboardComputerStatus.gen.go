// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/onboard_computer_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/OnboardComputerStatus", OnboardComputerStatusTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/OnboardComputerStatus", OnboardComputerStatusTypeSupport)
}

type OnboardComputerStatus struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Component uint8 `yaml:"component"`// See enum MAV_COMPONENT
	Uptime uint32 `yaml:"uptime"`// [ms] Time since system boot
	Type uint8 `yaml:"type"`// Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.
	CpuCores [8]uint8 `yaml:"cpu_cores"`// CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.
	CpuCombined [10]uint8 `yaml:"cpu_combined"`// Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused
	GpuCores [4]uint8 `yaml:"gpu_cores"`// GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused
	GpuCombined [10]uint8 `yaml:"gpu_combined"`// Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.
	TemperatureBoard int8 `yaml:"temperature_board"`// [degC] Temperature of the board. A value of INT8_MAX implies the field is unused.
	TemperatureCore [8]int8 `yaml:"temperature_core"`// [degC] Temperature of the CPU core. A value of INT8_MAX implies the field is unused.
	FanSpeed [4]int16 `yaml:"fan_speed"`// [rpm] Fan speeds. A value of INT16_MAX implies the field is unused.
	RamUsage uint32 `yaml:"ram_usage"`// [MiB] Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.
	RamTotal uint32 `yaml:"ram_total"`// [MiB] Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.
	StorageType [4]uint32 `yaml:"storage_type"`// Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.
	StorageUsage [4]uint32 `yaml:"storage_usage"`// [MiB] Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.
	StorageTotal [4]uint32 `yaml:"storage_total"`// [MiB] Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.
	LinkType [6]uint32 `yaml:"link_type"`// Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary.
	LinkTxRate [6]uint32 `yaml:"link_tx_rate"`// [KiB/s] Network traffic from the component system. A value of UINT32_MAX implies the field is unused.
	LinkRxRate [6]uint32 `yaml:"link_rx_rate"`// [KiB/s] Network traffic to the component system. A value of UINT32_MAX implies the field is unused.
	LinkTxMax [6]uint32 `yaml:"link_tx_max"`// [KiB/s] Network capacity from the component system. A value of UINT32_MAX implies the field is unused.
	LinkRxMax [6]uint32 `yaml:"link_rx_max"`// [KiB/s] Network capacity to the component system. A value of UINT32_MAX implies the field is unused.
}

// NewOnboardComputerStatus creates a new OnboardComputerStatus with default values.
func NewOnboardComputerStatus() *OnboardComputerStatus {
	self := OnboardComputerStatus{}
	self.SetDefaults()
	return &self
}

func (t *OnboardComputerStatus) Clone() *OnboardComputerStatus {
	c := &OnboardComputerStatus{}
	c.Header = *t.Header.Clone()
	c.Component = t.Component
	c.Uptime = t.Uptime
	c.Type = t.Type
	c.CpuCores = t.CpuCores
	c.CpuCombined = t.CpuCombined
	c.GpuCores = t.GpuCores
	c.GpuCombined = t.GpuCombined
	c.TemperatureBoard = t.TemperatureBoard
	c.TemperatureCore = t.TemperatureCore
	c.FanSpeed = t.FanSpeed
	c.RamUsage = t.RamUsage
	c.RamTotal = t.RamTotal
	c.StorageType = t.StorageType
	c.StorageUsage = t.StorageUsage
	c.StorageTotal = t.StorageTotal
	c.LinkType = t.LinkType
	c.LinkTxRate = t.LinkTxRate
	c.LinkRxRate = t.LinkRxRate
	c.LinkTxMax = t.LinkTxMax
	c.LinkRxMax = t.LinkRxMax
	return c
}

func (t *OnboardComputerStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OnboardComputerStatus) SetDefaults() {
	t.Header.SetDefaults()
	t.Component = 0
	t.Uptime = 0
	t.Type = 0
	t.CpuCores = [8]uint8{}
	t.CpuCombined = [10]uint8{}
	t.GpuCores = [4]uint8{}
	t.GpuCombined = [10]uint8{}
	t.TemperatureBoard = 0
	t.TemperatureCore = [8]int8{}
	t.FanSpeed = [4]int16{}
	t.RamUsage = 0
	t.RamTotal = 0
	t.StorageType = [4]uint32{}
	t.StorageUsage = [4]uint32{}
	t.StorageTotal = [4]uint32{}
	t.LinkType = [6]uint32{}
	t.LinkTxRate = [6]uint32{}
	t.LinkRxRate = [6]uint32{}
	t.LinkTxMax = [6]uint32{}
	t.LinkRxMax = [6]uint32{}
}

func (t *OnboardComputerStatus) GetTypeSupport() types.MessageTypeSupport {
	return OnboardComputerStatusTypeSupport
}

// OnboardComputerStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OnboardComputerStatusPublisher struct {
	*rclgo.Publisher
}

// NewOnboardComputerStatusPublisher creates and returns a new publisher for the
// OnboardComputerStatus
func NewOnboardComputerStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OnboardComputerStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OnboardComputerStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OnboardComputerStatusPublisher{pub}, nil
}

func (p *OnboardComputerStatusPublisher) Publish(msg *OnboardComputerStatus) error {
	return p.Publisher.Publish(msg)
}

// OnboardComputerStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OnboardComputerStatusSubscription struct {
	*rclgo.Subscription
}

// OnboardComputerStatusSubscriptionCallback type is used to provide a subscription
// handler function for a OnboardComputerStatusSubscription.
type OnboardComputerStatusSubscriptionCallback func(msg *OnboardComputerStatus, info *rclgo.MessageInfo, err error)

// NewOnboardComputerStatusSubscription creates and returns a new subscription for the
// OnboardComputerStatus
func NewOnboardComputerStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OnboardComputerStatusSubscriptionCallback) (*OnboardComputerStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OnboardComputerStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OnboardComputerStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OnboardComputerStatusSubscription{sub}, nil
}

func (s *OnboardComputerStatusSubscription) TakeMessage(out *OnboardComputerStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOnboardComputerStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOnboardComputerStatusSlice(dst, src []OnboardComputerStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OnboardComputerStatusTypeSupport types.MessageTypeSupport = _OnboardComputerStatusTypeSupport{}

type _OnboardComputerStatusTypeSupport struct{}

func (t _OnboardComputerStatusTypeSupport) New() types.Message {
	return NewOnboardComputerStatus()
}

func (t _OnboardComputerStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__OnboardComputerStatus
	return (unsafe.Pointer)(C.mavros_msgs__msg__OnboardComputerStatus__create())
}

func (t _OnboardComputerStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__OnboardComputerStatus__destroy((*C.mavros_msgs__msg__OnboardComputerStatus)(pointer_to_free))
}

func (t _OnboardComputerStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OnboardComputerStatus)
	mem := (*C.mavros_msgs__msg__OnboardComputerStatus)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.component = C.uint8_t(m.Component)
	mem.uptime = C.uint32_t(m.Uptime)
	mem._type = C.uint8_t(m.Type)
	cSlice_cpu_cores := mem.cpu_cores[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_cpu_cores)), m.CpuCores[:])
	cSlice_cpu_combined := mem.cpu_combined[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_cpu_combined)), m.CpuCombined[:])
	cSlice_gpu_cores := mem.gpu_cores[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_gpu_cores)), m.GpuCores[:])
	cSlice_gpu_combined := mem.gpu_combined[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_gpu_combined)), m.GpuCombined[:])
	mem.temperature_board = C.int8_t(m.TemperatureBoard)
	cSlice_temperature_core := mem.temperature_core[:]
	primitives.Int8__Array_to_C(*(*[]primitives.CInt8)(unsafe.Pointer(&cSlice_temperature_core)), m.TemperatureCore[:])
	cSlice_fan_speed := mem.fan_speed[:]
	primitives.Int16__Array_to_C(*(*[]primitives.CInt16)(unsafe.Pointer(&cSlice_fan_speed)), m.FanSpeed[:])
	mem.ram_usage = C.uint32_t(m.RamUsage)
	mem.ram_total = C.uint32_t(m.RamTotal)
	cSlice_storage_type := mem.storage_type[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_type)), m.StorageType[:])
	cSlice_storage_usage := mem.storage_usage[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_usage)), m.StorageUsage[:])
	cSlice_storage_total := mem.storage_total[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_total)), m.StorageTotal[:])
	cSlice_link_type := mem.link_type[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_type)), m.LinkType[:])
	cSlice_link_tx_rate := mem.link_tx_rate[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_tx_rate)), m.LinkTxRate[:])
	cSlice_link_rx_rate := mem.link_rx_rate[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_rx_rate)), m.LinkRxRate[:])
	cSlice_link_tx_max := mem.link_tx_max[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_tx_max)), m.LinkTxMax[:])
	cSlice_link_rx_max := mem.link_rx_max[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_rx_max)), m.LinkRxMax[:])
}

func (t _OnboardComputerStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OnboardComputerStatus)
	mem := (*C.mavros_msgs__msg__OnboardComputerStatus)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Component = uint8(mem.component)
	m.Uptime = uint32(mem.uptime)
	m.Type = uint8(mem._type)
	cSlice_cpu_cores := mem.cpu_cores[:]
	primitives.Uint8__Array_to_Go(m.CpuCores[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_cpu_cores)))
	cSlice_cpu_combined := mem.cpu_combined[:]
	primitives.Uint8__Array_to_Go(m.CpuCombined[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_cpu_combined)))
	cSlice_gpu_cores := mem.gpu_cores[:]
	primitives.Uint8__Array_to_Go(m.GpuCores[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_gpu_cores)))
	cSlice_gpu_combined := mem.gpu_combined[:]
	primitives.Uint8__Array_to_Go(m.GpuCombined[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_gpu_combined)))
	m.TemperatureBoard = int8(mem.temperature_board)
	cSlice_temperature_core := mem.temperature_core[:]
	primitives.Int8__Array_to_Go(m.TemperatureCore[:], *(*[]primitives.CInt8)(unsafe.Pointer(&cSlice_temperature_core)))
	cSlice_fan_speed := mem.fan_speed[:]
	primitives.Int16__Array_to_Go(m.FanSpeed[:], *(*[]primitives.CInt16)(unsafe.Pointer(&cSlice_fan_speed)))
	m.RamUsage = uint32(mem.ram_usage)
	m.RamTotal = uint32(mem.ram_total)
	cSlice_storage_type := mem.storage_type[:]
	primitives.Uint32__Array_to_Go(m.StorageType[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_type)))
	cSlice_storage_usage := mem.storage_usage[:]
	primitives.Uint32__Array_to_Go(m.StorageUsage[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_usage)))
	cSlice_storage_total := mem.storage_total[:]
	primitives.Uint32__Array_to_Go(m.StorageTotal[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_storage_total)))
	cSlice_link_type := mem.link_type[:]
	primitives.Uint32__Array_to_Go(m.LinkType[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_type)))
	cSlice_link_tx_rate := mem.link_tx_rate[:]
	primitives.Uint32__Array_to_Go(m.LinkTxRate[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_tx_rate)))
	cSlice_link_rx_rate := mem.link_rx_rate[:]
	primitives.Uint32__Array_to_Go(m.LinkRxRate[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_rx_rate)))
	cSlice_link_tx_max := mem.link_tx_max[:]
	primitives.Uint32__Array_to_Go(m.LinkTxMax[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_tx_max)))
	cSlice_link_rx_max := mem.link_rx_max[:]
	primitives.Uint32__Array_to_Go(m.LinkRxMax[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_link_rx_max)))
}

func (t _OnboardComputerStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__OnboardComputerStatus())
}

type COnboardComputerStatus = C.mavros_msgs__msg__OnboardComputerStatus
type COnboardComputerStatus__Sequence = C.mavros_msgs__msg__OnboardComputerStatus__Sequence

func OnboardComputerStatus__Sequence_to_Go(goSlice *[]OnboardComputerStatus, cSlice COnboardComputerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OnboardComputerStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OnboardComputerStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OnboardComputerStatus__Sequence_to_C(cSlice *COnboardComputerStatus__Sequence, goSlice []OnboardComputerStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__OnboardComputerStatus)(C.malloc(C.sizeof_struct_mavros_msgs__msg__OnboardComputerStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OnboardComputerStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OnboardComputerStatus__Array_to_Go(goSlice []OnboardComputerStatus, cSlice []COnboardComputerStatus) {
	for i := 0; i < len(cSlice); i++ {
		OnboardComputerStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OnboardComputerStatus__Array_to_C(cSlice []COnboardComputerStatus, goSlice []OnboardComputerStatus) {
	for i := 0; i < len(goSlice); i++ {
		OnboardComputerStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
