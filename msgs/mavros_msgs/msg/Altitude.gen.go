// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/altitude.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/Altitude", AltitudeTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/Altitude", AltitudeTypeSupport)
}

type Altitude struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Monotonic float32 `yaml:"monotonic"`
	Amsl float32 `yaml:"amsl"`
	Local float32 `yaml:"local"`
	Relative float32 `yaml:"relative"`
	Terrain float32 `yaml:"terrain"`
	BottomClearance float32 `yaml:"bottom_clearance"`
}

// NewAltitude creates a new Altitude with default values.
func NewAltitude() *Altitude {
	self := Altitude{}
	self.SetDefaults()
	return &self
}

func (t *Altitude) Clone() *Altitude {
	c := &Altitude{}
	c.Header = *t.Header.Clone()
	c.Monotonic = t.Monotonic
	c.Amsl = t.Amsl
	c.Local = t.Local
	c.Relative = t.Relative
	c.Terrain = t.Terrain
	c.BottomClearance = t.BottomClearance
	return c
}

func (t *Altitude) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Altitude) SetDefaults() {
	t.Header.SetDefaults()
	t.Monotonic = 0
	t.Amsl = 0
	t.Local = 0
	t.Relative = 0
	t.Terrain = 0
	t.BottomClearance = 0
}

func (t *Altitude) GetTypeSupport() types.MessageTypeSupport {
	return AltitudeTypeSupport
}

// AltitudePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AltitudePublisher struct {
	*rclgo.Publisher
}

// NewAltitudePublisher creates and returns a new publisher for the
// Altitude
func NewAltitudePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AltitudePublisher, error) {
	pub, err := node.NewPublisher(topic_name, AltitudeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AltitudePublisher{pub}, nil
}

func (p *AltitudePublisher) Publish(msg *Altitude) error {
	return p.Publisher.Publish(msg)
}

// AltitudeSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AltitudeSubscription struct {
	*rclgo.Subscription
}

// AltitudeSubscriptionCallback type is used to provide a subscription
// handler function for a AltitudeSubscription.
type AltitudeSubscriptionCallback func(msg *Altitude, info *rclgo.MessageInfo, err error)

// NewAltitudeSubscription creates and returns a new subscription for the
// Altitude
func NewAltitudeSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AltitudeSubscriptionCallback) (*AltitudeSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Altitude
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AltitudeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AltitudeSubscription{sub}, nil
}

func (s *AltitudeSubscription) TakeMessage(out *Altitude) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAltitudeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAltitudeSlice(dst, src []Altitude) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AltitudeTypeSupport types.MessageTypeSupport = _AltitudeTypeSupport{}

type _AltitudeTypeSupport struct{}

func (t _AltitudeTypeSupport) New() types.Message {
	return NewAltitude()
}

func (t _AltitudeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__Altitude
	return (unsafe.Pointer)(C.mavros_msgs__msg__Altitude__create())
}

func (t _AltitudeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__Altitude__destroy((*C.mavros_msgs__msg__Altitude)(pointer_to_free))
}

func (t _AltitudeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Altitude)
	mem := (*C.mavros_msgs__msg__Altitude)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.monotonic = C.float(m.Monotonic)
	mem.amsl = C.float(m.Amsl)
	mem.local = C.float(m.Local)
	mem.relative = C.float(m.Relative)
	mem.terrain = C.float(m.Terrain)
	mem.bottom_clearance = C.float(m.BottomClearance)
}

func (t _AltitudeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Altitude)
	mem := (*C.mavros_msgs__msg__Altitude)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Monotonic = float32(mem.monotonic)
	m.Amsl = float32(mem.amsl)
	m.Local = float32(mem.local)
	m.Relative = float32(mem.relative)
	m.Terrain = float32(mem.terrain)
	m.BottomClearance = float32(mem.bottom_clearance)
}

func (t _AltitudeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__Altitude())
}

type CAltitude = C.mavros_msgs__msg__Altitude
type CAltitude__Sequence = C.mavros_msgs__msg__Altitude__Sequence

func Altitude__Sequence_to_Go(goSlice *[]Altitude, cSlice CAltitude__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Altitude, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AltitudeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Altitude__Sequence_to_C(cSlice *CAltitude__Sequence, goSlice []Altitude) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__Altitude)(C.malloc(C.sizeof_struct_mavros_msgs__msg__Altitude * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AltitudeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Altitude__Array_to_Go(goSlice []Altitude, cSlice []CAltitude) {
	for i := 0; i < len(cSlice); i++ {
		AltitudeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Altitude__Array_to_C(cSlice []CAltitude, goSlice []Altitude) {
	for i := 0; i < len(goSlice); i++ {
		AltitudeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
