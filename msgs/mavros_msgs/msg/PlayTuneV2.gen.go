// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/play_tune_v2.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/PlayTuneV2", PlayTuneV2TypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/PlayTuneV2", PlayTuneV2TypeSupport)
}
const (
	PlayTuneV2_QBASIC1_1 uint8 = 1// # TUNE_FORMAT enum
	PlayTuneV2_MML_MODERN uint8 = 2
)

type PlayTuneV2 struct {
	Format uint8 `yaml:"format"`
	Tune string `yaml:"tune"`
}

// NewPlayTuneV2 creates a new PlayTuneV2 with default values.
func NewPlayTuneV2() *PlayTuneV2 {
	self := PlayTuneV2{}
	self.SetDefaults()
	return &self
}

func (t *PlayTuneV2) Clone() *PlayTuneV2 {
	c := &PlayTuneV2{}
	c.Format = t.Format
	c.Tune = t.Tune
	return c
}

func (t *PlayTuneV2) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PlayTuneV2) SetDefaults() {
	t.Format = 0
	t.Tune = ""
}

func (t *PlayTuneV2) GetTypeSupport() types.MessageTypeSupport {
	return PlayTuneV2TypeSupport
}

// PlayTuneV2Publisher wraps rclgo.Publisher to provide type safe helper
// functions
type PlayTuneV2Publisher struct {
	*rclgo.Publisher
}

// NewPlayTuneV2Publisher creates and returns a new publisher for the
// PlayTuneV2
func NewPlayTuneV2Publisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PlayTuneV2Publisher, error) {
	pub, err := node.NewPublisher(topic_name, PlayTuneV2TypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PlayTuneV2Publisher{pub}, nil
}

func (p *PlayTuneV2Publisher) Publish(msg *PlayTuneV2) error {
	return p.Publisher.Publish(msg)
}

// PlayTuneV2Subscription wraps rclgo.Subscription to provide type safe helper
// functions
type PlayTuneV2Subscription struct {
	*rclgo.Subscription
}

// PlayTuneV2SubscriptionCallback type is used to provide a subscription
// handler function for a PlayTuneV2Subscription.
type PlayTuneV2SubscriptionCallback func(msg *PlayTuneV2, info *rclgo.MessageInfo, err error)

// NewPlayTuneV2Subscription creates and returns a new subscription for the
// PlayTuneV2
func NewPlayTuneV2Subscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PlayTuneV2SubscriptionCallback) (*PlayTuneV2Subscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PlayTuneV2
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PlayTuneV2TypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PlayTuneV2Subscription{sub}, nil
}

func (s *PlayTuneV2Subscription) TakeMessage(out *PlayTuneV2) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePlayTuneV2Slice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePlayTuneV2Slice(dst, src []PlayTuneV2) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PlayTuneV2TypeSupport types.MessageTypeSupport = _PlayTuneV2TypeSupport{}

type _PlayTuneV2TypeSupport struct{}

func (t _PlayTuneV2TypeSupport) New() types.Message {
	return NewPlayTuneV2()
}

func (t _PlayTuneV2TypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__PlayTuneV2
	return (unsafe.Pointer)(C.mavros_msgs__msg__PlayTuneV2__create())
}

func (t _PlayTuneV2TypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__PlayTuneV2__destroy((*C.mavros_msgs__msg__PlayTuneV2)(pointer_to_free))
}

func (t _PlayTuneV2TypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PlayTuneV2)
	mem := (*C.mavros_msgs__msg__PlayTuneV2)(dst)
	mem.format = C.uint8_t(m.Format)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.tune), m.Tune)
}

func (t _PlayTuneV2TypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PlayTuneV2)
	mem := (*C.mavros_msgs__msg__PlayTuneV2)(ros2_message_buffer)
	m.Format = uint8(mem.format)
	primitives.StringAsGoStruct(&m.Tune, unsafe.Pointer(&mem.tune))
}

func (t _PlayTuneV2TypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__PlayTuneV2())
}

type CPlayTuneV2 = C.mavros_msgs__msg__PlayTuneV2
type CPlayTuneV2__Sequence = C.mavros_msgs__msg__PlayTuneV2__Sequence

func PlayTuneV2__Sequence_to_Go(goSlice *[]PlayTuneV2, cSlice CPlayTuneV2__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PlayTuneV2, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PlayTuneV2TypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PlayTuneV2__Sequence_to_C(cSlice *CPlayTuneV2__Sequence, goSlice []PlayTuneV2) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__PlayTuneV2)(C.malloc(C.sizeof_struct_mavros_msgs__msg__PlayTuneV2 * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PlayTuneV2TypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PlayTuneV2__Array_to_Go(goSlice []PlayTuneV2, cSlice []CPlayTuneV2) {
	for i := 0; i < len(cSlice); i++ {
		PlayTuneV2TypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PlayTuneV2__Array_to_C(cSlice []CPlayTuneV2, goSlice []PlayTuneV2) {
	for i := 0; i < len(goSlice); i++ {
		PlayTuneV2TypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
