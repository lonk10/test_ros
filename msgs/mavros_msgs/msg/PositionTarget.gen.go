// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/position_target.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/PositionTarget", PositionTargetTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/PositionTarget", PositionTargetTypeSupport)
}
const (
	PositionTarget_FRAME_LOCAL_NED uint8 = 1
	PositionTarget_FRAME_LOCAL_OFFSET_NED uint8 = 7
	PositionTarget_FRAME_BODY_NED uint8 = 8
	PositionTarget_FRAME_BODY_OFFSET_NED uint8 = 9
	PositionTarget_IGNORE_PX uint16 = 1// Position ignore flags
	PositionTarget_IGNORE_PY uint16 = 2
	PositionTarget_IGNORE_PZ uint16 = 4
	PositionTarget_IGNORE_VX uint16 = 8// Velocity vector ignore flags
	PositionTarget_IGNORE_VY uint16 = 16
	PositionTarget_IGNORE_VZ uint16 = 32
	PositionTarget_IGNORE_AFX uint16 = 64// Acceleration/Force vector ignore flags
	PositionTarget_IGNORE_AFY uint16 = 128
	PositionTarget_IGNORE_AFZ uint16 = 256
	PositionTarget_FORCE uint16 = 512// Force in af vector flag
	PositionTarget_IGNORE_YAW uint16 = 1024
	PositionTarget_IGNORE_YAW_RATE uint16 = 2048
)

type PositionTarget struct {
	Header std_msgs_msg.Header `yaml:"header"`
	CoordinateFrame uint8 `yaml:"coordinate_frame"`
	TypeMask uint16 `yaml:"type_mask"`
	Position geometry_msgs_msg.Point `yaml:"position"`
	Velocity geometry_msgs_msg.Vector3 `yaml:"velocity"`
	AccelerationOrForce geometry_msgs_msg.Vector3 `yaml:"acceleration_or_force"`
	Yaw float32 `yaml:"yaw"`
	YawRate float32 `yaml:"yaw_rate"`
}

// NewPositionTarget creates a new PositionTarget with default values.
func NewPositionTarget() *PositionTarget {
	self := PositionTarget{}
	self.SetDefaults()
	return &self
}

func (t *PositionTarget) Clone() *PositionTarget {
	c := &PositionTarget{}
	c.Header = *t.Header.Clone()
	c.CoordinateFrame = t.CoordinateFrame
	c.TypeMask = t.TypeMask
	c.Position = *t.Position.Clone()
	c.Velocity = *t.Velocity.Clone()
	c.AccelerationOrForce = *t.AccelerationOrForce.Clone()
	c.Yaw = t.Yaw
	c.YawRate = t.YawRate
	return c
}

func (t *PositionTarget) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PositionTarget) SetDefaults() {
	t.Header.SetDefaults()
	t.CoordinateFrame = 0
	t.TypeMask = 0
	t.Position.SetDefaults()
	t.Velocity.SetDefaults()
	t.AccelerationOrForce.SetDefaults()
	t.Yaw = 0
	t.YawRate = 0
}

func (t *PositionTarget) GetTypeSupport() types.MessageTypeSupport {
	return PositionTargetTypeSupport
}

// PositionTargetPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PositionTargetPublisher struct {
	*rclgo.Publisher
}

// NewPositionTargetPublisher creates and returns a new publisher for the
// PositionTarget
func NewPositionTargetPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PositionTargetPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PositionTargetTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PositionTargetPublisher{pub}, nil
}

func (p *PositionTargetPublisher) Publish(msg *PositionTarget) error {
	return p.Publisher.Publish(msg)
}

// PositionTargetSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PositionTargetSubscription struct {
	*rclgo.Subscription
}

// PositionTargetSubscriptionCallback type is used to provide a subscription
// handler function for a PositionTargetSubscription.
type PositionTargetSubscriptionCallback func(msg *PositionTarget, info *rclgo.MessageInfo, err error)

// NewPositionTargetSubscription creates and returns a new subscription for the
// PositionTarget
func NewPositionTargetSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PositionTargetSubscriptionCallback) (*PositionTargetSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PositionTarget
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PositionTargetTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PositionTargetSubscription{sub}, nil
}

func (s *PositionTargetSubscription) TakeMessage(out *PositionTarget) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePositionTargetSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePositionTargetSlice(dst, src []PositionTarget) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PositionTargetTypeSupport types.MessageTypeSupport = _PositionTargetTypeSupport{}

type _PositionTargetTypeSupport struct{}

func (t _PositionTargetTypeSupport) New() types.Message {
	return NewPositionTarget()
}

func (t _PositionTargetTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__PositionTarget
	return (unsafe.Pointer)(C.mavros_msgs__msg__PositionTarget__create())
}

func (t _PositionTargetTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__PositionTarget__destroy((*C.mavros_msgs__msg__PositionTarget)(pointer_to_free))
}

func (t _PositionTargetTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PositionTarget)
	mem := (*C.mavros_msgs__msg__PositionTarget)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.coordinate_frame = C.uint8_t(m.CoordinateFrame)
	mem.type_mask = C.uint16_t(m.TypeMask)
	geometry_msgs_msg.PointTypeSupport.AsCStruct(unsafe.Pointer(&mem.position), &m.Position)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.velocity), &m.Velocity)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.acceleration_or_force), &m.AccelerationOrForce)
	mem.yaw = C.float(m.Yaw)
	mem.yaw_rate = C.float(m.YawRate)
}

func (t _PositionTargetTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PositionTarget)
	mem := (*C.mavros_msgs__msg__PositionTarget)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.CoordinateFrame = uint8(mem.coordinate_frame)
	m.TypeMask = uint16(mem.type_mask)
	geometry_msgs_msg.PointTypeSupport.AsGoStruct(&m.Position, unsafe.Pointer(&mem.position))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Velocity, unsafe.Pointer(&mem.velocity))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.AccelerationOrForce, unsafe.Pointer(&mem.acceleration_or_force))
	m.Yaw = float32(mem.yaw)
	m.YawRate = float32(mem.yaw_rate)
}

func (t _PositionTargetTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__PositionTarget())
}

type CPositionTarget = C.mavros_msgs__msg__PositionTarget
type CPositionTarget__Sequence = C.mavros_msgs__msg__PositionTarget__Sequence

func PositionTarget__Sequence_to_Go(goSlice *[]PositionTarget, cSlice CPositionTarget__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PositionTarget, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PositionTargetTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PositionTarget__Sequence_to_C(cSlice *CPositionTarget__Sequence, goSlice []PositionTarget) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__PositionTarget)(C.malloc(C.sizeof_struct_mavros_msgs__msg__PositionTarget * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PositionTarget__Array_to_Go(goSlice []PositionTarget, cSlice []CPositionTarget) {
	for i := 0; i < len(cSlice); i++ {
		PositionTargetTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PositionTarget__Array_to_C(cSlice []CPositionTarget, goSlice []PositionTarget) {
	for i := 0; i < len(goSlice); i++ {
		PositionTargetTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
