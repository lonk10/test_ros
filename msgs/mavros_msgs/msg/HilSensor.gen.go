// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/hil_sensor.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/HilSensor", HilSensorTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/HilSensor", HilSensorTypeSupport)
}

type HilSensor struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Acc geometry_msgs_msg.Vector3 `yaml:"acc"`
	Gyro geometry_msgs_msg.Vector3 `yaml:"gyro"`
	Mag geometry_msgs_msg.Vector3 `yaml:"mag"`
	AbsPressure float32 `yaml:"abs_pressure"`
	DiffPressure float32 `yaml:"diff_pressure"`
	PressureAlt float32 `yaml:"pressure_alt"`
	Temperature float32 `yaml:"temperature"`
	FieldsUpdated uint32 `yaml:"fields_updated"`
}

// NewHilSensor creates a new HilSensor with default values.
func NewHilSensor() *HilSensor {
	self := HilSensor{}
	self.SetDefaults()
	return &self
}

func (t *HilSensor) Clone() *HilSensor {
	c := &HilSensor{}
	c.Header = *t.Header.Clone()
	c.Acc = *t.Acc.Clone()
	c.Gyro = *t.Gyro.Clone()
	c.Mag = *t.Mag.Clone()
	c.AbsPressure = t.AbsPressure
	c.DiffPressure = t.DiffPressure
	c.PressureAlt = t.PressureAlt
	c.Temperature = t.Temperature
	c.FieldsUpdated = t.FieldsUpdated
	return c
}

func (t *HilSensor) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HilSensor) SetDefaults() {
	t.Header.SetDefaults()
	t.Acc.SetDefaults()
	t.Gyro.SetDefaults()
	t.Mag.SetDefaults()
	t.AbsPressure = 0
	t.DiffPressure = 0
	t.PressureAlt = 0
	t.Temperature = 0
	t.FieldsUpdated = 0
}

func (t *HilSensor) GetTypeSupport() types.MessageTypeSupport {
	return HilSensorTypeSupport
}

// HilSensorPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HilSensorPublisher struct {
	*rclgo.Publisher
}

// NewHilSensorPublisher creates and returns a new publisher for the
// HilSensor
func NewHilSensorPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HilSensorPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HilSensorTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HilSensorPublisher{pub}, nil
}

func (p *HilSensorPublisher) Publish(msg *HilSensor) error {
	return p.Publisher.Publish(msg)
}

// HilSensorSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HilSensorSubscription struct {
	*rclgo.Subscription
}

// HilSensorSubscriptionCallback type is used to provide a subscription
// handler function for a HilSensorSubscription.
type HilSensorSubscriptionCallback func(msg *HilSensor, info *rclgo.MessageInfo, err error)

// NewHilSensorSubscription creates and returns a new subscription for the
// HilSensor
func NewHilSensorSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HilSensorSubscriptionCallback) (*HilSensorSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HilSensor
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HilSensorTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HilSensorSubscription{sub}, nil
}

func (s *HilSensorSubscription) TakeMessage(out *HilSensor) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHilSensorSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHilSensorSlice(dst, src []HilSensor) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HilSensorTypeSupport types.MessageTypeSupport = _HilSensorTypeSupport{}

type _HilSensorTypeSupport struct{}

func (t _HilSensorTypeSupport) New() types.Message {
	return NewHilSensor()
}

func (t _HilSensorTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__HilSensor
	return (unsafe.Pointer)(C.mavros_msgs__msg__HilSensor__create())
}

func (t _HilSensorTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__HilSensor__destroy((*C.mavros_msgs__msg__HilSensor)(pointer_to_free))
}

func (t _HilSensorTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HilSensor)
	mem := (*C.mavros_msgs__msg__HilSensor)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.acc), &m.Acc)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.gyro), &m.Gyro)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.mag), &m.Mag)
	mem.abs_pressure = C.float(m.AbsPressure)
	mem.diff_pressure = C.float(m.DiffPressure)
	mem.pressure_alt = C.float(m.PressureAlt)
	mem.temperature = C.float(m.Temperature)
	mem.fields_updated = C.uint32_t(m.FieldsUpdated)
}

func (t _HilSensorTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HilSensor)
	mem := (*C.mavros_msgs__msg__HilSensor)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Acc, unsafe.Pointer(&mem.acc))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Gyro, unsafe.Pointer(&mem.gyro))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Mag, unsafe.Pointer(&mem.mag))
	m.AbsPressure = float32(mem.abs_pressure)
	m.DiffPressure = float32(mem.diff_pressure)
	m.PressureAlt = float32(mem.pressure_alt)
	m.Temperature = float32(mem.temperature)
	m.FieldsUpdated = uint32(mem.fields_updated)
}

func (t _HilSensorTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__HilSensor())
}

type CHilSensor = C.mavros_msgs__msg__HilSensor
type CHilSensor__Sequence = C.mavros_msgs__msg__HilSensor__Sequence

func HilSensor__Sequence_to_Go(goSlice *[]HilSensor, cSlice CHilSensor__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HilSensor, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HilSensorTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HilSensor__Sequence_to_C(cSlice *CHilSensor__Sequence, goSlice []HilSensor) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__HilSensor)(C.malloc(C.sizeof_struct_mavros_msgs__msg__HilSensor * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HilSensorTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HilSensor__Array_to_Go(goSlice []HilSensor, cSlice []CHilSensor) {
	for i := 0; i < len(cSlice); i++ {
		HilSensorTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HilSensor__Array_to_C(cSlice []CHilSensor, goSlice []HilSensor) {
	for i := 0; i < len(goSlice); i++ {
		HilSensorTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
