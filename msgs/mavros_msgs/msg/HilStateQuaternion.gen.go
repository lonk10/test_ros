// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geographic_msgs_msg "test/msgs/geographic_msgs/msg"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/hil_state_quaternion.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/HilStateQuaternion", HilStateQuaternionTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/HilStateQuaternion", HilStateQuaternionTypeSupport)
}

type HilStateQuaternion struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Orientation geometry_msgs_msg.Quaternion `yaml:"orientation"`
	AngularVelocity geometry_msgs_msg.Vector3 `yaml:"angular_velocity"`
	LinearAcceleration geometry_msgs_msg.Vector3 `yaml:"linear_acceleration"`
	LinearVelocity geometry_msgs_msg.Vector3 `yaml:"linear_velocity"`
	Geo geographic_msgs_msg.GeoPoint `yaml:"geo"`
	IndAirspeed float32 `yaml:"ind_airspeed"`
	TrueAirspeed float32 `yaml:"true_airspeed"`
}

// NewHilStateQuaternion creates a new HilStateQuaternion with default values.
func NewHilStateQuaternion() *HilStateQuaternion {
	self := HilStateQuaternion{}
	self.SetDefaults()
	return &self
}

func (t *HilStateQuaternion) Clone() *HilStateQuaternion {
	c := &HilStateQuaternion{}
	c.Header = *t.Header.Clone()
	c.Orientation = *t.Orientation.Clone()
	c.AngularVelocity = *t.AngularVelocity.Clone()
	c.LinearAcceleration = *t.LinearAcceleration.Clone()
	c.LinearVelocity = *t.LinearVelocity.Clone()
	c.Geo = *t.Geo.Clone()
	c.IndAirspeed = t.IndAirspeed
	c.TrueAirspeed = t.TrueAirspeed
	return c
}

func (t *HilStateQuaternion) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HilStateQuaternion) SetDefaults() {
	t.Header.SetDefaults()
	t.Orientation.SetDefaults()
	t.AngularVelocity.SetDefaults()
	t.LinearAcceleration.SetDefaults()
	t.LinearVelocity.SetDefaults()
	t.Geo.SetDefaults()
	t.IndAirspeed = 0
	t.TrueAirspeed = 0
}

func (t *HilStateQuaternion) GetTypeSupport() types.MessageTypeSupport {
	return HilStateQuaternionTypeSupport
}

// HilStateQuaternionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HilStateQuaternionPublisher struct {
	*rclgo.Publisher
}

// NewHilStateQuaternionPublisher creates and returns a new publisher for the
// HilStateQuaternion
func NewHilStateQuaternionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HilStateQuaternionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HilStateQuaternionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HilStateQuaternionPublisher{pub}, nil
}

func (p *HilStateQuaternionPublisher) Publish(msg *HilStateQuaternion) error {
	return p.Publisher.Publish(msg)
}

// HilStateQuaternionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HilStateQuaternionSubscription struct {
	*rclgo.Subscription
}

// HilStateQuaternionSubscriptionCallback type is used to provide a subscription
// handler function for a HilStateQuaternionSubscription.
type HilStateQuaternionSubscriptionCallback func(msg *HilStateQuaternion, info *rclgo.MessageInfo, err error)

// NewHilStateQuaternionSubscription creates and returns a new subscription for the
// HilStateQuaternion
func NewHilStateQuaternionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HilStateQuaternionSubscriptionCallback) (*HilStateQuaternionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HilStateQuaternion
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HilStateQuaternionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HilStateQuaternionSubscription{sub}, nil
}

func (s *HilStateQuaternionSubscription) TakeMessage(out *HilStateQuaternion) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHilStateQuaternionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHilStateQuaternionSlice(dst, src []HilStateQuaternion) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HilStateQuaternionTypeSupport types.MessageTypeSupport = _HilStateQuaternionTypeSupport{}

type _HilStateQuaternionTypeSupport struct{}

func (t _HilStateQuaternionTypeSupport) New() types.Message {
	return NewHilStateQuaternion()
}

func (t _HilStateQuaternionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__HilStateQuaternion
	return (unsafe.Pointer)(C.mavros_msgs__msg__HilStateQuaternion__create())
}

func (t _HilStateQuaternionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__HilStateQuaternion__destroy((*C.mavros_msgs__msg__HilStateQuaternion)(pointer_to_free))
}

func (t _HilStateQuaternionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HilStateQuaternion)
	mem := (*C.mavros_msgs__msg__HilStateQuaternion)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.orientation), &m.Orientation)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.angular_velocity), &m.AngularVelocity)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.linear_acceleration), &m.LinearAcceleration)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.linear_velocity), &m.LinearVelocity)
	geographic_msgs_msg.GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.geo), &m.Geo)
	mem.ind_airspeed = C.float(m.IndAirspeed)
	mem.true_airspeed = C.float(m.TrueAirspeed)
}

func (t _HilStateQuaternionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HilStateQuaternion)
	mem := (*C.mavros_msgs__msg__HilStateQuaternion)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.Orientation, unsafe.Pointer(&mem.orientation))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.AngularVelocity, unsafe.Pointer(&mem.angular_velocity))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.LinearAcceleration, unsafe.Pointer(&mem.linear_acceleration))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.LinearVelocity, unsafe.Pointer(&mem.linear_velocity))
	geographic_msgs_msg.GeoPointTypeSupport.AsGoStruct(&m.Geo, unsafe.Pointer(&mem.geo))
	m.IndAirspeed = float32(mem.ind_airspeed)
	m.TrueAirspeed = float32(mem.true_airspeed)
}

func (t _HilStateQuaternionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__HilStateQuaternion())
}

type CHilStateQuaternion = C.mavros_msgs__msg__HilStateQuaternion
type CHilStateQuaternion__Sequence = C.mavros_msgs__msg__HilStateQuaternion__Sequence

func HilStateQuaternion__Sequence_to_Go(goSlice *[]HilStateQuaternion, cSlice CHilStateQuaternion__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HilStateQuaternion, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HilStateQuaternionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HilStateQuaternion__Sequence_to_C(cSlice *CHilStateQuaternion__Sequence, goSlice []HilStateQuaternion) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__HilStateQuaternion)(C.malloc(C.sizeof_struct_mavros_msgs__msg__HilStateQuaternion * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HilStateQuaternionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HilStateQuaternion__Array_to_Go(goSlice []HilStateQuaternion, cSlice []CHilStateQuaternion) {
	for i := 0; i < len(cSlice); i++ {
		HilStateQuaternionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HilStateQuaternion__Array_to_C(cSlice []CHilStateQuaternion, goSlice []HilStateQuaternion) {
	for i := 0; i < len(goSlice); i++ {
		HilStateQuaternionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
