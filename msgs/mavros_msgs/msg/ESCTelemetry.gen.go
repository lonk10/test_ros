// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/esc_telemetry.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/ESCTelemetry", ESCTelemetryTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/ESCTelemetry", ESCTelemetryTypeSupport)
}

type ESCTelemetry struct {
	Header std_msgs_msg.Header `yaml:"header"`
	EscTelemetry []ESCTelemetryItem `yaml:"esc_telemetry"`
}

// NewESCTelemetry creates a new ESCTelemetry with default values.
func NewESCTelemetry() *ESCTelemetry {
	self := ESCTelemetry{}
	self.SetDefaults()
	return &self
}

func (t *ESCTelemetry) Clone() *ESCTelemetry {
	c := &ESCTelemetry{}
	c.Header = *t.Header.Clone()
	if t.EscTelemetry != nil {
		c.EscTelemetry = make([]ESCTelemetryItem, len(t.EscTelemetry))
		CloneESCTelemetryItemSlice(c.EscTelemetry, t.EscTelemetry)
	}
	return c
}

func (t *ESCTelemetry) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ESCTelemetry) SetDefaults() {
	t.Header.SetDefaults()
	t.EscTelemetry = nil
}

func (t *ESCTelemetry) GetTypeSupport() types.MessageTypeSupport {
	return ESCTelemetryTypeSupport
}

// ESCTelemetryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ESCTelemetryPublisher struct {
	*rclgo.Publisher
}

// NewESCTelemetryPublisher creates and returns a new publisher for the
// ESCTelemetry
func NewESCTelemetryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ESCTelemetryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ESCTelemetryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ESCTelemetryPublisher{pub}, nil
}

func (p *ESCTelemetryPublisher) Publish(msg *ESCTelemetry) error {
	return p.Publisher.Publish(msg)
}

// ESCTelemetrySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ESCTelemetrySubscription struct {
	*rclgo.Subscription
}

// ESCTelemetrySubscriptionCallback type is used to provide a subscription
// handler function for a ESCTelemetrySubscription.
type ESCTelemetrySubscriptionCallback func(msg *ESCTelemetry, info *rclgo.MessageInfo, err error)

// NewESCTelemetrySubscription creates and returns a new subscription for the
// ESCTelemetry
func NewESCTelemetrySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ESCTelemetrySubscriptionCallback) (*ESCTelemetrySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ESCTelemetry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ESCTelemetryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ESCTelemetrySubscription{sub}, nil
}

func (s *ESCTelemetrySubscription) TakeMessage(out *ESCTelemetry) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneESCTelemetrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneESCTelemetrySlice(dst, src []ESCTelemetry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ESCTelemetryTypeSupport types.MessageTypeSupport = _ESCTelemetryTypeSupport{}

type _ESCTelemetryTypeSupport struct{}

func (t _ESCTelemetryTypeSupport) New() types.Message {
	return NewESCTelemetry()
}

func (t _ESCTelemetryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__ESCTelemetry
	return (unsafe.Pointer)(C.mavros_msgs__msg__ESCTelemetry__create())
}

func (t _ESCTelemetryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__ESCTelemetry__destroy((*C.mavros_msgs__msg__ESCTelemetry)(pointer_to_free))
}

func (t _ESCTelemetryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ESCTelemetry)
	mem := (*C.mavros_msgs__msg__ESCTelemetry)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	ESCTelemetryItem__Sequence_to_C(&mem.esc_telemetry, m.EscTelemetry)
}

func (t _ESCTelemetryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ESCTelemetry)
	mem := (*C.mavros_msgs__msg__ESCTelemetry)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	ESCTelemetryItem__Sequence_to_Go(&m.EscTelemetry, mem.esc_telemetry)
}

func (t _ESCTelemetryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__ESCTelemetry())
}

type CESCTelemetry = C.mavros_msgs__msg__ESCTelemetry
type CESCTelemetry__Sequence = C.mavros_msgs__msg__ESCTelemetry__Sequence

func ESCTelemetry__Sequence_to_Go(goSlice *[]ESCTelemetry, cSlice CESCTelemetry__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ESCTelemetry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ESCTelemetryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ESCTelemetry__Sequence_to_C(cSlice *CESCTelemetry__Sequence, goSlice []ESCTelemetry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__ESCTelemetry)(C.malloc(C.sizeof_struct_mavros_msgs__msg__ESCTelemetry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ESCTelemetryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ESCTelemetry__Array_to_Go(goSlice []ESCTelemetry, cSlice []CESCTelemetry) {
	for i := 0; i < len(cSlice); i++ {
		ESCTelemetryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ESCTelemetry__Array_to_C(cSlice []CESCTelemetry, goSlice []ESCTelemetry) {
	for i := 0; i < len(goSlice); i++ {
		ESCTelemetryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
