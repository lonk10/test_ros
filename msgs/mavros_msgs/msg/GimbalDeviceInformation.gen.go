// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/gimbal_device_information.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/GimbalDeviceInformation", GimbalDeviceInformationTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/GimbalDeviceInformation", GimbalDeviceInformationTypeSupport)
}
const (
	GimbalDeviceInformation_CAP_FLAGS_HAS_RETRACT uint32 = 1// Gimbal device supports a retracted position. GIMBAL_DEVICE_CAP_FLAGS
	GimbalDeviceInformation_CAP_FLAGS_HAS_NEUTRAL uint32 = 2// Gimbal device supports a horizontal, forward looking position, stabilized
	GimbalDeviceInformation_CAP_FLAGS_HAS_ROLL_AXIS uint32 = 4// Gimbal device supports rotating around roll axis.
	GimbalDeviceInformation_CAP_FLAGS_HAS_ROLL_FOLLOW uint32 = 8// Gimbal device supports to follow a roll angle relative to the vehicle
	GimbalDeviceInformation_CAP_FLAGS_HAS_ROLL_LOCK uint32 = 16// Gimbal device supports locking to an roll angle (generally that's the default with roll stabilized)
	GimbalDeviceInformation_CAP_FLAGS_HAS_PITCH_AXIS uint32 = 32// Gimbal device supports rotating around pitch axis.
	GimbalDeviceInformation_CAP_FLAGS_HAS_PITCH_FOLLOW uint32 = 64// Gimbal device supports to follow a pitch angle relative to the vehicle
	GimbalDeviceInformation_CAP_FLAGS_HAS_PITCH_LOCK uint32 = 128// Gimbal device supports locking to an pitch angle (generally that's the default with pitch stabilized)
	GimbalDeviceInformation_CAP_FLAGS_HAS_YAW_AXIS uint32 = 256// Gimbal device supports rotating around yaw axis.
	GimbalDeviceInformation_CAP_FLAGS_HAS_YAW_FOLLOW uint32 = 512// Gimbal device supports to follow a yaw angle relative to the vehicle (generally that's the default)
	GimbalDeviceInformation_CAP_FLAGS_HAS_YAW_LOCK uint32 = 1024// Gimbal device supports locking to an absolute heading (often this is an option available)
	GimbalDeviceInformation_CAP_FLAGS_SUPPORTS_INFINITE_YAW uint32 = 2048// Gimbal device supports yawing/panning infinetely (e.g. using slip disk).
)

type GimbalDeviceInformation struct {
	Header std_msgs_msg.Header `yaml:"header"`
	VendorName string `yaml:"vendor_name"`// Name of the gimbal vendor.
	ModelName string `yaml:"model_name"`// Name of the gimbal model.
	CustomName string `yaml:"custom_name"`// Custom name of the gimbal given to it by the user.
	FirmwareVersion uint32 `yaml:"firmware_version"`// Version of the gimbal firmware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
	HardwareVersion uint32 `yaml:"hardware_version"`// Version of the gimbal hardware, encoded as: (Dev & 0xff) << 24 | (Patch & 0xff) << 16 | (Minor & 0xff) << 8 | (Major & 0xff).
	Uid uint64 `yaml:"uid"`// UID of gimbal hardware (0 if unknown).
	CapFlags uint32 `yaml:"cap_flags"`// Bitmap of gimbal capability flags - see GIMBAL_DEVICE_CAP_FLAGS
	CustomCapFlags uint16 `yaml:"custom_cap_flags"`// Bitmap for use for gimbal-specific capability flags.
	RollMin float32 `yaml:"roll_min"`// Minimum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	RollMax float32 `yaml:"roll_max"`// Maximum hardware roll angle (positive: rolling to the right, negative: rolling to the left)
	PitchMin float32 `yaml:"pitch_min"`// Minimum pitch angle (positive: up, negative: down)
	PitchMax float32 `yaml:"pitch_max"`// Maximum pitch angle (positive: up, negative: down)
	YawMin float32 `yaml:"yaw_min"`// Minimum yaw angle (positive: to the right, negative: to the left)
	YawMax float32 `yaml:"yaw_max"`// Maximum yaw angle (positive: to the right, negative: to the left)
}

// NewGimbalDeviceInformation creates a new GimbalDeviceInformation with default values.
func NewGimbalDeviceInformation() *GimbalDeviceInformation {
	self := GimbalDeviceInformation{}
	self.SetDefaults()
	return &self
}

func (t *GimbalDeviceInformation) Clone() *GimbalDeviceInformation {
	c := &GimbalDeviceInformation{}
	c.Header = *t.Header.Clone()
	c.VendorName = t.VendorName
	c.ModelName = t.ModelName
	c.CustomName = t.CustomName
	c.FirmwareVersion = t.FirmwareVersion
	c.HardwareVersion = t.HardwareVersion
	c.Uid = t.Uid
	c.CapFlags = t.CapFlags
	c.CustomCapFlags = t.CustomCapFlags
	c.RollMin = t.RollMin
	c.RollMax = t.RollMax
	c.PitchMin = t.PitchMin
	c.PitchMax = t.PitchMax
	c.YawMin = t.YawMin
	c.YawMax = t.YawMax
	return c
}

func (t *GimbalDeviceInformation) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalDeviceInformation) SetDefaults() {
	t.Header.SetDefaults()
	t.VendorName = ""
	t.ModelName = ""
	t.CustomName = ""
	t.FirmwareVersion = 0
	t.HardwareVersion = 0
	t.Uid = 0
	t.CapFlags = 0
	t.CustomCapFlags = 0
	t.RollMin = 0
	t.RollMax = 0
	t.PitchMin = 0
	t.PitchMax = 0
	t.YawMin = 0
	t.YawMax = 0
}

func (t *GimbalDeviceInformation) GetTypeSupport() types.MessageTypeSupport {
	return GimbalDeviceInformationTypeSupport
}

// GimbalDeviceInformationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalDeviceInformationPublisher struct {
	*rclgo.Publisher
}

// NewGimbalDeviceInformationPublisher creates and returns a new publisher for the
// GimbalDeviceInformation
func NewGimbalDeviceInformationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalDeviceInformationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalDeviceInformationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalDeviceInformationPublisher{pub}, nil
}

func (p *GimbalDeviceInformationPublisher) Publish(msg *GimbalDeviceInformation) error {
	return p.Publisher.Publish(msg)
}

// GimbalDeviceInformationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalDeviceInformationSubscription struct {
	*rclgo.Subscription
}

// GimbalDeviceInformationSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalDeviceInformationSubscription.
type GimbalDeviceInformationSubscriptionCallback func(msg *GimbalDeviceInformation, info *rclgo.MessageInfo, err error)

// NewGimbalDeviceInformationSubscription creates and returns a new subscription for the
// GimbalDeviceInformation
func NewGimbalDeviceInformationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalDeviceInformationSubscriptionCallback) (*GimbalDeviceInformationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalDeviceInformation
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalDeviceInformationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalDeviceInformationSubscription{sub}, nil
}

func (s *GimbalDeviceInformationSubscription) TakeMessage(out *GimbalDeviceInformation) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalDeviceInformationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalDeviceInformationSlice(dst, src []GimbalDeviceInformation) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalDeviceInformationTypeSupport types.MessageTypeSupport = _GimbalDeviceInformationTypeSupport{}

type _GimbalDeviceInformationTypeSupport struct{}

func (t _GimbalDeviceInformationTypeSupport) New() types.Message {
	return NewGimbalDeviceInformation()
}

func (t _GimbalDeviceInformationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__GimbalDeviceInformation
	return (unsafe.Pointer)(C.mavros_msgs__msg__GimbalDeviceInformation__create())
}

func (t _GimbalDeviceInformationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__GimbalDeviceInformation__destroy((*C.mavros_msgs__msg__GimbalDeviceInformation)(pointer_to_free))
}

func (t _GimbalDeviceInformationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalDeviceInformation)
	mem := (*C.mavros_msgs__msg__GimbalDeviceInformation)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.vendor_name), m.VendorName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.model_name), m.ModelName)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.custom_name), m.CustomName)
	mem.firmware_version = C.uint32_t(m.FirmwareVersion)
	mem.hardware_version = C.uint32_t(m.HardwareVersion)
	mem.uid = C.uint64_t(m.Uid)
	mem.cap_flags = C.uint32_t(m.CapFlags)
	mem.custom_cap_flags = C.uint16_t(m.CustomCapFlags)
	mem.roll_min = C.float(m.RollMin)
	mem.roll_max = C.float(m.RollMax)
	mem.pitch_min = C.float(m.PitchMin)
	mem.pitch_max = C.float(m.PitchMax)
	mem.yaw_min = C.float(m.YawMin)
	mem.yaw_max = C.float(m.YawMax)
}

func (t _GimbalDeviceInformationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalDeviceInformation)
	mem := (*C.mavros_msgs__msg__GimbalDeviceInformation)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.StringAsGoStruct(&m.VendorName, unsafe.Pointer(&mem.vendor_name))
	primitives.StringAsGoStruct(&m.ModelName, unsafe.Pointer(&mem.model_name))
	primitives.StringAsGoStruct(&m.CustomName, unsafe.Pointer(&mem.custom_name))
	m.FirmwareVersion = uint32(mem.firmware_version)
	m.HardwareVersion = uint32(mem.hardware_version)
	m.Uid = uint64(mem.uid)
	m.CapFlags = uint32(mem.cap_flags)
	m.CustomCapFlags = uint16(mem.custom_cap_flags)
	m.RollMin = float32(mem.roll_min)
	m.RollMax = float32(mem.roll_max)
	m.PitchMin = float32(mem.pitch_min)
	m.PitchMax = float32(mem.pitch_max)
	m.YawMin = float32(mem.yaw_min)
	m.YawMax = float32(mem.yaw_max)
}

func (t _GimbalDeviceInformationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__GimbalDeviceInformation())
}

type CGimbalDeviceInformation = C.mavros_msgs__msg__GimbalDeviceInformation
type CGimbalDeviceInformation__Sequence = C.mavros_msgs__msg__GimbalDeviceInformation__Sequence

func GimbalDeviceInformation__Sequence_to_Go(goSlice *[]GimbalDeviceInformation, cSlice CGimbalDeviceInformation__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalDeviceInformation, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalDeviceInformationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalDeviceInformation__Sequence_to_C(cSlice *CGimbalDeviceInformation__Sequence, goSlice []GimbalDeviceInformation) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__GimbalDeviceInformation)(C.malloc(C.sizeof_struct_mavros_msgs__msg__GimbalDeviceInformation * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalDeviceInformationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalDeviceInformation__Array_to_Go(goSlice []GimbalDeviceInformation, cSlice []CGimbalDeviceInformation) {
	for i := 0; i < len(cSlice); i++ {
		GimbalDeviceInformationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalDeviceInformation__Array_to_C(cSlice []CGimbalDeviceInformation, goSlice []GimbalDeviceInformation) {
	for i := 0; i < len(goSlice); i++ {
		GimbalDeviceInformationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
