// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/wheel_odom_stamped.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/WheelOdomStamped", WheelOdomStampedTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/WheelOdomStamped", WheelOdomStampedTypeSupport)
}

type WheelOdomStamped struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Data []float64 `yaml:"data"`
}

// NewWheelOdomStamped creates a new WheelOdomStamped with default values.
func NewWheelOdomStamped() *WheelOdomStamped {
	self := WheelOdomStamped{}
	self.SetDefaults()
	return &self
}

func (t *WheelOdomStamped) Clone() *WheelOdomStamped {
	c := &WheelOdomStamped{}
	c.Header = *t.Header.Clone()
	if t.Data != nil {
		c.Data = make([]float64, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *WheelOdomStamped) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WheelOdomStamped) SetDefaults() {
	t.Header.SetDefaults()
	t.Data = nil
}

func (t *WheelOdomStamped) GetTypeSupport() types.MessageTypeSupport {
	return WheelOdomStampedTypeSupport
}

// WheelOdomStampedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WheelOdomStampedPublisher struct {
	*rclgo.Publisher
}

// NewWheelOdomStampedPublisher creates and returns a new publisher for the
// WheelOdomStamped
func NewWheelOdomStampedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WheelOdomStampedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WheelOdomStampedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WheelOdomStampedPublisher{pub}, nil
}

func (p *WheelOdomStampedPublisher) Publish(msg *WheelOdomStamped) error {
	return p.Publisher.Publish(msg)
}

// WheelOdomStampedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WheelOdomStampedSubscription struct {
	*rclgo.Subscription
}

// WheelOdomStampedSubscriptionCallback type is used to provide a subscription
// handler function for a WheelOdomStampedSubscription.
type WheelOdomStampedSubscriptionCallback func(msg *WheelOdomStamped, info *rclgo.MessageInfo, err error)

// NewWheelOdomStampedSubscription creates and returns a new subscription for the
// WheelOdomStamped
func NewWheelOdomStampedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WheelOdomStampedSubscriptionCallback) (*WheelOdomStampedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WheelOdomStamped
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WheelOdomStampedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WheelOdomStampedSubscription{sub}, nil
}

func (s *WheelOdomStampedSubscription) TakeMessage(out *WheelOdomStamped) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWheelOdomStampedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWheelOdomStampedSlice(dst, src []WheelOdomStamped) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WheelOdomStampedTypeSupport types.MessageTypeSupport = _WheelOdomStampedTypeSupport{}

type _WheelOdomStampedTypeSupport struct{}

func (t _WheelOdomStampedTypeSupport) New() types.Message {
	return NewWheelOdomStamped()
}

func (t _WheelOdomStampedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__WheelOdomStamped
	return (unsafe.Pointer)(C.mavros_msgs__msg__WheelOdomStamped__create())
}

func (t _WheelOdomStampedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__WheelOdomStamped__destroy((*C.mavros_msgs__msg__WheelOdomStamped)(pointer_to_free))
}

func (t _WheelOdomStampedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WheelOdomStamped)
	mem := (*C.mavros_msgs__msg__WheelOdomStamped)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _WheelOdomStampedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WheelOdomStamped)
	mem := (*C.mavros_msgs__msg__WheelOdomStamped)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	primitives.Float64__Sequence_to_Go(&m.Data, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _WheelOdomStampedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__WheelOdomStamped())
}

type CWheelOdomStamped = C.mavros_msgs__msg__WheelOdomStamped
type CWheelOdomStamped__Sequence = C.mavros_msgs__msg__WheelOdomStamped__Sequence

func WheelOdomStamped__Sequence_to_Go(goSlice *[]WheelOdomStamped, cSlice CWheelOdomStamped__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WheelOdomStamped, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WheelOdomStampedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WheelOdomStamped__Sequence_to_C(cSlice *CWheelOdomStamped__Sequence, goSlice []WheelOdomStamped) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__WheelOdomStamped)(C.malloc(C.sizeof_struct_mavros_msgs__msg__WheelOdomStamped * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WheelOdomStampedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WheelOdomStamped__Array_to_Go(goSlice []WheelOdomStamped, cSlice []CWheelOdomStamped) {
	for i := 0; i < len(cSlice); i++ {
		WheelOdomStampedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WheelOdomStamped__Array_to_C(cSlice []CWheelOdomStamped, goSlice []WheelOdomStamped) {
	for i := 0; i < len(goSlice); i++ {
		WheelOdomStampedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
