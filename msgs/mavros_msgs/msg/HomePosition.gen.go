// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geographic_msgs_msg "test/msgs/geographic_msgs/msg"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/home_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/HomePosition", HomePositionTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/HomePosition", HomePositionTypeSupport)
}

type HomePosition struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Geo geographic_msgs_msg.GeoPoint `yaml:"geo"`// geodetic coordinates in WGS-84 datum
	Position geometry_msgs_msg.Point `yaml:"position"`// local position
	Orientation geometry_msgs_msg.Quaternion `yaml:"orientation"`// XXX: verify field name (q[4])
	Approach geometry_msgs_msg.Vector3 `yaml:"approach"`// position of the end of approach vector
}

// NewHomePosition creates a new HomePosition with default values.
func NewHomePosition() *HomePosition {
	self := HomePosition{}
	self.SetDefaults()
	return &self
}

func (t *HomePosition) Clone() *HomePosition {
	c := &HomePosition{}
	c.Header = *t.Header.Clone()
	c.Geo = *t.Geo.Clone()
	c.Position = *t.Position.Clone()
	c.Orientation = *t.Orientation.Clone()
	c.Approach = *t.Approach.Clone()
	return c
}

func (t *HomePosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HomePosition) SetDefaults() {
	t.Header.SetDefaults()
	t.Geo.SetDefaults()
	t.Position.SetDefaults()
	t.Orientation.SetDefaults()
	t.Approach.SetDefaults()
}

func (t *HomePosition) GetTypeSupport() types.MessageTypeSupport {
	return HomePositionTypeSupport
}

// HomePositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HomePositionPublisher struct {
	*rclgo.Publisher
}

// NewHomePositionPublisher creates and returns a new publisher for the
// HomePosition
func NewHomePositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HomePositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HomePositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HomePositionPublisher{pub}, nil
}

func (p *HomePositionPublisher) Publish(msg *HomePosition) error {
	return p.Publisher.Publish(msg)
}

// HomePositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HomePositionSubscription struct {
	*rclgo.Subscription
}

// HomePositionSubscriptionCallback type is used to provide a subscription
// handler function for a HomePositionSubscription.
type HomePositionSubscriptionCallback func(msg *HomePosition, info *rclgo.MessageInfo, err error)

// NewHomePositionSubscription creates and returns a new subscription for the
// HomePosition
func NewHomePositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HomePositionSubscriptionCallback) (*HomePositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HomePosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HomePositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HomePositionSubscription{sub}, nil
}

func (s *HomePositionSubscription) TakeMessage(out *HomePosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHomePositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHomePositionSlice(dst, src []HomePosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HomePositionTypeSupport types.MessageTypeSupport = _HomePositionTypeSupport{}

type _HomePositionTypeSupport struct{}

func (t _HomePositionTypeSupport) New() types.Message {
	return NewHomePosition()
}

func (t _HomePositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__HomePosition
	return (unsafe.Pointer)(C.mavros_msgs__msg__HomePosition__create())
}

func (t _HomePositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__HomePosition__destroy((*C.mavros_msgs__msg__HomePosition)(pointer_to_free))
}

func (t _HomePositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HomePosition)
	mem := (*C.mavros_msgs__msg__HomePosition)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geographic_msgs_msg.GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.geo), &m.Geo)
	geometry_msgs_msg.PointTypeSupport.AsCStruct(unsafe.Pointer(&mem.position), &m.Position)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.orientation), &m.Orientation)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.approach), &m.Approach)
}

func (t _HomePositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HomePosition)
	mem := (*C.mavros_msgs__msg__HomePosition)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geographic_msgs_msg.GeoPointTypeSupport.AsGoStruct(&m.Geo, unsafe.Pointer(&mem.geo))
	geometry_msgs_msg.PointTypeSupport.AsGoStruct(&m.Position, unsafe.Pointer(&mem.position))
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.Orientation, unsafe.Pointer(&mem.orientation))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Approach, unsafe.Pointer(&mem.approach))
}

func (t _HomePositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__HomePosition())
}

type CHomePosition = C.mavros_msgs__msg__HomePosition
type CHomePosition__Sequence = C.mavros_msgs__msg__HomePosition__Sequence

func HomePosition__Sequence_to_Go(goSlice *[]HomePosition, cSlice CHomePosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HomePosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HomePositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HomePosition__Sequence_to_C(cSlice *CHomePosition__Sequence, goSlice []HomePosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__HomePosition)(C.malloc(C.sizeof_struct_mavros_msgs__msg__HomePosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HomePositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HomePosition__Array_to_Go(goSlice []HomePosition, cSlice []CHomePosition) {
	for i := 0; i < len(cSlice); i++ {
		HomePositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HomePosition__Array_to_C(cSlice []CHomePosition, goSlice []HomePosition) {
	for i := 0; i < len(goSlice); i++ {
		HomePositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
