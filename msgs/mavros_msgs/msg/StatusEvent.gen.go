// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/status_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/StatusEvent", StatusEventTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/StatusEvent", StatusEventTypeSupport)
}
const (
	StatusEvent_EMERGENCY uint8 = 0// Severity levels
	StatusEvent_ALERT uint8 = 1
	StatusEvent_CRITICAL uint8 = 2
	StatusEvent_ERROR uint8 = 3
	StatusEvent_WARNING uint8 = 4
	StatusEvent_NOTICE uint8 = 5
	StatusEvent_INFO uint8 = 6
	StatusEvent_DEBUG uint8 = 7
)

type StatusEvent struct {
	Header std_msgs_msg.Header `yaml:"header"`// Fields
	Severity uint8 `yaml:"severity"`
	Px4Id uint32 `yaml:"px4_id"`
	Arguments [40]uint8 `yaml:"arguments"`
	Sequence uint16 `yaml:"sequence"`
}

// NewStatusEvent creates a new StatusEvent with default values.
func NewStatusEvent() *StatusEvent {
	self := StatusEvent{}
	self.SetDefaults()
	return &self
}

func (t *StatusEvent) Clone() *StatusEvent {
	c := &StatusEvent{}
	c.Header = *t.Header.Clone()
	c.Severity = t.Severity
	c.Px4Id = t.Px4Id
	c.Arguments = t.Arguments
	c.Sequence = t.Sequence
	return c
}

func (t *StatusEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *StatusEvent) SetDefaults() {
	t.Header.SetDefaults()
	t.Severity = 0
	t.Px4Id = 0
	t.Arguments = [40]uint8{}
	t.Sequence = 0
}

func (t *StatusEvent) GetTypeSupport() types.MessageTypeSupport {
	return StatusEventTypeSupport
}

// StatusEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type StatusEventPublisher struct {
	*rclgo.Publisher
}

// NewStatusEventPublisher creates and returns a new publisher for the
// StatusEvent
func NewStatusEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*StatusEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, StatusEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StatusEventPublisher{pub}, nil
}

func (p *StatusEventPublisher) Publish(msg *StatusEvent) error {
	return p.Publisher.Publish(msg)
}

// StatusEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type StatusEventSubscription struct {
	*rclgo.Subscription
}

// StatusEventSubscriptionCallback type is used to provide a subscription
// handler function for a StatusEventSubscription.
type StatusEventSubscriptionCallback func(msg *StatusEvent, info *rclgo.MessageInfo, err error)

// NewStatusEventSubscription creates and returns a new subscription for the
// StatusEvent
func NewStatusEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback StatusEventSubscriptionCallback) (*StatusEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg StatusEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, StatusEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StatusEventSubscription{sub}, nil
}

func (s *StatusEventSubscription) TakeMessage(out *StatusEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStatusEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStatusEventSlice(dst, src []StatusEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StatusEventTypeSupport types.MessageTypeSupport = _StatusEventTypeSupport{}

type _StatusEventTypeSupport struct{}

func (t _StatusEventTypeSupport) New() types.Message {
	return NewStatusEvent()
}

func (t _StatusEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__StatusEvent
	return (unsafe.Pointer)(C.mavros_msgs__msg__StatusEvent__create())
}

func (t _StatusEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__StatusEvent__destroy((*C.mavros_msgs__msg__StatusEvent)(pointer_to_free))
}

func (t _StatusEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*StatusEvent)
	mem := (*C.mavros_msgs__msg__StatusEvent)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.severity = C.uint8_t(m.Severity)
	mem.px4_id = C.uint32_t(m.Px4Id)
	cSlice_arguments := mem.arguments[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_arguments)), m.Arguments[:])
	mem.sequence = C.uint16_t(m.Sequence)
}

func (t _StatusEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*StatusEvent)
	mem := (*C.mavros_msgs__msg__StatusEvent)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Severity = uint8(mem.severity)
	m.Px4Id = uint32(mem.px4_id)
	cSlice_arguments := mem.arguments[:]
	primitives.Uint8__Array_to_Go(m.Arguments[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_arguments)))
	m.Sequence = uint16(mem.sequence)
}

func (t _StatusEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__StatusEvent())
}

type CStatusEvent = C.mavros_msgs__msg__StatusEvent
type CStatusEvent__Sequence = C.mavros_msgs__msg__StatusEvent__Sequence

func StatusEvent__Sequence_to_Go(goSlice *[]StatusEvent, cSlice CStatusEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]StatusEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StatusEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func StatusEvent__Sequence_to_C(cSlice *CStatusEvent__Sequence, goSlice []StatusEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__StatusEvent)(C.malloc(C.sizeof_struct_mavros_msgs__msg__StatusEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StatusEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func StatusEvent__Array_to_Go(goSlice []StatusEvent, cSlice []CStatusEvent) {
	for i := 0; i < len(cSlice); i++ {
		StatusEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func StatusEvent__Array_to_C(cSlice []CStatusEvent, goSlice []StatusEvent) {
	for i := 0; i < len(goSlice); i++ {
		StatusEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
