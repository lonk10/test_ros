// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/tunnel.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/Tunnel", TunnelTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/Tunnel", TunnelTypeSupport)
}
const (
	Tunnel_PAYLOAD_TYPE_UNKNOWN uint16 = 0// Encoding of payload unknown.. [[[cog:import mavros_cogmavros_cog.idl_decl_enum('MAV_TUNNEL_PAYLOAD_TYPE', 'PAYLOAD_TYPE_', 16)]]]MAV_TUNNEL_PAYLOAD_TYPE
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED0 uint16 = 200// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED1 uint16 = 201// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED2 uint16 = 202// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED3 uint16 = 203// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED4 uint16 = 204// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED5 uint16 = 205// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED6 uint16 = 206// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED7 uint16 = 207// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED8 uint16 = 208// Registered for STorM32 gimbal controller.
	Tunnel_PAYLOAD_TYPE_STORM32_RESERVED9 uint16 = 209// Registered for STorM32 gimbal controller.
)

type Tunnel struct {
	TargetSystem uint8 `yaml:"target_system"`
	TargetComponent uint8 `yaml:"target_component"`
	PayloadType uint16 `yaml:"payload_type"`
	PayloadLength uint8 `yaml:"payload_length"`
	Payload [128]uint8 `yaml:"payload"`
}

// NewTunnel creates a new Tunnel with default values.
func NewTunnel() *Tunnel {
	self := Tunnel{}
	self.SetDefaults()
	return &self
}

func (t *Tunnel) Clone() *Tunnel {
	c := &Tunnel{}
	c.TargetSystem = t.TargetSystem
	c.TargetComponent = t.TargetComponent
	c.PayloadType = t.PayloadType
	c.PayloadLength = t.PayloadLength
	c.Payload = t.Payload
	return c
}

func (t *Tunnel) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Tunnel) SetDefaults() {
	t.TargetSystem = 0
	t.TargetComponent = 0
	t.PayloadType = 0
	t.PayloadLength = 0
	t.Payload = [128]uint8{}
}

func (t *Tunnel) GetTypeSupport() types.MessageTypeSupport {
	return TunnelTypeSupport
}

// TunnelPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TunnelPublisher struct {
	*rclgo.Publisher
}

// NewTunnelPublisher creates and returns a new publisher for the
// Tunnel
func NewTunnelPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TunnelPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TunnelTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TunnelPublisher{pub}, nil
}

func (p *TunnelPublisher) Publish(msg *Tunnel) error {
	return p.Publisher.Publish(msg)
}

// TunnelSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TunnelSubscription struct {
	*rclgo.Subscription
}

// TunnelSubscriptionCallback type is used to provide a subscription
// handler function for a TunnelSubscription.
type TunnelSubscriptionCallback func(msg *Tunnel, info *rclgo.MessageInfo, err error)

// NewTunnelSubscription creates and returns a new subscription for the
// Tunnel
func NewTunnelSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TunnelSubscriptionCallback) (*TunnelSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Tunnel
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TunnelTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TunnelSubscription{sub}, nil
}

func (s *TunnelSubscription) TakeMessage(out *Tunnel) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTunnelSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTunnelSlice(dst, src []Tunnel) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TunnelTypeSupport types.MessageTypeSupport = _TunnelTypeSupport{}

type _TunnelTypeSupport struct{}

func (t _TunnelTypeSupport) New() types.Message {
	return NewTunnel()
}

func (t _TunnelTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__Tunnel
	return (unsafe.Pointer)(C.mavros_msgs__msg__Tunnel__create())
}

func (t _TunnelTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__Tunnel__destroy((*C.mavros_msgs__msg__Tunnel)(pointer_to_free))
}

func (t _TunnelTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Tunnel)
	mem := (*C.mavros_msgs__msg__Tunnel)(dst)
	mem.target_system = C.uint8_t(m.TargetSystem)
	mem.target_component = C.uint8_t(m.TargetComponent)
	mem.payload_type = C.uint16_t(m.PayloadType)
	mem.payload_length = C.uint8_t(m.PayloadLength)
	cSlice_payload := mem.payload[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_payload)), m.Payload[:])
}

func (t _TunnelTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Tunnel)
	mem := (*C.mavros_msgs__msg__Tunnel)(ros2_message_buffer)
	m.TargetSystem = uint8(mem.target_system)
	m.TargetComponent = uint8(mem.target_component)
	m.PayloadType = uint16(mem.payload_type)
	m.PayloadLength = uint8(mem.payload_length)
	cSlice_payload := mem.payload[:]
	primitives.Uint8__Array_to_Go(m.Payload[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_payload)))
}

func (t _TunnelTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__Tunnel())
}

type CTunnel = C.mavros_msgs__msg__Tunnel
type CTunnel__Sequence = C.mavros_msgs__msg__Tunnel__Sequence

func Tunnel__Sequence_to_Go(goSlice *[]Tunnel, cSlice CTunnel__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Tunnel, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TunnelTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Tunnel__Sequence_to_C(cSlice *CTunnel__Sequence, goSlice []Tunnel) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__Tunnel)(C.malloc(C.sizeof_struct_mavros_msgs__msg__Tunnel * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TunnelTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Tunnel__Array_to_Go(goSlice []Tunnel, cSlice []CTunnel) {
	for i := 0; i < len(cSlice); i++ {
		TunnelTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Tunnel__Array_to_C(cSlice []CTunnel, goSlice []Tunnel) {
	for i := 0; i < len(goSlice); i++ {
		TunnelTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
