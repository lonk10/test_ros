// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "test/msgs/builtin_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/cam_imu_stamp.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CamIMUStamp", CamIMUStampTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/CamIMUStamp", CamIMUStampTypeSupport)
}

type CamIMUStamp struct {
	FrameStamp builtin_interfaces_msg.Time `yaml:"frame_stamp"`// Timestamp when the camera was triggered
	FrameSeqId int32 `yaml:"frame_seq_id"`// Sequence number of the image frame
}

// NewCamIMUStamp creates a new CamIMUStamp with default values.
func NewCamIMUStamp() *CamIMUStamp {
	self := CamIMUStamp{}
	self.SetDefaults()
	return &self
}

func (t *CamIMUStamp) Clone() *CamIMUStamp {
	c := &CamIMUStamp{}
	c.FrameStamp = *t.FrameStamp.Clone()
	c.FrameSeqId = t.FrameSeqId
	return c
}

func (t *CamIMUStamp) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CamIMUStamp) SetDefaults() {
	t.FrameStamp.SetDefaults()
	t.FrameSeqId = 0
}

func (t *CamIMUStamp) GetTypeSupport() types.MessageTypeSupport {
	return CamIMUStampTypeSupport
}

// CamIMUStampPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CamIMUStampPublisher struct {
	*rclgo.Publisher
}

// NewCamIMUStampPublisher creates and returns a new publisher for the
// CamIMUStamp
func NewCamIMUStampPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CamIMUStampPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CamIMUStampTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CamIMUStampPublisher{pub}, nil
}

func (p *CamIMUStampPublisher) Publish(msg *CamIMUStamp) error {
	return p.Publisher.Publish(msg)
}

// CamIMUStampSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CamIMUStampSubscription struct {
	*rclgo.Subscription
}

// CamIMUStampSubscriptionCallback type is used to provide a subscription
// handler function for a CamIMUStampSubscription.
type CamIMUStampSubscriptionCallback func(msg *CamIMUStamp, info *rclgo.MessageInfo, err error)

// NewCamIMUStampSubscription creates and returns a new subscription for the
// CamIMUStamp
func NewCamIMUStampSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CamIMUStampSubscriptionCallback) (*CamIMUStampSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CamIMUStamp
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CamIMUStampTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CamIMUStampSubscription{sub}, nil
}

func (s *CamIMUStampSubscription) TakeMessage(out *CamIMUStamp) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCamIMUStampSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCamIMUStampSlice(dst, src []CamIMUStamp) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CamIMUStampTypeSupport types.MessageTypeSupport = _CamIMUStampTypeSupport{}

type _CamIMUStampTypeSupport struct{}

func (t _CamIMUStampTypeSupport) New() types.Message {
	return NewCamIMUStamp()
}

func (t _CamIMUStampTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__CamIMUStamp
	return (unsafe.Pointer)(C.mavros_msgs__msg__CamIMUStamp__create())
}

func (t _CamIMUStampTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__CamIMUStamp__destroy((*C.mavros_msgs__msg__CamIMUStamp)(pointer_to_free))
}

func (t _CamIMUStampTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CamIMUStamp)
	mem := (*C.mavros_msgs__msg__CamIMUStamp)(dst)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.frame_stamp), &m.FrameStamp)
	mem.frame_seq_id = C.int32_t(m.FrameSeqId)
}

func (t _CamIMUStampTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CamIMUStamp)
	mem := (*C.mavros_msgs__msg__CamIMUStamp)(ros2_message_buffer)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.FrameStamp, unsafe.Pointer(&mem.frame_stamp))
	m.FrameSeqId = int32(mem.frame_seq_id)
}

func (t _CamIMUStampTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__CamIMUStamp())
}

type CCamIMUStamp = C.mavros_msgs__msg__CamIMUStamp
type CCamIMUStamp__Sequence = C.mavros_msgs__msg__CamIMUStamp__Sequence

func CamIMUStamp__Sequence_to_Go(goSlice *[]CamIMUStamp, cSlice CCamIMUStamp__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CamIMUStamp, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CamIMUStampTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CamIMUStamp__Sequence_to_C(cSlice *CCamIMUStamp__Sequence, goSlice []CamIMUStamp) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__CamIMUStamp)(C.malloc(C.sizeof_struct_mavros_msgs__msg__CamIMUStamp * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CamIMUStampTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CamIMUStamp__Array_to_Go(goSlice []CamIMUStamp, cSlice []CCamIMUStamp) {
	for i := 0; i < len(cSlice); i++ {
		CamIMUStampTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CamIMUStamp__Array_to_C(cSlice []CCamIMUStamp, goSlice []CamIMUStamp) {
	for i := 0; i < len(goSlice); i++ {
		CamIMUStampTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
