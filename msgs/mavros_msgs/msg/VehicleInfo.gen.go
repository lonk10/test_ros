// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/vehicle_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/VehicleInfo", VehicleInfoTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/VehicleInfo", VehicleInfoTypeSupport)
}
const (
	VehicleInfo_HAVE_INFO_HEARTBEAT uint8 = 1
	VehicleInfo_HAVE_INFO_AUTOPILOT_VERSION uint8 = 2
)

type VehicleInfo struct {
	Header std_msgs_msg.Header `yaml:"header"`
	AvailableInfo uint8 `yaml:"available_info"`// Bitmap shows what info is available
	Sysid uint8 `yaml:"sysid"`// SYSTEM ID. Vehicle address
	Compid uint8 `yaml:"compid"`// COMPONENT ID
	Autopilot uint8 `yaml:"autopilot"`// MAV_AUTOPILOT. -*- Heartbeat info -*-
	Type uint8 `yaml:"type"`// MAV_TYPE
	SystemStatus uint8 `yaml:"system_status"`// MAV_STATE
	BaseMode uint8 `yaml:"base_mode"`
	CustomMode uint32 `yaml:"custom_mode"`
	Mode string `yaml:"mode"`// MAV_MODE string
	ModeId uint32 `yaml:"mode_id"`// MAV_MODE number
	Capabilities uint64 `yaml:"capabilities"`// MAV_PROTOCOL_CAPABILITY. -*- Autopilot version -*-
	FlightSwVersion uint32 `yaml:"flight_sw_version"`// Firmware version number
	MiddlewareSwVersion uint32 `yaml:"middleware_sw_version"`// Middleware version number
	OsSwVersion uint32 `yaml:"os_sw_version"`// Operating system version number
	BoardVersion uint32 `yaml:"board_version"`// HW / board version (last 8 bytes should be silicon ID, if any)
	FlightCustomVersion string `yaml:"flight_custom_version"`// Custom version field, commonly from the first 8 bytes of the git hash
	VendorId uint16 `yaml:"vendor_id"`// ID of the board vendor
	ProductId uint16 `yaml:"product_id"`// ID of the product
	Uid uint64 `yaml:"uid"`// UID if provided by hardware
}

// NewVehicleInfo creates a new VehicleInfo with default values.
func NewVehicleInfo() *VehicleInfo {
	self := VehicleInfo{}
	self.SetDefaults()
	return &self
}

func (t *VehicleInfo) Clone() *VehicleInfo {
	c := &VehicleInfo{}
	c.Header = *t.Header.Clone()
	c.AvailableInfo = t.AvailableInfo
	c.Sysid = t.Sysid
	c.Compid = t.Compid
	c.Autopilot = t.Autopilot
	c.Type = t.Type
	c.SystemStatus = t.SystemStatus
	c.BaseMode = t.BaseMode
	c.CustomMode = t.CustomMode
	c.Mode = t.Mode
	c.ModeId = t.ModeId
	c.Capabilities = t.Capabilities
	c.FlightSwVersion = t.FlightSwVersion
	c.MiddlewareSwVersion = t.MiddlewareSwVersion
	c.OsSwVersion = t.OsSwVersion
	c.BoardVersion = t.BoardVersion
	c.FlightCustomVersion = t.FlightCustomVersion
	c.VendorId = t.VendorId
	c.ProductId = t.ProductId
	c.Uid = t.Uid
	return c
}

func (t *VehicleInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleInfo) SetDefaults() {
	t.Header.SetDefaults()
	t.AvailableInfo = 0
	t.Sysid = 0
	t.Compid = 0
	t.Autopilot = 0
	t.Type = 0
	t.SystemStatus = 0
	t.BaseMode = 0
	t.CustomMode = 0
	t.Mode = ""
	t.ModeId = 0
	t.Capabilities = 0
	t.FlightSwVersion = 0
	t.MiddlewareSwVersion = 0
	t.OsSwVersion = 0
	t.BoardVersion = 0
	t.FlightCustomVersion = ""
	t.VendorId = 0
	t.ProductId = 0
	t.Uid = 0
}

func (t *VehicleInfo) GetTypeSupport() types.MessageTypeSupport {
	return VehicleInfoTypeSupport
}

// VehicleInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleInfoPublisher struct {
	*rclgo.Publisher
}

// NewVehicleInfoPublisher creates and returns a new publisher for the
// VehicleInfo
func NewVehicleInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleInfoPublisher{pub}, nil
}

func (p *VehicleInfoPublisher) Publish(msg *VehicleInfo) error {
	return p.Publisher.Publish(msg)
}

// VehicleInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleInfoSubscription struct {
	*rclgo.Subscription
}

// VehicleInfoSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleInfoSubscription.
type VehicleInfoSubscriptionCallback func(msg *VehicleInfo, info *rclgo.MessageInfo, err error)

// NewVehicleInfoSubscription creates and returns a new subscription for the
// VehicleInfo
func NewVehicleInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleInfoSubscriptionCallback) (*VehicleInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleInfoSubscription{sub}, nil
}

func (s *VehicleInfoSubscription) TakeMessage(out *VehicleInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleInfoSlice(dst, src []VehicleInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleInfoTypeSupport types.MessageTypeSupport = _VehicleInfoTypeSupport{}

type _VehicleInfoTypeSupport struct{}

func (t _VehicleInfoTypeSupport) New() types.Message {
	return NewVehicleInfo()
}

func (t _VehicleInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__VehicleInfo
	return (unsafe.Pointer)(C.mavros_msgs__msg__VehicleInfo__create())
}

func (t _VehicleInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__VehicleInfo__destroy((*C.mavros_msgs__msg__VehicleInfo)(pointer_to_free))
}

func (t _VehicleInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleInfo)
	mem := (*C.mavros_msgs__msg__VehicleInfo)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.available_info = C.uint8_t(m.AvailableInfo)
	mem.sysid = C.uint8_t(m.Sysid)
	mem.compid = C.uint8_t(m.Compid)
	mem.autopilot = C.uint8_t(m.Autopilot)
	mem._type = C.uint8_t(m.Type)
	mem.system_status = C.uint8_t(m.SystemStatus)
	mem.base_mode = C.uint8_t(m.BaseMode)
	mem.custom_mode = C.uint32_t(m.CustomMode)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.mode), m.Mode)
	mem.mode_id = C.uint32_t(m.ModeId)
	mem.capabilities = C.uint64_t(m.Capabilities)
	mem.flight_sw_version = C.uint32_t(m.FlightSwVersion)
	mem.middleware_sw_version = C.uint32_t(m.MiddlewareSwVersion)
	mem.os_sw_version = C.uint32_t(m.OsSwVersion)
	mem.board_version = C.uint32_t(m.BoardVersion)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.flight_custom_version), m.FlightCustomVersion)
	mem.vendor_id = C.uint16_t(m.VendorId)
	mem.product_id = C.uint16_t(m.ProductId)
	mem.uid = C.uint64_t(m.Uid)
}

func (t _VehicleInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleInfo)
	mem := (*C.mavros_msgs__msg__VehicleInfo)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.AvailableInfo = uint8(mem.available_info)
	m.Sysid = uint8(mem.sysid)
	m.Compid = uint8(mem.compid)
	m.Autopilot = uint8(mem.autopilot)
	m.Type = uint8(mem._type)
	m.SystemStatus = uint8(mem.system_status)
	m.BaseMode = uint8(mem.base_mode)
	m.CustomMode = uint32(mem.custom_mode)
	primitives.StringAsGoStruct(&m.Mode, unsafe.Pointer(&mem.mode))
	m.ModeId = uint32(mem.mode_id)
	m.Capabilities = uint64(mem.capabilities)
	m.FlightSwVersion = uint32(mem.flight_sw_version)
	m.MiddlewareSwVersion = uint32(mem.middleware_sw_version)
	m.OsSwVersion = uint32(mem.os_sw_version)
	m.BoardVersion = uint32(mem.board_version)
	primitives.StringAsGoStruct(&m.FlightCustomVersion, unsafe.Pointer(&mem.flight_custom_version))
	m.VendorId = uint16(mem.vendor_id)
	m.ProductId = uint16(mem.product_id)
	m.Uid = uint64(mem.uid)
}

func (t _VehicleInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__VehicleInfo())
}

type CVehicleInfo = C.mavros_msgs__msg__VehicleInfo
type CVehicleInfo__Sequence = C.mavros_msgs__msg__VehicleInfo__Sequence

func VehicleInfo__Sequence_to_Go(goSlice *[]VehicleInfo, cSlice CVehicleInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleInfo__Sequence_to_C(cSlice *CVehicleInfo__Sequence, goSlice []VehicleInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__VehicleInfo)(C.malloc(C.sizeof_struct_mavros_msgs__msg__VehicleInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleInfo__Array_to_Go(goSlice []VehicleInfo, cSlice []CVehicleInfo) {
	for i := 0; i < len(cSlice); i++ {
		VehicleInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleInfo__Array_to_C(cSlice []CVehicleInfo, goSlice []VehicleInfo) {
	for i := 0; i < len(goSlice); i++ {
		VehicleInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
