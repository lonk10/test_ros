// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/cellular_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CellularStatus", CellularStatusTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/CellularStatus", CellularStatusTypeSupport)
}

type CellularStatus struct {
	Status uint8 `yaml:"status"`
	FailureReason uint8 `yaml:"failure_reason"`
	Type uint8 `yaml:"type"`
	Quality uint8 `yaml:"quality"`
	Mcc uint16 `yaml:"mcc"`
	Mnc uint16 `yaml:"mnc"`
	Lac uint16 `yaml:"lac"`
}

// NewCellularStatus creates a new CellularStatus with default values.
func NewCellularStatus() *CellularStatus {
	self := CellularStatus{}
	self.SetDefaults()
	return &self
}

func (t *CellularStatus) Clone() *CellularStatus {
	c := &CellularStatus{}
	c.Status = t.Status
	c.FailureReason = t.FailureReason
	c.Type = t.Type
	c.Quality = t.Quality
	c.Mcc = t.Mcc
	c.Mnc = t.Mnc
	c.Lac = t.Lac
	return c
}

func (t *CellularStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CellularStatus) SetDefaults() {
	t.Status = 0
	t.FailureReason = 0
	t.Type = 0
	t.Quality = 0
	t.Mcc = 0
	t.Mnc = 0
	t.Lac = 0
}

func (t *CellularStatus) GetTypeSupport() types.MessageTypeSupport {
	return CellularStatusTypeSupport
}

// CellularStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CellularStatusPublisher struct {
	*rclgo.Publisher
}

// NewCellularStatusPublisher creates and returns a new publisher for the
// CellularStatus
func NewCellularStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CellularStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CellularStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CellularStatusPublisher{pub}, nil
}

func (p *CellularStatusPublisher) Publish(msg *CellularStatus) error {
	return p.Publisher.Publish(msg)
}

// CellularStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CellularStatusSubscription struct {
	*rclgo.Subscription
}

// CellularStatusSubscriptionCallback type is used to provide a subscription
// handler function for a CellularStatusSubscription.
type CellularStatusSubscriptionCallback func(msg *CellularStatus, info *rclgo.MessageInfo, err error)

// NewCellularStatusSubscription creates and returns a new subscription for the
// CellularStatus
func NewCellularStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CellularStatusSubscriptionCallback) (*CellularStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CellularStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CellularStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CellularStatusSubscription{sub}, nil
}

func (s *CellularStatusSubscription) TakeMessage(out *CellularStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCellularStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCellularStatusSlice(dst, src []CellularStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CellularStatusTypeSupport types.MessageTypeSupport = _CellularStatusTypeSupport{}

type _CellularStatusTypeSupport struct{}

func (t _CellularStatusTypeSupport) New() types.Message {
	return NewCellularStatus()
}

func (t _CellularStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__CellularStatus
	return (unsafe.Pointer)(C.mavros_msgs__msg__CellularStatus__create())
}

func (t _CellularStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__CellularStatus__destroy((*C.mavros_msgs__msg__CellularStatus)(pointer_to_free))
}

func (t _CellularStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CellularStatus)
	mem := (*C.mavros_msgs__msg__CellularStatus)(dst)
	mem.status = C.uint8_t(m.Status)
	mem.failure_reason = C.uint8_t(m.FailureReason)
	mem._type = C.uint8_t(m.Type)
	mem.quality = C.uint8_t(m.Quality)
	mem.mcc = C.uint16_t(m.Mcc)
	mem.mnc = C.uint16_t(m.Mnc)
	mem.lac = C.uint16_t(m.Lac)
}

func (t _CellularStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CellularStatus)
	mem := (*C.mavros_msgs__msg__CellularStatus)(ros2_message_buffer)
	m.Status = uint8(mem.status)
	m.FailureReason = uint8(mem.failure_reason)
	m.Type = uint8(mem._type)
	m.Quality = uint8(mem.quality)
	m.Mcc = uint16(mem.mcc)
	m.Mnc = uint16(mem.mnc)
	m.Lac = uint16(mem.lac)
}

func (t _CellularStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__CellularStatus())
}

type CCellularStatus = C.mavros_msgs__msg__CellularStatus
type CCellularStatus__Sequence = C.mavros_msgs__msg__CellularStatus__Sequence

func CellularStatus__Sequence_to_Go(goSlice *[]CellularStatus, cSlice CCellularStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CellularStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CellularStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CellularStatus__Sequence_to_C(cSlice *CCellularStatus__Sequence, goSlice []CellularStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__CellularStatus)(C.malloc(C.sizeof_struct_mavros_msgs__msg__CellularStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CellularStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CellularStatus__Array_to_Go(goSlice []CellularStatus, cSlice []CCellularStatus) {
	for i := 0; i < len(cSlice); i++ {
		CellularStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CellularStatus__Array_to_C(cSlice []CCellularStatus, goSlice []CellularStatus) {
	for i := 0; i < len(goSlice); i++ {
		CellularStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
