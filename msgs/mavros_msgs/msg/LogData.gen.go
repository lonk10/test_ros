// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/log_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/LogData", LogDataTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/LogData", LogDataTypeSupport)
}

type LogData struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Id uint16 `yaml:"id"`
	Offset uint32 `yaml:"offset"`
	Data []uint8 `yaml:"data"`
}

// NewLogData creates a new LogData with default values.
func NewLogData() *LogData {
	self := LogData{}
	self.SetDefaults()
	return &self
}

func (t *LogData) Clone() *LogData {
	c := &LogData{}
	c.Header = *t.Header.Clone()
	c.Id = t.Id
	c.Offset = t.Offset
	if t.Data != nil {
		c.Data = make([]uint8, len(t.Data))
		copy(c.Data, t.Data)
	}
	return c
}

func (t *LogData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LogData) SetDefaults() {
	t.Header.SetDefaults()
	t.Id = 0
	t.Offset = 0
	t.Data = nil
}

func (t *LogData) GetTypeSupport() types.MessageTypeSupport {
	return LogDataTypeSupport
}

// LogDataPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LogDataPublisher struct {
	*rclgo.Publisher
}

// NewLogDataPublisher creates and returns a new publisher for the
// LogData
func NewLogDataPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LogDataPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LogDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LogDataPublisher{pub}, nil
}

func (p *LogDataPublisher) Publish(msg *LogData) error {
	return p.Publisher.Publish(msg)
}

// LogDataSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LogDataSubscription struct {
	*rclgo.Subscription
}

// LogDataSubscriptionCallback type is used to provide a subscription
// handler function for a LogDataSubscription.
type LogDataSubscriptionCallback func(msg *LogData, info *rclgo.MessageInfo, err error)

// NewLogDataSubscription creates and returns a new subscription for the
// LogData
func NewLogDataSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LogDataSubscriptionCallback) (*LogDataSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LogData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LogDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LogDataSubscription{sub}, nil
}

func (s *LogDataSubscription) TakeMessage(out *LogData) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLogDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLogDataSlice(dst, src []LogData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LogDataTypeSupport types.MessageTypeSupport = _LogDataTypeSupport{}

type _LogDataTypeSupport struct{}

func (t _LogDataTypeSupport) New() types.Message {
	return NewLogData()
}

func (t _LogDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__LogData
	return (unsafe.Pointer)(C.mavros_msgs__msg__LogData__create())
}

func (t _LogDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__LogData__destroy((*C.mavros_msgs__msg__LogData)(pointer_to_free))
}

func (t _LogDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LogData)
	mem := (*C.mavros_msgs__msg__LogData)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.id = C.uint16_t(m.Id)
	mem.offset = C.uint32_t(m.Offset)
	primitives.Uint8__Sequence_to_C((*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)), m.Data)
}

func (t _LogDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LogData)
	mem := (*C.mavros_msgs__msg__LogData)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Id = uint16(mem.id)
	m.Offset = uint32(mem.offset)
	primitives.Uint8__Sequence_to_Go(&m.Data, *(*primitives.CUint8__Sequence)(unsafe.Pointer(&mem.data)))
}

func (t _LogDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__LogData())
}

type CLogData = C.mavros_msgs__msg__LogData
type CLogData__Sequence = C.mavros_msgs__msg__LogData__Sequence

func LogData__Sequence_to_Go(goSlice *[]LogData, cSlice CLogData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LogData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LogDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LogData__Sequence_to_C(cSlice *CLogData__Sequence, goSlice []LogData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__LogData)(C.malloc(C.sizeof_struct_mavros_msgs__msg__LogData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LogDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LogData__Array_to_Go(goSlice []LogData, cSlice []CLogData) {
	for i := 0; i < len(cSlice); i++ {
		LogDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LogData__Array_to_C(cSlice []CLogData, goSlice []LogData) {
	for i := 0; i < len(goSlice); i++ {
		LogDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
