// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/vibration.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/Vibration", VibrationTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/Vibration", VibrationTypeSupport)
}

type Vibration struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Vibration geometry_msgs_msg.Vector3 `yaml:"vibration"`// 3-axis vibration levels
	Clipping [3]float32 `yaml:"clipping"`// Accelerometers clipping
}

// NewVibration creates a new Vibration with default values.
func NewVibration() *Vibration {
	self := Vibration{}
	self.SetDefaults()
	return &self
}

func (t *Vibration) Clone() *Vibration {
	c := &Vibration{}
	c.Header = *t.Header.Clone()
	c.Vibration = *t.Vibration.Clone()
	c.Clipping = t.Clipping
	return c
}

func (t *Vibration) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Vibration) SetDefaults() {
	t.Header.SetDefaults()
	t.Vibration.SetDefaults()
	t.Clipping = [3]float32{}
}

func (t *Vibration) GetTypeSupport() types.MessageTypeSupport {
	return VibrationTypeSupport
}

// VibrationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VibrationPublisher struct {
	*rclgo.Publisher
}

// NewVibrationPublisher creates and returns a new publisher for the
// Vibration
func NewVibrationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VibrationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VibrationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VibrationPublisher{pub}, nil
}

func (p *VibrationPublisher) Publish(msg *Vibration) error {
	return p.Publisher.Publish(msg)
}

// VibrationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VibrationSubscription struct {
	*rclgo.Subscription
}

// VibrationSubscriptionCallback type is used to provide a subscription
// handler function for a VibrationSubscription.
type VibrationSubscriptionCallback func(msg *Vibration, info *rclgo.MessageInfo, err error)

// NewVibrationSubscription creates and returns a new subscription for the
// Vibration
func NewVibrationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VibrationSubscriptionCallback) (*VibrationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Vibration
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VibrationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VibrationSubscription{sub}, nil
}

func (s *VibrationSubscription) TakeMessage(out *Vibration) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVibrationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVibrationSlice(dst, src []Vibration) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VibrationTypeSupport types.MessageTypeSupport = _VibrationTypeSupport{}

type _VibrationTypeSupport struct{}

func (t _VibrationTypeSupport) New() types.Message {
	return NewVibration()
}

func (t _VibrationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__Vibration
	return (unsafe.Pointer)(C.mavros_msgs__msg__Vibration__create())
}

func (t _VibrationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__Vibration__destroy((*C.mavros_msgs__msg__Vibration)(pointer_to_free))
}

func (t _VibrationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Vibration)
	mem := (*C.mavros_msgs__msg__Vibration)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.vibration), &m.Vibration)
	cSlice_clipping := mem.clipping[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_clipping)), m.Clipping[:])
}

func (t _VibrationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Vibration)
	mem := (*C.mavros_msgs__msg__Vibration)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Vibration, unsafe.Pointer(&mem.vibration))
	cSlice_clipping := mem.clipping[:]
	primitives.Float32__Array_to_Go(m.Clipping[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_clipping)))
}

func (t _VibrationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__Vibration())
}

type CVibration = C.mavros_msgs__msg__Vibration
type CVibration__Sequence = C.mavros_msgs__msg__Vibration__Sequence

func Vibration__Sequence_to_Go(goSlice *[]Vibration, cSlice CVibration__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Vibration, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VibrationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Vibration__Sequence_to_C(cSlice *CVibration__Sequence, goSlice []Vibration) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__Vibration)(C.malloc(C.sizeof_struct_mavros_msgs__msg__Vibration * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VibrationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Vibration__Array_to_Go(goSlice []Vibration, cSlice []CVibration) {
	for i := 0; i < len(cSlice); i++ {
		VibrationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Vibration__Array_to_C(cSlice []CVibration, goSlice []Vibration) {
	for i := 0; i < len(goSlice); i++ {
		VibrationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
