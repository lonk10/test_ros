// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/radio_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/RadioStatus", RadioStatusTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/RadioStatus", RadioStatusTypeSupport)
}

type RadioStatus struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Rssi uint8 `yaml:"rssi"`// message data
	Remrssi uint8 `yaml:"remrssi"`
	Txbuf uint8 `yaml:"txbuf"`
	Noise uint8 `yaml:"noise"`
	Remnoise uint8 `yaml:"remnoise"`
	Rxerrors uint16 `yaml:"rxerrors"`
	Fixed uint16 `yaml:"fixed"`
	RssiDbm float32 `yaml:"rssi_dbm"`// calculated
	RemrssiDbm float32 `yaml:"remrssi_dbm"`
}

// NewRadioStatus creates a new RadioStatus with default values.
func NewRadioStatus() *RadioStatus {
	self := RadioStatus{}
	self.SetDefaults()
	return &self
}

func (t *RadioStatus) Clone() *RadioStatus {
	c := &RadioStatus{}
	c.Header = *t.Header.Clone()
	c.Rssi = t.Rssi
	c.Remrssi = t.Remrssi
	c.Txbuf = t.Txbuf
	c.Noise = t.Noise
	c.Remnoise = t.Remnoise
	c.Rxerrors = t.Rxerrors
	c.Fixed = t.Fixed
	c.RssiDbm = t.RssiDbm
	c.RemrssiDbm = t.RemrssiDbm
	return c
}

func (t *RadioStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RadioStatus) SetDefaults() {
	t.Header.SetDefaults()
	t.Rssi = 0
	t.Remrssi = 0
	t.Txbuf = 0
	t.Noise = 0
	t.Remnoise = 0
	t.Rxerrors = 0
	t.Fixed = 0
	t.RssiDbm = 0
	t.RemrssiDbm = 0
}

func (t *RadioStatus) GetTypeSupport() types.MessageTypeSupport {
	return RadioStatusTypeSupport
}

// RadioStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RadioStatusPublisher struct {
	*rclgo.Publisher
}

// NewRadioStatusPublisher creates and returns a new publisher for the
// RadioStatus
func NewRadioStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RadioStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RadioStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RadioStatusPublisher{pub}, nil
}

func (p *RadioStatusPublisher) Publish(msg *RadioStatus) error {
	return p.Publisher.Publish(msg)
}

// RadioStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RadioStatusSubscription struct {
	*rclgo.Subscription
}

// RadioStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RadioStatusSubscription.
type RadioStatusSubscriptionCallback func(msg *RadioStatus, info *rclgo.MessageInfo, err error)

// NewRadioStatusSubscription creates and returns a new subscription for the
// RadioStatus
func NewRadioStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RadioStatusSubscriptionCallback) (*RadioStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RadioStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RadioStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RadioStatusSubscription{sub}, nil
}

func (s *RadioStatusSubscription) TakeMessage(out *RadioStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRadioStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRadioStatusSlice(dst, src []RadioStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RadioStatusTypeSupport types.MessageTypeSupport = _RadioStatusTypeSupport{}

type _RadioStatusTypeSupport struct{}

func (t _RadioStatusTypeSupport) New() types.Message {
	return NewRadioStatus()
}

func (t _RadioStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__RadioStatus
	return (unsafe.Pointer)(C.mavros_msgs__msg__RadioStatus__create())
}

func (t _RadioStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__RadioStatus__destroy((*C.mavros_msgs__msg__RadioStatus)(pointer_to_free))
}

func (t _RadioStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RadioStatus)
	mem := (*C.mavros_msgs__msg__RadioStatus)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.rssi = C.uint8_t(m.Rssi)
	mem.remrssi = C.uint8_t(m.Remrssi)
	mem.txbuf = C.uint8_t(m.Txbuf)
	mem.noise = C.uint8_t(m.Noise)
	mem.remnoise = C.uint8_t(m.Remnoise)
	mem.rxerrors = C.uint16_t(m.Rxerrors)
	mem.fixed = C.uint16_t(m.Fixed)
	mem.rssi_dbm = C.float(m.RssiDbm)
	mem.remrssi_dbm = C.float(m.RemrssiDbm)
}

func (t _RadioStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RadioStatus)
	mem := (*C.mavros_msgs__msg__RadioStatus)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Rssi = uint8(mem.rssi)
	m.Remrssi = uint8(mem.remrssi)
	m.Txbuf = uint8(mem.txbuf)
	m.Noise = uint8(mem.noise)
	m.Remnoise = uint8(mem.remnoise)
	m.Rxerrors = uint16(mem.rxerrors)
	m.Fixed = uint16(mem.fixed)
	m.RssiDbm = float32(mem.rssi_dbm)
	m.RemrssiDbm = float32(mem.remrssi_dbm)
}

func (t _RadioStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__RadioStatus())
}

type CRadioStatus = C.mavros_msgs__msg__RadioStatus
type CRadioStatus__Sequence = C.mavros_msgs__msg__RadioStatus__Sequence

func RadioStatus__Sequence_to_Go(goSlice *[]RadioStatus, cSlice CRadioStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RadioStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RadioStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RadioStatus__Sequence_to_C(cSlice *CRadioStatus__Sequence, goSlice []RadioStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__RadioStatus)(C.malloc(C.sizeof_struct_mavros_msgs__msg__RadioStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RadioStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RadioStatus__Array_to_Go(goSlice []RadioStatus, cSlice []CRadioStatus) {
	for i := 0; i < len(cSlice); i++ {
		RadioStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RadioStatus__Array_to_C(cSlice []CRadioStatus, goSlice []RadioStatus) {
	for i := 0; i < len(goSlice); i++ {
		RadioStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
