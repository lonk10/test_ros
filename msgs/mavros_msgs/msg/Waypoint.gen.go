// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/waypoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/Waypoint", WaypointTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/Waypoint", WaypointTypeSupport)
}
const (
	Waypoint_FRAME_GLOBAL uint8 = 0
	Waypoint_FRAME_LOCAL_NED uint8 = 1
	Waypoint_FRAME_MISSION uint8 = 2
	Waypoint_FRAME_GLOBAL_REL_ALT uint8 = 3
	Waypoint_FRAME_LOCAL_ENU uint8 = 4
	Waypoint_FRAME_GLOBAL_INT uint8 = 5
	Waypoint_FRAME_GLOBAL_RELATIVE_ALT_INT uint8 = 6
	Waypoint_FRAME_LOCAL_OFFSET_NED uint8 = 7
	Waypoint_FRAME_BODY_NED uint8 = 8
	Waypoint_FRAME_BODY_OFFSET_NED uint8 = 9
	Waypoint_FRAME_GLOBAL_TERRAIN_ALT uint8 = 10
	Waypoint_FRAME_GLOBAL_TERRAIN_ALT_INT uint8 = 11
	Waypoint_FRAME_BODY_FRD uint8 = 12
	Waypoint_FRAME_RESERVED_13 uint8 = 13
	Waypoint_FRAME_RESERVED_14 uint8 = 14
	Waypoint_FRAME_RESERVED_15 uint8 = 15
	Waypoint_FRAME_RESERVED_16 uint8 = 16
	Waypoint_FRAME_RESERVED_17 uint8 = 17
	Waypoint_FRAME_RESERVED_18 uint8 = 18
	Waypoint_FRAME_RESERVED_19 uint8 = 19
	Waypoint_FRAME_LOCAL_FRD uint8 = 20
	Waypoint_FRAME_LOCAL_FLU uint8 = 21
)

type Waypoint struct {
	Frame uint8 `yaml:"frame"`// see enum MAV_FRAME
	Command uint16 `yaml:"command"`// see enum MAV_CMD and CommandCode.msg
	IsCurrent bool `yaml:"is_current"`
	Autocontinue bool `yaml:"autocontinue"`
	Param1 float32 `yaml:"param1"`// meaning of this params described in enum MAV_CMD
	Param2 float32 `yaml:"param2"`
	Param3 float32 `yaml:"param3"`
	Param4 float32 `yaml:"param4"`
	XLat float64 `yaml:"x_lat"`
	YLong float64 `yaml:"y_long"`
	ZAlt float64 `yaml:"z_alt"`
}

// NewWaypoint creates a new Waypoint with default values.
func NewWaypoint() *Waypoint {
	self := Waypoint{}
	self.SetDefaults()
	return &self
}

func (t *Waypoint) Clone() *Waypoint {
	c := &Waypoint{}
	c.Frame = t.Frame
	c.Command = t.Command
	c.IsCurrent = t.IsCurrent
	c.Autocontinue = t.Autocontinue
	c.Param1 = t.Param1
	c.Param2 = t.Param2
	c.Param3 = t.Param3
	c.Param4 = t.Param4
	c.XLat = t.XLat
	c.YLong = t.YLong
	c.ZAlt = t.ZAlt
	return c
}

func (t *Waypoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Waypoint) SetDefaults() {
	t.Frame = 0
	t.Command = 0
	t.IsCurrent = false
	t.Autocontinue = false
	t.Param1 = 0
	t.Param2 = 0
	t.Param3 = 0
	t.Param4 = 0
	t.XLat = 0
	t.YLong = 0
	t.ZAlt = 0
}

func (t *Waypoint) GetTypeSupport() types.MessageTypeSupport {
	return WaypointTypeSupport
}

// WaypointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WaypointPublisher struct {
	*rclgo.Publisher
}

// NewWaypointPublisher creates and returns a new publisher for the
// Waypoint
func NewWaypointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WaypointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WaypointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WaypointPublisher{pub}, nil
}

func (p *WaypointPublisher) Publish(msg *Waypoint) error {
	return p.Publisher.Publish(msg)
}

// WaypointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WaypointSubscription struct {
	*rclgo.Subscription
}

// WaypointSubscriptionCallback type is used to provide a subscription
// handler function for a WaypointSubscription.
type WaypointSubscriptionCallback func(msg *Waypoint, info *rclgo.MessageInfo, err error)

// NewWaypointSubscription creates and returns a new subscription for the
// Waypoint
func NewWaypointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WaypointSubscriptionCallback) (*WaypointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Waypoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WaypointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WaypointSubscription{sub}, nil
}

func (s *WaypointSubscription) TakeMessage(out *Waypoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWaypointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWaypointSlice(dst, src []Waypoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WaypointTypeSupport types.MessageTypeSupport = _WaypointTypeSupport{}

type _WaypointTypeSupport struct{}

func (t _WaypointTypeSupport) New() types.Message {
	return NewWaypoint()
}

func (t _WaypointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__Waypoint
	return (unsafe.Pointer)(C.mavros_msgs__msg__Waypoint__create())
}

func (t _WaypointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__Waypoint__destroy((*C.mavros_msgs__msg__Waypoint)(pointer_to_free))
}

func (t _WaypointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Waypoint)
	mem := (*C.mavros_msgs__msg__Waypoint)(dst)
	mem.frame = C.uint8_t(m.Frame)
	mem.command = C.uint16_t(m.Command)
	mem.is_current = C.bool(m.IsCurrent)
	mem.autocontinue = C.bool(m.Autocontinue)
	mem.param1 = C.float(m.Param1)
	mem.param2 = C.float(m.Param2)
	mem.param3 = C.float(m.Param3)
	mem.param4 = C.float(m.Param4)
	mem.x_lat = C.double(m.XLat)
	mem.y_long = C.double(m.YLong)
	mem.z_alt = C.double(m.ZAlt)
}

func (t _WaypointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Waypoint)
	mem := (*C.mavros_msgs__msg__Waypoint)(ros2_message_buffer)
	m.Frame = uint8(mem.frame)
	m.Command = uint16(mem.command)
	m.IsCurrent = bool(mem.is_current)
	m.Autocontinue = bool(mem.autocontinue)
	m.Param1 = float32(mem.param1)
	m.Param2 = float32(mem.param2)
	m.Param3 = float32(mem.param3)
	m.Param4 = float32(mem.param4)
	m.XLat = float64(mem.x_lat)
	m.YLong = float64(mem.y_long)
	m.ZAlt = float64(mem.z_alt)
}

func (t _WaypointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__Waypoint())
}

type CWaypoint = C.mavros_msgs__msg__Waypoint
type CWaypoint__Sequence = C.mavros_msgs__msg__Waypoint__Sequence

func Waypoint__Sequence_to_Go(goSlice *[]Waypoint, cSlice CWaypoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Waypoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WaypointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Waypoint__Sequence_to_C(cSlice *CWaypoint__Sequence, goSlice []Waypoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__Waypoint)(C.malloc(C.sizeof_struct_mavros_msgs__msg__Waypoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WaypointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Waypoint__Array_to_Go(goSlice []Waypoint, cSlice []CWaypoint) {
	for i := 0; i < len(cSlice); i++ {
		WaypointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Waypoint__Array_to_C(cSlice []CWaypoint, goSlice []Waypoint) {
	for i := 0; i < len(goSlice); i++ {
		WaypointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
