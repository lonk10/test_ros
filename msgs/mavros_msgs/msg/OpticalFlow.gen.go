// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/optical_flow.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/OpticalFlow", OpticalFlowTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/OpticalFlow", OpticalFlowTypeSupport)
}

type OpticalFlow struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Flow geometry_msgs_msg.Vector3 `yaml:"flow"`
	FlowCompM geometry_msgs_msg.Vector3 `yaml:"flow_comp_m"`
	Quality uint8 `yaml:"quality"`
	GroundDistance float32 `yaml:"ground_distance"`
	FlowRate geometry_msgs_msg.Vector3 `yaml:"flow_rate"`
}

// NewOpticalFlow creates a new OpticalFlow with default values.
func NewOpticalFlow() *OpticalFlow {
	self := OpticalFlow{}
	self.SetDefaults()
	return &self
}

func (t *OpticalFlow) Clone() *OpticalFlow {
	c := &OpticalFlow{}
	c.Header = *t.Header.Clone()
	c.Flow = *t.Flow.Clone()
	c.FlowCompM = *t.FlowCompM.Clone()
	c.Quality = t.Quality
	c.GroundDistance = t.GroundDistance
	c.FlowRate = *t.FlowRate.Clone()
	return c
}

func (t *OpticalFlow) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OpticalFlow) SetDefaults() {
	t.Header.SetDefaults()
	t.Flow.SetDefaults()
	t.FlowCompM.SetDefaults()
	t.Quality = 0
	t.GroundDistance = 0
	t.FlowRate.SetDefaults()
}

func (t *OpticalFlow) GetTypeSupport() types.MessageTypeSupport {
	return OpticalFlowTypeSupport
}

// OpticalFlowPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OpticalFlowPublisher struct {
	*rclgo.Publisher
}

// NewOpticalFlowPublisher creates and returns a new publisher for the
// OpticalFlow
func NewOpticalFlowPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OpticalFlowPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OpticalFlowTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OpticalFlowPublisher{pub}, nil
}

func (p *OpticalFlowPublisher) Publish(msg *OpticalFlow) error {
	return p.Publisher.Publish(msg)
}

// OpticalFlowSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OpticalFlowSubscription struct {
	*rclgo.Subscription
}

// OpticalFlowSubscriptionCallback type is used to provide a subscription
// handler function for a OpticalFlowSubscription.
type OpticalFlowSubscriptionCallback func(msg *OpticalFlow, info *rclgo.MessageInfo, err error)

// NewOpticalFlowSubscription creates and returns a new subscription for the
// OpticalFlow
func NewOpticalFlowSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OpticalFlowSubscriptionCallback) (*OpticalFlowSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OpticalFlow
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OpticalFlowTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OpticalFlowSubscription{sub}, nil
}

func (s *OpticalFlowSubscription) TakeMessage(out *OpticalFlow) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOpticalFlowSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOpticalFlowSlice(dst, src []OpticalFlow) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OpticalFlowTypeSupport types.MessageTypeSupport = _OpticalFlowTypeSupport{}

type _OpticalFlowTypeSupport struct{}

func (t _OpticalFlowTypeSupport) New() types.Message {
	return NewOpticalFlow()
}

func (t _OpticalFlowTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__OpticalFlow
	return (unsafe.Pointer)(C.mavros_msgs__msg__OpticalFlow__create())
}

func (t _OpticalFlowTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__OpticalFlow__destroy((*C.mavros_msgs__msg__OpticalFlow)(pointer_to_free))
}

func (t _OpticalFlowTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OpticalFlow)
	mem := (*C.mavros_msgs__msg__OpticalFlow)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.flow), &m.Flow)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.flow_comp_m), &m.FlowCompM)
	mem.quality = C.uint8_t(m.Quality)
	mem.ground_distance = C.float(m.GroundDistance)
	geometry_msgs_msg.Vector3TypeSupport.AsCStruct(unsafe.Pointer(&mem.flow_rate), &m.FlowRate)
}

func (t _OpticalFlowTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OpticalFlow)
	mem := (*C.mavros_msgs__msg__OpticalFlow)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.Flow, unsafe.Pointer(&mem.flow))
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.FlowCompM, unsafe.Pointer(&mem.flow_comp_m))
	m.Quality = uint8(mem.quality)
	m.GroundDistance = float32(mem.ground_distance)
	geometry_msgs_msg.Vector3TypeSupport.AsGoStruct(&m.FlowRate, unsafe.Pointer(&mem.flow_rate))
}

func (t _OpticalFlowTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__OpticalFlow())
}

type COpticalFlow = C.mavros_msgs__msg__OpticalFlow
type COpticalFlow__Sequence = C.mavros_msgs__msg__OpticalFlow__Sequence

func OpticalFlow__Sequence_to_Go(goSlice *[]OpticalFlow, cSlice COpticalFlow__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OpticalFlow, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OpticalFlowTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OpticalFlow__Sequence_to_C(cSlice *COpticalFlow__Sequence, goSlice []OpticalFlow) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__OpticalFlow)(C.malloc(C.sizeof_struct_mavros_msgs__msg__OpticalFlow * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OpticalFlow__Array_to_Go(goSlice []OpticalFlow, cSlice []COpticalFlow) {
	for i := 0; i < len(cSlice); i++ {
		OpticalFlowTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OpticalFlow__Array_to_C(cSlice []COpticalFlow, goSlice []OpticalFlow) {
	for i := 0; i < len(goSlice); i++ {
		OpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
