// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	builtin_interfaces_msg "test/msgs/builtin_interfaces/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/log_entry.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/LogEntry", LogEntryTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/LogEntry", LogEntryTypeSupport)
}

type LogEntry struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Id uint16 `yaml:"id"`
	NumLogs uint16 `yaml:"num_logs"`
	LastLogNum uint16 `yaml:"last_log_num"`
	TimeUtc builtin_interfaces_msg.Time `yaml:"time_utc"`
	Size uint32 `yaml:"size"`
}

// NewLogEntry creates a new LogEntry with default values.
func NewLogEntry() *LogEntry {
	self := LogEntry{}
	self.SetDefaults()
	return &self
}

func (t *LogEntry) Clone() *LogEntry {
	c := &LogEntry{}
	c.Header = *t.Header.Clone()
	c.Id = t.Id
	c.NumLogs = t.NumLogs
	c.LastLogNum = t.LastLogNum
	c.TimeUtc = *t.TimeUtc.Clone()
	c.Size = t.Size
	return c
}

func (t *LogEntry) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LogEntry) SetDefaults() {
	t.Header.SetDefaults()
	t.Id = 0
	t.NumLogs = 0
	t.LastLogNum = 0
	t.TimeUtc.SetDefaults()
	t.Size = 0
}

func (t *LogEntry) GetTypeSupport() types.MessageTypeSupport {
	return LogEntryTypeSupport
}

// LogEntryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LogEntryPublisher struct {
	*rclgo.Publisher
}

// NewLogEntryPublisher creates and returns a new publisher for the
// LogEntry
func NewLogEntryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LogEntryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LogEntryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LogEntryPublisher{pub}, nil
}

func (p *LogEntryPublisher) Publish(msg *LogEntry) error {
	return p.Publisher.Publish(msg)
}

// LogEntrySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LogEntrySubscription struct {
	*rclgo.Subscription
}

// LogEntrySubscriptionCallback type is used to provide a subscription
// handler function for a LogEntrySubscription.
type LogEntrySubscriptionCallback func(msg *LogEntry, info *rclgo.MessageInfo, err error)

// NewLogEntrySubscription creates and returns a new subscription for the
// LogEntry
func NewLogEntrySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LogEntrySubscriptionCallback) (*LogEntrySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LogEntry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LogEntryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LogEntrySubscription{sub}, nil
}

func (s *LogEntrySubscription) TakeMessage(out *LogEntry) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLogEntrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLogEntrySlice(dst, src []LogEntry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LogEntryTypeSupport types.MessageTypeSupport = _LogEntryTypeSupport{}

type _LogEntryTypeSupport struct{}

func (t _LogEntryTypeSupport) New() types.Message {
	return NewLogEntry()
}

func (t _LogEntryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__LogEntry
	return (unsafe.Pointer)(C.mavros_msgs__msg__LogEntry__create())
}

func (t _LogEntryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__LogEntry__destroy((*C.mavros_msgs__msg__LogEntry)(pointer_to_free))
}

func (t _LogEntryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LogEntry)
	mem := (*C.mavros_msgs__msg__LogEntry)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.id = C.uint16_t(m.Id)
	mem.num_logs = C.uint16_t(m.NumLogs)
	mem.last_log_num = C.uint16_t(m.LastLogNum)
	builtin_interfaces_msg.TimeTypeSupport.AsCStruct(unsafe.Pointer(&mem.time_utc), &m.TimeUtc)
	mem.size = C.uint32_t(m.Size)
}

func (t _LogEntryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LogEntry)
	mem := (*C.mavros_msgs__msg__LogEntry)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Id = uint16(mem.id)
	m.NumLogs = uint16(mem.num_logs)
	m.LastLogNum = uint16(mem.last_log_num)
	builtin_interfaces_msg.TimeTypeSupport.AsGoStruct(&m.TimeUtc, unsafe.Pointer(&mem.time_utc))
	m.Size = uint32(mem.size)
}

func (t _LogEntryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__LogEntry())
}

type CLogEntry = C.mavros_msgs__msg__LogEntry
type CLogEntry__Sequence = C.mavros_msgs__msg__LogEntry__Sequence

func LogEntry__Sequence_to_Go(goSlice *[]LogEntry, cSlice CLogEntry__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LogEntry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LogEntryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LogEntry__Sequence_to_C(cSlice *CLogEntry__Sequence, goSlice []LogEntry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__LogEntry)(C.malloc(C.sizeof_struct_mavros_msgs__msg__LogEntry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LogEntryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LogEntry__Array_to_Go(goSlice []LogEntry, cSlice []CLogEntry) {
	for i := 0; i < len(cSlice); i++ {
		LogEntryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LogEntry__Array_to_C(cSlice []CLogEntry, goSlice []LogEntry) {
	for i := 0; i < len(goSlice); i++ {
		LogEntryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
