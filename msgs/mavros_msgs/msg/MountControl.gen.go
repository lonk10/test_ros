// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/mount_control.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/MountControl", MountControlTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/MountControl", MountControlTypeSupport)
}
const (
	MountControl_MAV_MOUNT_MODE_RETRACT uint8 = 0
	MountControl_MAV_MOUNT_MODE_NEUTRAL uint8 = 1
	MountControl_MAV_MOUNT_MODE_MAVLINK_TARGETING uint8 = 2
	MountControl_MAV_MOUNT_MODE_RC_TARGETING uint8 = 3
	MountControl_MAV_MOUNT_MODE_GPS_POINT uint8 = 4
)

type MountControl struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Mode uint8 `yaml:"mode"`// See enum MAV_MOUNT_MODE.
	Pitch float32 `yaml:"pitch"`// pitch degrees or degrees/second depending on mount mode.
	Roll float32 `yaml:"roll"`// roll degrees or degrees/second depending on mount mode.
	Yaw float32 `yaml:"yaw"`// yaw degrees or degrees/second depending on mount mode.
	Altitude float32 `yaml:"altitude"`// altitude depending on mount mode.
	Latitude float32 `yaml:"latitude"`// latitude in degrees * 1E7, set if appropriate mount mode.
	Longitude float32 `yaml:"longitude"`// longitude in degrees * 1E7, set if appropriate mount mode.
}

// NewMountControl creates a new MountControl with default values.
func NewMountControl() *MountControl {
	self := MountControl{}
	self.SetDefaults()
	return &self
}

func (t *MountControl) Clone() *MountControl {
	c := &MountControl{}
	c.Header = *t.Header.Clone()
	c.Mode = t.Mode
	c.Pitch = t.Pitch
	c.Roll = t.Roll
	c.Yaw = t.Yaw
	c.Altitude = t.Altitude
	c.Latitude = t.Latitude
	c.Longitude = t.Longitude
	return c
}

func (t *MountControl) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MountControl) SetDefaults() {
	t.Header.SetDefaults()
	t.Mode = 0
	t.Pitch = 0
	t.Roll = 0
	t.Yaw = 0
	t.Altitude = 0
	t.Latitude = 0
	t.Longitude = 0
}

func (t *MountControl) GetTypeSupport() types.MessageTypeSupport {
	return MountControlTypeSupport
}

// MountControlPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MountControlPublisher struct {
	*rclgo.Publisher
}

// NewMountControlPublisher creates and returns a new publisher for the
// MountControl
func NewMountControlPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MountControlPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MountControlTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MountControlPublisher{pub}, nil
}

func (p *MountControlPublisher) Publish(msg *MountControl) error {
	return p.Publisher.Publish(msg)
}

// MountControlSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MountControlSubscription struct {
	*rclgo.Subscription
}

// MountControlSubscriptionCallback type is used to provide a subscription
// handler function for a MountControlSubscription.
type MountControlSubscriptionCallback func(msg *MountControl, info *rclgo.MessageInfo, err error)

// NewMountControlSubscription creates and returns a new subscription for the
// MountControl
func NewMountControlSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MountControlSubscriptionCallback) (*MountControlSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MountControl
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MountControlTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MountControlSubscription{sub}, nil
}

func (s *MountControlSubscription) TakeMessage(out *MountControl) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMountControlSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMountControlSlice(dst, src []MountControl) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MountControlTypeSupport types.MessageTypeSupport = _MountControlTypeSupport{}

type _MountControlTypeSupport struct{}

func (t _MountControlTypeSupport) New() types.Message {
	return NewMountControl()
}

func (t _MountControlTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__MountControl
	return (unsafe.Pointer)(C.mavros_msgs__msg__MountControl__create())
}

func (t _MountControlTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__MountControl__destroy((*C.mavros_msgs__msg__MountControl)(pointer_to_free))
}

func (t _MountControlTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MountControl)
	mem := (*C.mavros_msgs__msg__MountControl)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.mode = C.uint8_t(m.Mode)
	mem.pitch = C.float(m.Pitch)
	mem.roll = C.float(m.Roll)
	mem.yaw = C.float(m.Yaw)
	mem.altitude = C.float(m.Altitude)
	mem.latitude = C.float(m.Latitude)
	mem.longitude = C.float(m.Longitude)
}

func (t _MountControlTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MountControl)
	mem := (*C.mavros_msgs__msg__MountControl)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Mode = uint8(mem.mode)
	m.Pitch = float32(mem.pitch)
	m.Roll = float32(mem.roll)
	m.Yaw = float32(mem.yaw)
	m.Altitude = float32(mem.altitude)
	m.Latitude = float32(mem.latitude)
	m.Longitude = float32(mem.longitude)
}

func (t _MountControlTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__MountControl())
}

type CMountControl = C.mavros_msgs__msg__MountControl
type CMountControl__Sequence = C.mavros_msgs__msg__MountControl__Sequence

func MountControl__Sequence_to_Go(goSlice *[]MountControl, cSlice CMountControl__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MountControl, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MountControlTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MountControl__Sequence_to_C(cSlice *CMountControl__Sequence, goSlice []MountControl) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__MountControl)(C.malloc(C.sizeof_struct_mavros_msgs__msg__MountControl * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MountControlTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MountControl__Array_to_Go(goSlice []MountControl, cSlice []CMountControl) {
	for i := 0; i < len(cSlice); i++ {
		MountControlTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MountControl__Array_to_C(cSlice []CMountControl, goSlice []MountControl) {
	for i := 0; i < len(goSlice); i++ {
		MountControlTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
