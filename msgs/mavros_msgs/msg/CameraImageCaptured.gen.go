// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	geographic_msgs_msg "test/msgs/geographic_msgs/msg"
	geometry_msgs_msg "test/msgs/geometry_msgs/msg"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/camera_image_captured.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/CameraImageCaptured", CameraImageCapturedTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/CameraImageCaptured", CameraImageCapturedTypeSupport)
}

type CameraImageCaptured struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Orientation geometry_msgs_msg.Quaternion `yaml:"orientation"`// Quaternion of camera orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
	Geo geographic_msgs_msg.GeoPoint `yaml:"geo"`
	RelativeAlt float32 `yaml:"relative_alt"`// mm	Altitude above ground
	ImageIndex int32 `yaml:"image_index"`// Zero based index of this image (i.e. a new image will have index CAMERA_CAPTURE_STATUS.image count -1)
	CaptureResult int8 `yaml:"capture_result"`// Boolean indicating success (1) or failure (0) while capturing this image.
	FileUrl string `yaml:"file_url"`// URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.
}

// NewCameraImageCaptured creates a new CameraImageCaptured with default values.
func NewCameraImageCaptured() *CameraImageCaptured {
	self := CameraImageCaptured{}
	self.SetDefaults()
	return &self
}

func (t *CameraImageCaptured) Clone() *CameraImageCaptured {
	c := &CameraImageCaptured{}
	c.Header = *t.Header.Clone()
	c.Orientation = *t.Orientation.Clone()
	c.Geo = *t.Geo.Clone()
	c.RelativeAlt = t.RelativeAlt
	c.ImageIndex = t.ImageIndex
	c.CaptureResult = t.CaptureResult
	c.FileUrl = t.FileUrl
	return c
}

func (t *CameraImageCaptured) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CameraImageCaptured) SetDefaults() {
	t.Header.SetDefaults()
	t.Orientation.SetDefaults()
	t.Geo.SetDefaults()
	t.RelativeAlt = 0
	t.ImageIndex = 0
	t.CaptureResult = 0
	t.FileUrl = ""
}

func (t *CameraImageCaptured) GetTypeSupport() types.MessageTypeSupport {
	return CameraImageCapturedTypeSupport
}

// CameraImageCapturedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CameraImageCapturedPublisher struct {
	*rclgo.Publisher
}

// NewCameraImageCapturedPublisher creates and returns a new publisher for the
// CameraImageCaptured
func NewCameraImageCapturedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CameraImageCapturedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CameraImageCapturedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CameraImageCapturedPublisher{pub}, nil
}

func (p *CameraImageCapturedPublisher) Publish(msg *CameraImageCaptured) error {
	return p.Publisher.Publish(msg)
}

// CameraImageCapturedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CameraImageCapturedSubscription struct {
	*rclgo.Subscription
}

// CameraImageCapturedSubscriptionCallback type is used to provide a subscription
// handler function for a CameraImageCapturedSubscription.
type CameraImageCapturedSubscriptionCallback func(msg *CameraImageCaptured, info *rclgo.MessageInfo, err error)

// NewCameraImageCapturedSubscription creates and returns a new subscription for the
// CameraImageCaptured
func NewCameraImageCapturedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CameraImageCapturedSubscriptionCallback) (*CameraImageCapturedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CameraImageCaptured
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CameraImageCapturedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CameraImageCapturedSubscription{sub}, nil
}

func (s *CameraImageCapturedSubscription) TakeMessage(out *CameraImageCaptured) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCameraImageCapturedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCameraImageCapturedSlice(dst, src []CameraImageCaptured) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CameraImageCapturedTypeSupport types.MessageTypeSupport = _CameraImageCapturedTypeSupport{}

type _CameraImageCapturedTypeSupport struct{}

func (t _CameraImageCapturedTypeSupport) New() types.Message {
	return NewCameraImageCaptured()
}

func (t _CameraImageCapturedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__CameraImageCaptured
	return (unsafe.Pointer)(C.mavros_msgs__msg__CameraImageCaptured__create())
}

func (t _CameraImageCapturedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__CameraImageCaptured__destroy((*C.mavros_msgs__msg__CameraImageCaptured)(pointer_to_free))
}

func (t _CameraImageCapturedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CameraImageCaptured)
	mem := (*C.mavros_msgs__msg__CameraImageCaptured)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	geometry_msgs_msg.QuaternionTypeSupport.AsCStruct(unsafe.Pointer(&mem.orientation), &m.Orientation)
	geographic_msgs_msg.GeoPointTypeSupport.AsCStruct(unsafe.Pointer(&mem.geo), &m.Geo)
	mem.relative_alt = C.float(m.RelativeAlt)
	mem.image_index = C.int32_t(m.ImageIndex)
	mem.capture_result = C.int8_t(m.CaptureResult)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.file_url), m.FileUrl)
}

func (t _CameraImageCapturedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CameraImageCaptured)
	mem := (*C.mavros_msgs__msg__CameraImageCaptured)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	geometry_msgs_msg.QuaternionTypeSupport.AsGoStruct(&m.Orientation, unsafe.Pointer(&mem.orientation))
	geographic_msgs_msg.GeoPointTypeSupport.AsGoStruct(&m.Geo, unsafe.Pointer(&mem.geo))
	m.RelativeAlt = float32(mem.relative_alt)
	m.ImageIndex = int32(mem.image_index)
	m.CaptureResult = int8(mem.capture_result)
	primitives.StringAsGoStruct(&m.FileUrl, unsafe.Pointer(&mem.file_url))
}

func (t _CameraImageCapturedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__CameraImageCaptured())
}

type CCameraImageCaptured = C.mavros_msgs__msg__CameraImageCaptured
type CCameraImageCaptured__Sequence = C.mavros_msgs__msg__CameraImageCaptured__Sequence

func CameraImageCaptured__Sequence_to_Go(goSlice *[]CameraImageCaptured, cSlice CCameraImageCaptured__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CameraImageCaptured, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CameraImageCapturedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CameraImageCaptured__Sequence_to_C(cSlice *CCameraImageCaptured__Sequence, goSlice []CameraImageCaptured) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__CameraImageCaptured)(C.malloc(C.sizeof_struct_mavros_msgs__msg__CameraImageCaptured * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CameraImageCapturedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CameraImageCaptured__Array_to_Go(goSlice []CameraImageCaptured, cSlice []CCameraImageCaptured) {
	for i := 0; i < len(cSlice); i++ {
		CameraImageCapturedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CameraImageCaptured__Array_to_C(cSlice []CCameraImageCaptured, goSlice []CameraImageCaptured) {
	for i := 0; i < len(goSlice); i++ {
		CameraImageCapturedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
