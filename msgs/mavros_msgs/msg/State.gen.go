// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/State", StateTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/State", StateTypeSupport)
}
const (
	State_MODE_APM_PLANE_MANUAL string = "MANUAL"
	State_MODE_APM_PLANE_CIRCLE string = "CIRCLE"
	State_MODE_APM_PLANE_STABILIZE string = "STABILIZE"
	State_MODE_APM_PLANE_TRAINING string = "TRAINING"
	State_MODE_APM_PLANE_ACRO string = "ACRO"
	State_MODE_APM_PLANE_FBWA string = "FBWA"
	State_MODE_APM_PLANE_FBWB string = "FBWB"
	State_MODE_APM_PLANE_CRUISE string = "CRUISE"
	State_MODE_APM_PLANE_AUTOTUNE string = "AUTOTUNE"
	State_MODE_APM_PLANE_AUTO string = "AUTO"
	State_MODE_APM_PLANE_RTL string = "RTL"
	State_MODE_APM_PLANE_LOITER string = "LOITER"
	State_MODE_APM_PLANE_LAND string = "LAND"
	State_MODE_APM_PLANE_GUIDED string = "GUIDED"
	State_MODE_APM_PLANE_INITIALISING string = "INITIALISING"
	State_MODE_APM_PLANE_QSTABILIZE string = "QSTABILIZE"
	State_MODE_APM_PLANE_QHOVER string = "QHOVER"
	State_MODE_APM_PLANE_QLOITER string = "QLOITER"
	State_MODE_APM_PLANE_QLAND string = "QLAND"
	State_MODE_APM_PLANE_QRTL string = "QRTL"
	State_MODE_APM_COPTER_STABILIZE string = "STABILIZE"
	State_MODE_APM_COPTER_ACRO string = "ACRO"
	State_MODE_APM_COPTER_ALT_HOLD string = "ALT_HOLD"
	State_MODE_APM_COPTER_AUTO string = "AUTO"
	State_MODE_APM_COPTER_GUIDED string = "GUIDED"
	State_MODE_APM_COPTER_LOITER string = "LOITER"
	State_MODE_APM_COPTER_RTL string = "RTL"
	State_MODE_APM_COPTER_CIRCLE string = "CIRCLE"
	State_MODE_APM_COPTER_POSITION string = "POSITION"
	State_MODE_APM_COPTER_LAND string = "LAND"
	State_MODE_APM_COPTER_OF_LOITER string = "OF_LOITER"
	State_MODE_APM_COPTER_DRIFT string = "DRIFT"
	State_MODE_APM_COPTER_SPORT string = "SPORT"
	State_MODE_APM_COPTER_FLIP string = "FLIP"
	State_MODE_APM_COPTER_AUTOTUNE string = "AUTOTUNE"
	State_MODE_APM_COPTER_POSHOLD string = "POSHOLD"
	State_MODE_APM_COPTER_BRAKE string = "BRAKE"
	State_MODE_APM_COPTER_THROW string = "THROW"
	State_MODE_APM_COPTER_AVOID_ADSB string = "AVOID_ADSB"
	State_MODE_APM_COPTER_GUIDED_NOGPS string = "GUIDED_NOGPS"
	State_MODE_APM_ROVER_MANUAL string = "MANUAL"
	State_MODE_APM_ROVER_LEARNING string = "LEARNING"
	State_MODE_APM_ROVER_STEERING string = "STEERING"
	State_MODE_APM_ROVER_HOLD string = "HOLD"
	State_MODE_APM_ROVER_AUTO string = "AUTO"
	State_MODE_APM_ROVER_RTL string = "RTL"
	State_MODE_APM_ROVER_GUIDED string = "GUIDED"
	State_MODE_APM_ROVER_INITIALISING string = "INITIALISING"
	State_MODE_PX4_MANUAL string = "MANUAL"
	State_MODE_PX4_ACRO string = "ACRO"
	State_MODE_PX4_ALTITUDE string = "ALTCTL"
	State_MODE_PX4_POSITION string = "POSCTL"
	State_MODE_PX4_OFFBOARD string = "OFFBOARD"
	State_MODE_PX4_STABILIZED string = "STABILIZED"
	State_MODE_PX4_RATTITUDE string = "RATTITUDE"
	State_MODE_PX4_MISSION string = "AUTO.MISSION"
	State_MODE_PX4_LOITER string = "AUTO.LOITER"
	State_MODE_PX4_RTL string = "AUTO.RTL"
	State_MODE_PX4_LAND string = "AUTO.LAND"
	State_MODE_PX4_RTGS string = "AUTO.RTGS"
	State_MODE_PX4_READY string = "AUTO.READY"
	State_MODE_PX4_TAKEOFF string = "AUTO.TAKEOFF"
)

type State struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Connected bool `yaml:"connected"`
	Armed bool `yaml:"armed"`
	Guided bool `yaml:"guided"`
	ManualInput bool `yaml:"manual_input"`
	Mode string `yaml:"mode"`
	SystemStatus uint8 `yaml:"system_status"`
}

// NewState creates a new State with default values.
func NewState() *State {
	self := State{}
	self.SetDefaults()
	return &self
}

func (t *State) Clone() *State {
	c := &State{}
	c.Header = *t.Header.Clone()
	c.Connected = t.Connected
	c.Armed = t.Armed
	c.Guided = t.Guided
	c.ManualInput = t.ManualInput
	c.Mode = t.Mode
	c.SystemStatus = t.SystemStatus
	return c
}

func (t *State) CloneMsg() types.Message {
	return t.Clone()
}

func (t *State) SetDefaults() {
	t.Header.SetDefaults()
	t.Connected = false
	t.Armed = false
	t.Guided = false
	t.ManualInput = false
	t.Mode = ""
	t.SystemStatus = 0
}

func (t *State) GetTypeSupport() types.MessageTypeSupport {
	return StateTypeSupport
}

// StatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type StatePublisher struct {
	*rclgo.Publisher
}

// NewStatePublisher creates and returns a new publisher for the
// State
func NewStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*StatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, StateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &StatePublisher{pub}, nil
}

func (p *StatePublisher) Publish(msg *State) error {
	return p.Publisher.Publish(msg)
}

// StateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type StateSubscription struct {
	*rclgo.Subscription
}

// StateSubscriptionCallback type is used to provide a subscription
// handler function for a StateSubscription.
type StateSubscriptionCallback func(msg *State, info *rclgo.MessageInfo, err error)

// NewStateSubscription creates and returns a new subscription for the
// State
func NewStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback StateSubscriptionCallback) (*StateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg State
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, StateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &StateSubscription{sub}, nil
}

func (s *StateSubscription) TakeMessage(out *State) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneStateSlice(dst, src []State) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var StateTypeSupport types.MessageTypeSupport = _StateTypeSupport{}

type _StateTypeSupport struct{}

func (t _StateTypeSupport) New() types.Message {
	return NewState()
}

func (t _StateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__State
	return (unsafe.Pointer)(C.mavros_msgs__msg__State__create())
}

func (t _StateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__State__destroy((*C.mavros_msgs__msg__State)(pointer_to_free))
}

func (t _StateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*State)
	mem := (*C.mavros_msgs__msg__State)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.connected = C.bool(m.Connected)
	mem.armed = C.bool(m.Armed)
	mem.guided = C.bool(m.Guided)
	mem.manual_input = C.bool(m.ManualInput)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.mode), m.Mode)
	mem.system_status = C.uint8_t(m.SystemStatus)
}

func (t _StateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*State)
	mem := (*C.mavros_msgs__msg__State)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Connected = bool(mem.connected)
	m.Armed = bool(mem.armed)
	m.Guided = bool(mem.guided)
	m.ManualInput = bool(mem.manual_input)
	primitives.StringAsGoStruct(&m.Mode, unsafe.Pointer(&mem.mode))
	m.SystemStatus = uint8(mem.system_status)
}

func (t _StateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__State())
}

type CState = C.mavros_msgs__msg__State
type CState__Sequence = C.mavros_msgs__msg__State__Sequence

func State__Sequence_to_Go(goSlice *[]State, cSlice CState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]State, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		StateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func State__Sequence_to_C(cSlice *CState__Sequence, goSlice []State) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__State)(C.malloc(C.sizeof_struct_mavros_msgs__msg__State * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		StateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func State__Array_to_Go(goSlice []State, cSlice []CState) {
	for i := 0; i < len(cSlice); i++ {
		StateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func State__Array_to_C(cSlice []CState, goSlice []State) {
	for i := 0; i < len(goSlice); i++ {
		StateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
