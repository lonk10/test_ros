// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/override_rc_in.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/OverrideRCIn", OverrideRCInTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/OverrideRCIn", OverrideRCInTypeSupport)
}
const (
	OverrideRCIn_CHAN_RELEASE uint16 = 0
	OverrideRCIn_CHAN_NOCHANGE uint16 = 65535
)

type OverrideRCIn struct {
	Channels [18]uint16 `yaml:"channels"`
}

// NewOverrideRCIn creates a new OverrideRCIn with default values.
func NewOverrideRCIn() *OverrideRCIn {
	self := OverrideRCIn{}
	self.SetDefaults()
	return &self
}

func (t *OverrideRCIn) Clone() *OverrideRCIn {
	c := &OverrideRCIn{}
	c.Channels = t.Channels
	return c
}

func (t *OverrideRCIn) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OverrideRCIn) SetDefaults() {
	t.Channels = [18]uint16{}
}

func (t *OverrideRCIn) GetTypeSupport() types.MessageTypeSupport {
	return OverrideRCInTypeSupport
}

// OverrideRCInPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OverrideRCInPublisher struct {
	*rclgo.Publisher
}

// NewOverrideRCInPublisher creates and returns a new publisher for the
// OverrideRCIn
func NewOverrideRCInPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OverrideRCInPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OverrideRCInTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OverrideRCInPublisher{pub}, nil
}

func (p *OverrideRCInPublisher) Publish(msg *OverrideRCIn) error {
	return p.Publisher.Publish(msg)
}

// OverrideRCInSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OverrideRCInSubscription struct {
	*rclgo.Subscription
}

// OverrideRCInSubscriptionCallback type is used to provide a subscription
// handler function for a OverrideRCInSubscription.
type OverrideRCInSubscriptionCallback func(msg *OverrideRCIn, info *rclgo.MessageInfo, err error)

// NewOverrideRCInSubscription creates and returns a new subscription for the
// OverrideRCIn
func NewOverrideRCInSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OverrideRCInSubscriptionCallback) (*OverrideRCInSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OverrideRCIn
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OverrideRCInTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OverrideRCInSubscription{sub}, nil
}

func (s *OverrideRCInSubscription) TakeMessage(out *OverrideRCIn) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOverrideRCInSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOverrideRCInSlice(dst, src []OverrideRCIn) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OverrideRCInTypeSupport types.MessageTypeSupport = _OverrideRCInTypeSupport{}

type _OverrideRCInTypeSupport struct{}

func (t _OverrideRCInTypeSupport) New() types.Message {
	return NewOverrideRCIn()
}

func (t _OverrideRCInTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__OverrideRCIn
	return (unsafe.Pointer)(C.mavros_msgs__msg__OverrideRCIn__create())
}

func (t _OverrideRCInTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__OverrideRCIn__destroy((*C.mavros_msgs__msg__OverrideRCIn)(pointer_to_free))
}

func (t _OverrideRCInTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OverrideRCIn)
	mem := (*C.mavros_msgs__msg__OverrideRCIn)(dst)
	cSlice_channels := mem.channels[:]
	primitives.Uint16__Array_to_C(*(*[]primitives.CUint16)(unsafe.Pointer(&cSlice_channels)), m.Channels[:])
}

func (t _OverrideRCInTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OverrideRCIn)
	mem := (*C.mavros_msgs__msg__OverrideRCIn)(ros2_message_buffer)
	cSlice_channels := mem.channels[:]
	primitives.Uint16__Array_to_Go(m.Channels[:], *(*[]primitives.CUint16)(unsafe.Pointer(&cSlice_channels)))
}

func (t _OverrideRCInTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__OverrideRCIn())
}

type COverrideRCIn = C.mavros_msgs__msg__OverrideRCIn
type COverrideRCIn__Sequence = C.mavros_msgs__msg__OverrideRCIn__Sequence

func OverrideRCIn__Sequence_to_Go(goSlice *[]OverrideRCIn, cSlice COverrideRCIn__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OverrideRCIn, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OverrideRCInTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OverrideRCIn__Sequence_to_C(cSlice *COverrideRCIn__Sequence, goSlice []OverrideRCIn) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__OverrideRCIn)(C.malloc(C.sizeof_struct_mavros_msgs__msg__OverrideRCIn * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OverrideRCInTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OverrideRCIn__Array_to_Go(goSlice []OverrideRCIn, cSlice []COverrideRCIn) {
	for i := 0; i < len(cSlice); i++ {
		OverrideRCInTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OverrideRCIn__Array_to_C(cSlice []COverrideRCIn, goSlice []OverrideRCIn) {
	for i := 0; i < len(goSlice); i++ {
		OverrideRCInTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
