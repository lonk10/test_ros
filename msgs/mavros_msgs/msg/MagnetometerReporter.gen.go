// Code generated by rclgo-gen. DO NOT EDIT.

package mavros_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	std_msgs_msg "test/msgs/std_msgs/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <mavros_msgs/msg/magnetometer_reporter.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("mavros_msgs/MagnetometerReporter", MagnetometerReporterTypeSupport)
	typemap.RegisterMessage("mavros_msgs/msg/MagnetometerReporter", MagnetometerReporterTypeSupport)
}

type MagnetometerReporter struct {
	Header std_msgs_msg.Header `yaml:"header"`
	Report uint8 `yaml:"report"`
	Confidence float32 `yaml:"confidence"`
}

// NewMagnetometerReporter creates a new MagnetometerReporter with default values.
func NewMagnetometerReporter() *MagnetometerReporter {
	self := MagnetometerReporter{}
	self.SetDefaults()
	return &self
}

func (t *MagnetometerReporter) Clone() *MagnetometerReporter {
	c := &MagnetometerReporter{}
	c.Header = *t.Header.Clone()
	c.Report = t.Report
	c.Confidence = t.Confidence
	return c
}

func (t *MagnetometerReporter) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MagnetometerReporter) SetDefaults() {
	t.Header.SetDefaults()
	t.Report = 0
	t.Confidence = 0
}

func (t *MagnetometerReporter) GetTypeSupport() types.MessageTypeSupport {
	return MagnetometerReporterTypeSupport
}

// MagnetometerReporterPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MagnetometerReporterPublisher struct {
	*rclgo.Publisher
}

// NewMagnetometerReporterPublisher creates and returns a new publisher for the
// MagnetometerReporter
func NewMagnetometerReporterPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MagnetometerReporterPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MagnetometerReporterTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MagnetometerReporterPublisher{pub}, nil
}

func (p *MagnetometerReporterPublisher) Publish(msg *MagnetometerReporter) error {
	return p.Publisher.Publish(msg)
}

// MagnetometerReporterSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MagnetometerReporterSubscription struct {
	*rclgo.Subscription
}

// MagnetometerReporterSubscriptionCallback type is used to provide a subscription
// handler function for a MagnetometerReporterSubscription.
type MagnetometerReporterSubscriptionCallback func(msg *MagnetometerReporter, info *rclgo.MessageInfo, err error)

// NewMagnetometerReporterSubscription creates and returns a new subscription for the
// MagnetometerReporter
func NewMagnetometerReporterSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MagnetometerReporterSubscriptionCallback) (*MagnetometerReporterSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MagnetometerReporter
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MagnetometerReporterTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MagnetometerReporterSubscription{sub}, nil
}

func (s *MagnetometerReporterSubscription) TakeMessage(out *MagnetometerReporter) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMagnetometerReporterSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMagnetometerReporterSlice(dst, src []MagnetometerReporter) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MagnetometerReporterTypeSupport types.MessageTypeSupport = _MagnetometerReporterTypeSupport{}

type _MagnetometerReporterTypeSupport struct{}

func (t _MagnetometerReporterTypeSupport) New() types.Message {
	return NewMagnetometerReporter()
}

func (t _MagnetometerReporterTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.mavros_msgs__msg__MagnetometerReporter
	return (unsafe.Pointer)(C.mavros_msgs__msg__MagnetometerReporter__create())
}

func (t _MagnetometerReporterTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.mavros_msgs__msg__MagnetometerReporter__destroy((*C.mavros_msgs__msg__MagnetometerReporter)(pointer_to_free))
}

func (t _MagnetometerReporterTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MagnetometerReporter)
	mem := (*C.mavros_msgs__msg__MagnetometerReporter)(dst)
	std_msgs_msg.HeaderTypeSupport.AsCStruct(unsafe.Pointer(&mem.header), &m.Header)
	mem.report = C.uint8_t(m.Report)
	mem.confidence = C.float(m.Confidence)
}

func (t _MagnetometerReporterTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MagnetometerReporter)
	mem := (*C.mavros_msgs__msg__MagnetometerReporter)(ros2_message_buffer)
	std_msgs_msg.HeaderTypeSupport.AsGoStruct(&m.Header, unsafe.Pointer(&mem.header))
	m.Report = uint8(mem.report)
	m.Confidence = float32(mem.confidence)
}

func (t _MagnetometerReporterTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__mavros_msgs__msg__MagnetometerReporter())
}

type CMagnetometerReporter = C.mavros_msgs__msg__MagnetometerReporter
type CMagnetometerReporter__Sequence = C.mavros_msgs__msg__MagnetometerReporter__Sequence

func MagnetometerReporter__Sequence_to_Go(goSlice *[]MagnetometerReporter, cSlice CMagnetometerReporter__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MagnetometerReporter, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MagnetometerReporterTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MagnetometerReporter__Sequence_to_C(cSlice *CMagnetometerReporter__Sequence, goSlice []MagnetometerReporter) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.mavros_msgs__msg__MagnetometerReporter)(C.malloc(C.sizeof_struct_mavros_msgs__msg__MagnetometerReporter * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MagnetometerReporterTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MagnetometerReporter__Array_to_Go(goSlice []MagnetometerReporter, cSlice []CMagnetometerReporter) {
	for i := 0; i < len(cSlice); i++ {
		MagnetometerReporterTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MagnetometerReporter__Array_to_C(cSlice []CMagnetometerReporter, goSlice []MagnetometerReporter) {
	for i := 0; i < len(goSlice); i++ {
		MagnetometerReporterTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
