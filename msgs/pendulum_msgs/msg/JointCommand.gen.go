// Code generated by rclgo-gen. DO NOT EDIT.

package pendulum_msgs_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <pendulum_msgs/msg/joint_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("pendulum_msgs/JointCommand", JointCommandTypeSupport)
	typemap.RegisterMessage("pendulum_msgs/msg/JointCommand", JointCommandTypeSupport)
}

type JointCommand struct {
	Position float64 `yaml:"position"`
}

// NewJointCommand creates a new JointCommand with default values.
func NewJointCommand() *JointCommand {
	self := JointCommand{}
	self.SetDefaults()
	return &self
}

func (t *JointCommand) Clone() *JointCommand {
	c := &JointCommand{}
	c.Position = t.Position
	return c
}

func (t *JointCommand) CloneMsg() types.Message {
	return t.Clone()
}

func (t *JointCommand) SetDefaults() {
	t.Position = 0
}

func (t *JointCommand) GetTypeSupport() types.MessageTypeSupport {
	return JointCommandTypeSupport
}

// JointCommandPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type JointCommandPublisher struct {
	*rclgo.Publisher
}

// NewJointCommandPublisher creates and returns a new publisher for the
// JointCommand
func NewJointCommandPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*JointCommandPublisher, error) {
	pub, err := node.NewPublisher(topic_name, JointCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &JointCommandPublisher{pub}, nil
}

func (p *JointCommandPublisher) Publish(msg *JointCommand) error {
	return p.Publisher.Publish(msg)
}

// JointCommandSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type JointCommandSubscription struct {
	*rclgo.Subscription
}

// JointCommandSubscriptionCallback type is used to provide a subscription
// handler function for a JointCommandSubscription.
type JointCommandSubscriptionCallback func(msg *JointCommand, info *rclgo.MessageInfo, err error)

// NewJointCommandSubscription creates and returns a new subscription for the
// JointCommand
func NewJointCommandSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback JointCommandSubscriptionCallback) (*JointCommandSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg JointCommand
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, JointCommandTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &JointCommandSubscription{sub}, nil
}

func (s *JointCommandSubscription) TakeMessage(out *JointCommand) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneJointCommandSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneJointCommandSlice(dst, src []JointCommand) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var JointCommandTypeSupport types.MessageTypeSupport = _JointCommandTypeSupport{}

type _JointCommandTypeSupport struct{}

func (t _JointCommandTypeSupport) New() types.Message {
	return NewJointCommand()
}

func (t _JointCommandTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.pendulum_msgs__msg__JointCommand
	return (unsafe.Pointer)(C.pendulum_msgs__msg__JointCommand__create())
}

func (t _JointCommandTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.pendulum_msgs__msg__JointCommand__destroy((*C.pendulum_msgs__msg__JointCommand)(pointer_to_free))
}

func (t _JointCommandTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*JointCommand)
	mem := (*C.pendulum_msgs__msg__JointCommand)(dst)
	mem.position = C.double(m.Position)
}

func (t _JointCommandTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*JointCommand)
	mem := (*C.pendulum_msgs__msg__JointCommand)(ros2_message_buffer)
	m.Position = float64(mem.position)
}

func (t _JointCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__pendulum_msgs__msg__JointCommand())
}

type CJointCommand = C.pendulum_msgs__msg__JointCommand
type CJointCommand__Sequence = C.pendulum_msgs__msg__JointCommand__Sequence

func JointCommand__Sequence_to_Go(goSlice *[]JointCommand, cSlice CJointCommand__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]JointCommand, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		JointCommandTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func JointCommand__Sequence_to_C(cSlice *CJointCommand__Sequence, goSlice []JointCommand) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.pendulum_msgs__msg__JointCommand)(C.malloc(C.sizeof_struct_pendulum_msgs__msg__JointCommand * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		JointCommandTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func JointCommand__Array_to_Go(goSlice []JointCommand, cSlice []CJointCommand) {
	for i := 0; i < len(cSlice); i++ {
		JointCommandTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func JointCommand__Array_to_C(cSlice []CJointCommand, goSlice []JointCommand) {
	for i := 0; i < len(goSlice); i++ {
		JointCommandTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
